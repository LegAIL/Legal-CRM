
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model VerificationToken
 * 
 */
export type VerificationToken = $Result.DefaultSelection<Prisma.$VerificationTokenPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Case
 * 
 */
export type Case = $Result.DefaultSelection<Prisma.$CasePayload>
/**
 * Model File
 * 
 */
export type File = $Result.DefaultSelection<Prisma.$FilePayload>
/**
 * Model Activity
 * 
 */
export type Activity = $Result.DefaultSelection<Prisma.$ActivityPayload>
/**
 * Model Milestone
 * 
 */
export type Milestone = $Result.DefaultSelection<Prisma.$MilestonePayload>
/**
 * Model Comment
 * 
 */
export type Comment = $Result.DefaultSelection<Prisma.$CommentPayload>
/**
 * Model TimeEntry
 * 
 */
export type TimeEntry = $Result.DefaultSelection<Prisma.$TimeEntryPayload>
/**
 * Model LegalReference
 * 
 */
export type LegalReference = $Result.DefaultSelection<Prisma.$LegalReferencePayload>
/**
 * Model WorkflowStep
 * 
 */
export type WorkflowStep = $Result.DefaultSelection<Prisma.$WorkflowStepPayload>
/**
 * Model DocumentType
 * 
 */
export type DocumentType = $Result.DefaultSelection<Prisma.$DocumentTypePayload>
/**
 * Model LegalStatute
 * 
 */
export type LegalStatute = $Result.DefaultSelection<Prisma.$LegalStatutePayload>
/**
 * Model CourtDecision
 * 
 */
export type CourtDecision = $Result.DefaultSelection<Prisma.$CourtDecisionPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  ADMINISTRATOR: 'ADMINISTRATOR',
  USER: 'USER',
  LAWYER: 'LAWYER',
  ASSOCIATE: 'ASSOCIATE'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const CaseStatus: {
  NEW: 'NEW',
  IN_PROGRESS: 'IN_PROGRESS',
  REVIEW: 'REVIEW',
  COMPLETED: 'COMPLETED'
};

export type CaseStatus = (typeof CaseStatus)[keyof typeof CaseStatus]


export const CasePriority: {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

export type CasePriority = (typeof CasePriority)[keyof typeof CasePriority]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type CaseStatus = $Enums.CaseStatus

export const CaseStatus: typeof $Enums.CaseStatus

export type CasePriority = $Enums.CasePriority

export const CasePriority: typeof $Enums.CasePriority

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Accounts
 * const accounts = await prisma.account.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Accounts
   * const accounts = await prisma.account.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.verificationToken`: Exposes CRUD operations for the **VerificationToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VerificationTokens
    * const verificationTokens = await prisma.verificationToken.findMany()
    * ```
    */
  get verificationToken(): Prisma.VerificationTokenDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.case`: Exposes CRUD operations for the **Case** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cases
    * const cases = await prisma.case.findMany()
    * ```
    */
  get case(): Prisma.CaseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.file`: Exposes CRUD operations for the **File** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Files
    * const files = await prisma.file.findMany()
    * ```
    */
  get file(): Prisma.FileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.activity`: Exposes CRUD operations for the **Activity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Activities
    * const activities = await prisma.activity.findMany()
    * ```
    */
  get activity(): Prisma.ActivityDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.milestone`: Exposes CRUD operations for the **Milestone** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Milestones
    * const milestones = await prisma.milestone.findMany()
    * ```
    */
  get milestone(): Prisma.MilestoneDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.timeEntry`: Exposes CRUD operations for the **TimeEntry** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TimeEntries
    * const timeEntries = await prisma.timeEntry.findMany()
    * ```
    */
  get timeEntry(): Prisma.TimeEntryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.legalReference`: Exposes CRUD operations for the **LegalReference** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LegalReferences
    * const legalReferences = await prisma.legalReference.findMany()
    * ```
    */
  get legalReference(): Prisma.LegalReferenceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workflowStep`: Exposes CRUD operations for the **WorkflowStep** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkflowSteps
    * const workflowSteps = await prisma.workflowStep.findMany()
    * ```
    */
  get workflowStep(): Prisma.WorkflowStepDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.documentType`: Exposes CRUD operations for the **DocumentType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DocumentTypes
    * const documentTypes = await prisma.documentType.findMany()
    * ```
    */
  get documentType(): Prisma.DocumentTypeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.legalStatute`: Exposes CRUD operations for the **LegalStatute** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LegalStatutes
    * const legalStatutes = await prisma.legalStatute.findMany()
    * ```
    */
  get legalStatute(): Prisma.LegalStatuteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.courtDecision`: Exposes CRUD operations for the **CourtDecision** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CourtDecisions
    * const courtDecisions = await prisma.courtDecision.findMany()
    * ```
    */
  get courtDecision(): Prisma.CourtDecisionDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Account: 'Account',
    Session: 'Session',
    VerificationToken: 'VerificationToken',
    User: 'User',
    Case: 'Case',
    File: 'File',
    Activity: 'Activity',
    Milestone: 'Milestone',
    Comment: 'Comment',
    TimeEntry: 'TimeEntry',
    LegalReference: 'LegalReference',
    WorkflowStep: 'WorkflowStep',
    DocumentType: 'DocumentType',
    LegalStatute: 'LegalStatute',
    CourtDecision: 'CourtDecision'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "account" | "session" | "verificationToken" | "user" | "case" | "file" | "activity" | "milestone" | "comment" | "timeEntry" | "legalReference" | "workflowStep" | "documentType" | "legalStatute" | "courtDecision"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AccountUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      VerificationToken: {
        payload: Prisma.$VerificationTokenPayload<ExtArgs>
        fields: Prisma.VerificationTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VerificationTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VerificationTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findFirst: {
            args: Prisma.VerificationTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VerificationTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findMany: {
            args: Prisma.VerificationTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          create: {
            args: Prisma.VerificationTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          createMany: {
            args: Prisma.VerificationTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VerificationTokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          delete: {
            args: Prisma.VerificationTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          update: {
            args: Prisma.VerificationTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          deleteMany: {
            args: Prisma.VerificationTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VerificationTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VerificationTokenUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          upsert: {
            args: Prisma.VerificationTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          aggregate: {
            args: Prisma.VerificationTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVerificationToken>
          }
          groupBy: {
            args: Prisma.VerificationTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<VerificationTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.VerificationTokenCountArgs<ExtArgs>
            result: $Utils.Optional<VerificationTokenCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Case: {
        payload: Prisma.$CasePayload<ExtArgs>
        fields: Prisma.CaseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CaseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CaseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload>
          }
          findFirst: {
            args: Prisma.CaseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CaseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload>
          }
          findMany: {
            args: Prisma.CaseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload>[]
          }
          create: {
            args: Prisma.CaseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload>
          }
          createMany: {
            args: Prisma.CaseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CaseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload>[]
          }
          delete: {
            args: Prisma.CaseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload>
          }
          update: {
            args: Prisma.CaseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload>
          }
          deleteMany: {
            args: Prisma.CaseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CaseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CaseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload>[]
          }
          upsert: {
            args: Prisma.CaseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload>
          }
          aggregate: {
            args: Prisma.CaseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCase>
          }
          groupBy: {
            args: Prisma.CaseGroupByArgs<ExtArgs>
            result: $Utils.Optional<CaseGroupByOutputType>[]
          }
          count: {
            args: Prisma.CaseCountArgs<ExtArgs>
            result: $Utils.Optional<CaseCountAggregateOutputType> | number
          }
        }
      }
      File: {
        payload: Prisma.$FilePayload<ExtArgs>
        fields: Prisma.FileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          findFirst: {
            args: Prisma.FileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          findMany: {
            args: Prisma.FileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>[]
          }
          create: {
            args: Prisma.FileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          createMany: {
            args: Prisma.FileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>[]
          }
          delete: {
            args: Prisma.FileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          update: {
            args: Prisma.FileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          deleteMany: {
            args: Prisma.FileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>[]
          }
          upsert: {
            args: Prisma.FileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          aggregate: {
            args: Prisma.FileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFile>
          }
          groupBy: {
            args: Prisma.FileGroupByArgs<ExtArgs>
            result: $Utils.Optional<FileGroupByOutputType>[]
          }
          count: {
            args: Prisma.FileCountArgs<ExtArgs>
            result: $Utils.Optional<FileCountAggregateOutputType> | number
          }
        }
      }
      Activity: {
        payload: Prisma.$ActivityPayload<ExtArgs>
        fields: Prisma.ActivityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ActivityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ActivityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          findFirst: {
            args: Prisma.ActivityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ActivityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          findMany: {
            args: Prisma.ActivityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>[]
          }
          create: {
            args: Prisma.ActivityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          createMany: {
            args: Prisma.ActivityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ActivityCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>[]
          }
          delete: {
            args: Prisma.ActivityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          update: {
            args: Prisma.ActivityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          deleteMany: {
            args: Prisma.ActivityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ActivityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ActivityUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>[]
          }
          upsert: {
            args: Prisma.ActivityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          aggregate: {
            args: Prisma.ActivityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateActivity>
          }
          groupBy: {
            args: Prisma.ActivityGroupByArgs<ExtArgs>
            result: $Utils.Optional<ActivityGroupByOutputType>[]
          }
          count: {
            args: Prisma.ActivityCountArgs<ExtArgs>
            result: $Utils.Optional<ActivityCountAggregateOutputType> | number
          }
        }
      }
      Milestone: {
        payload: Prisma.$MilestonePayload<ExtArgs>
        fields: Prisma.MilestoneFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MilestoneFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MilestonePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MilestoneFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MilestonePayload>
          }
          findFirst: {
            args: Prisma.MilestoneFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MilestonePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MilestoneFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MilestonePayload>
          }
          findMany: {
            args: Prisma.MilestoneFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MilestonePayload>[]
          }
          create: {
            args: Prisma.MilestoneCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MilestonePayload>
          }
          createMany: {
            args: Prisma.MilestoneCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MilestoneCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MilestonePayload>[]
          }
          delete: {
            args: Prisma.MilestoneDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MilestonePayload>
          }
          update: {
            args: Prisma.MilestoneUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MilestonePayload>
          }
          deleteMany: {
            args: Prisma.MilestoneDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MilestoneUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MilestoneUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MilestonePayload>[]
          }
          upsert: {
            args: Prisma.MilestoneUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MilestonePayload>
          }
          aggregate: {
            args: Prisma.MilestoneAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMilestone>
          }
          groupBy: {
            args: Prisma.MilestoneGroupByArgs<ExtArgs>
            result: $Utils.Optional<MilestoneGroupByOutputType>[]
          }
          count: {
            args: Prisma.MilestoneCountArgs<ExtArgs>
            result: $Utils.Optional<MilestoneCountAggregateOutputType> | number
          }
        }
      }
      Comment: {
        payload: Prisma.$CommentPayload<ExtArgs>
        fields: Prisma.CommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findFirst: {
            args: Prisma.CommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findMany: {
            args: Prisma.CommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          create: {
            args: Prisma.CommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          createMany: {
            args: Prisma.CommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CommentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          delete: {
            args: Prisma.CommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          update: {
            args: Prisma.CommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          deleteMany: {
            args: Prisma.CommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CommentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          upsert: {
            args: Prisma.CommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          aggregate: {
            args: Prisma.CommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComment>
          }
          groupBy: {
            args: Prisma.CommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommentCountArgs<ExtArgs>
            result: $Utils.Optional<CommentCountAggregateOutputType> | number
          }
        }
      }
      TimeEntry: {
        payload: Prisma.$TimeEntryPayload<ExtArgs>
        fields: Prisma.TimeEntryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TimeEntryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeEntryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TimeEntryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeEntryPayload>
          }
          findFirst: {
            args: Prisma.TimeEntryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeEntryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TimeEntryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeEntryPayload>
          }
          findMany: {
            args: Prisma.TimeEntryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeEntryPayload>[]
          }
          create: {
            args: Prisma.TimeEntryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeEntryPayload>
          }
          createMany: {
            args: Prisma.TimeEntryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TimeEntryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeEntryPayload>[]
          }
          delete: {
            args: Prisma.TimeEntryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeEntryPayload>
          }
          update: {
            args: Prisma.TimeEntryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeEntryPayload>
          }
          deleteMany: {
            args: Prisma.TimeEntryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TimeEntryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TimeEntryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeEntryPayload>[]
          }
          upsert: {
            args: Prisma.TimeEntryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeEntryPayload>
          }
          aggregate: {
            args: Prisma.TimeEntryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTimeEntry>
          }
          groupBy: {
            args: Prisma.TimeEntryGroupByArgs<ExtArgs>
            result: $Utils.Optional<TimeEntryGroupByOutputType>[]
          }
          count: {
            args: Prisma.TimeEntryCountArgs<ExtArgs>
            result: $Utils.Optional<TimeEntryCountAggregateOutputType> | number
          }
        }
      }
      LegalReference: {
        payload: Prisma.$LegalReferencePayload<ExtArgs>
        fields: Prisma.LegalReferenceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LegalReferenceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LegalReferencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LegalReferenceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LegalReferencePayload>
          }
          findFirst: {
            args: Prisma.LegalReferenceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LegalReferencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LegalReferenceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LegalReferencePayload>
          }
          findMany: {
            args: Prisma.LegalReferenceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LegalReferencePayload>[]
          }
          create: {
            args: Prisma.LegalReferenceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LegalReferencePayload>
          }
          createMany: {
            args: Prisma.LegalReferenceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LegalReferenceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LegalReferencePayload>[]
          }
          delete: {
            args: Prisma.LegalReferenceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LegalReferencePayload>
          }
          update: {
            args: Prisma.LegalReferenceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LegalReferencePayload>
          }
          deleteMany: {
            args: Prisma.LegalReferenceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LegalReferenceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LegalReferenceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LegalReferencePayload>[]
          }
          upsert: {
            args: Prisma.LegalReferenceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LegalReferencePayload>
          }
          aggregate: {
            args: Prisma.LegalReferenceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLegalReference>
          }
          groupBy: {
            args: Prisma.LegalReferenceGroupByArgs<ExtArgs>
            result: $Utils.Optional<LegalReferenceGroupByOutputType>[]
          }
          count: {
            args: Prisma.LegalReferenceCountArgs<ExtArgs>
            result: $Utils.Optional<LegalReferenceCountAggregateOutputType> | number
          }
        }
      }
      WorkflowStep: {
        payload: Prisma.$WorkflowStepPayload<ExtArgs>
        fields: Prisma.WorkflowStepFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkflowStepFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowStepPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkflowStepFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowStepPayload>
          }
          findFirst: {
            args: Prisma.WorkflowStepFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowStepPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkflowStepFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowStepPayload>
          }
          findMany: {
            args: Prisma.WorkflowStepFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowStepPayload>[]
          }
          create: {
            args: Prisma.WorkflowStepCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowStepPayload>
          }
          createMany: {
            args: Prisma.WorkflowStepCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkflowStepCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowStepPayload>[]
          }
          delete: {
            args: Prisma.WorkflowStepDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowStepPayload>
          }
          update: {
            args: Prisma.WorkflowStepUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowStepPayload>
          }
          deleteMany: {
            args: Prisma.WorkflowStepDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkflowStepUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WorkflowStepUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowStepPayload>[]
          }
          upsert: {
            args: Prisma.WorkflowStepUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowStepPayload>
          }
          aggregate: {
            args: Prisma.WorkflowStepAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkflowStep>
          }
          groupBy: {
            args: Prisma.WorkflowStepGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkflowStepGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkflowStepCountArgs<ExtArgs>
            result: $Utils.Optional<WorkflowStepCountAggregateOutputType> | number
          }
        }
      }
      DocumentType: {
        payload: Prisma.$DocumentTypePayload<ExtArgs>
        fields: Prisma.DocumentTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DocumentTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DocumentTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTypePayload>
          }
          findFirst: {
            args: Prisma.DocumentTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DocumentTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTypePayload>
          }
          findMany: {
            args: Prisma.DocumentTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTypePayload>[]
          }
          create: {
            args: Prisma.DocumentTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTypePayload>
          }
          createMany: {
            args: Prisma.DocumentTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DocumentTypeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTypePayload>[]
          }
          delete: {
            args: Prisma.DocumentTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTypePayload>
          }
          update: {
            args: Prisma.DocumentTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTypePayload>
          }
          deleteMany: {
            args: Prisma.DocumentTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DocumentTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DocumentTypeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTypePayload>[]
          }
          upsert: {
            args: Prisma.DocumentTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTypePayload>
          }
          aggregate: {
            args: Prisma.DocumentTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDocumentType>
          }
          groupBy: {
            args: Prisma.DocumentTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<DocumentTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.DocumentTypeCountArgs<ExtArgs>
            result: $Utils.Optional<DocumentTypeCountAggregateOutputType> | number
          }
        }
      }
      LegalStatute: {
        payload: Prisma.$LegalStatutePayload<ExtArgs>
        fields: Prisma.LegalStatuteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LegalStatuteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LegalStatutePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LegalStatuteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LegalStatutePayload>
          }
          findFirst: {
            args: Prisma.LegalStatuteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LegalStatutePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LegalStatuteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LegalStatutePayload>
          }
          findMany: {
            args: Prisma.LegalStatuteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LegalStatutePayload>[]
          }
          create: {
            args: Prisma.LegalStatuteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LegalStatutePayload>
          }
          createMany: {
            args: Prisma.LegalStatuteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LegalStatuteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LegalStatutePayload>[]
          }
          delete: {
            args: Prisma.LegalStatuteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LegalStatutePayload>
          }
          update: {
            args: Prisma.LegalStatuteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LegalStatutePayload>
          }
          deleteMany: {
            args: Prisma.LegalStatuteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LegalStatuteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LegalStatuteUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LegalStatutePayload>[]
          }
          upsert: {
            args: Prisma.LegalStatuteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LegalStatutePayload>
          }
          aggregate: {
            args: Prisma.LegalStatuteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLegalStatute>
          }
          groupBy: {
            args: Prisma.LegalStatuteGroupByArgs<ExtArgs>
            result: $Utils.Optional<LegalStatuteGroupByOutputType>[]
          }
          count: {
            args: Prisma.LegalStatuteCountArgs<ExtArgs>
            result: $Utils.Optional<LegalStatuteCountAggregateOutputType> | number
          }
        }
      }
      CourtDecision: {
        payload: Prisma.$CourtDecisionPayload<ExtArgs>
        fields: Prisma.CourtDecisionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CourtDecisionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourtDecisionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CourtDecisionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourtDecisionPayload>
          }
          findFirst: {
            args: Prisma.CourtDecisionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourtDecisionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CourtDecisionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourtDecisionPayload>
          }
          findMany: {
            args: Prisma.CourtDecisionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourtDecisionPayload>[]
          }
          create: {
            args: Prisma.CourtDecisionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourtDecisionPayload>
          }
          createMany: {
            args: Prisma.CourtDecisionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CourtDecisionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourtDecisionPayload>[]
          }
          delete: {
            args: Prisma.CourtDecisionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourtDecisionPayload>
          }
          update: {
            args: Prisma.CourtDecisionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourtDecisionPayload>
          }
          deleteMany: {
            args: Prisma.CourtDecisionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CourtDecisionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CourtDecisionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourtDecisionPayload>[]
          }
          upsert: {
            args: Prisma.CourtDecisionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourtDecisionPayload>
          }
          aggregate: {
            args: Prisma.CourtDecisionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCourtDecision>
          }
          groupBy: {
            args: Prisma.CourtDecisionGroupByArgs<ExtArgs>
            result: $Utils.Optional<CourtDecisionGroupByOutputType>[]
          }
          count: {
            args: Prisma.CourtDecisionCountArgs<ExtArgs>
            result: $Utils.Optional<CourtDecisionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    account?: AccountOmit
    session?: SessionOmit
    verificationToken?: VerificationTokenOmit
    user?: UserOmit
    case?: CaseOmit
    file?: FileOmit
    activity?: ActivityOmit
    milestone?: MilestoneOmit
    comment?: CommentOmit
    timeEntry?: TimeEntryOmit
    legalReference?: LegalReferenceOmit
    workflowStep?: WorkflowStepOmit
    documentType?: DocumentTypeOmit
    legalStatute?: LegalStatuteOmit
    courtDecision?: CourtDecisionOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    accounts: number
    sessions: number
    assignedCases: number
    createdCases: number
    activities: number
    fileUploads: number
    completedMilestones: number
    assignedMilestones: number
    comments: number
    timeEntries: number
    legalRefs: number
    workflowSteps: number
    legalStatutes: number
    courtDecisions: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | UserCountOutputTypeCountAccountsArgs
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    assignedCases?: boolean | UserCountOutputTypeCountAssignedCasesArgs
    createdCases?: boolean | UserCountOutputTypeCountCreatedCasesArgs
    activities?: boolean | UserCountOutputTypeCountActivitiesArgs
    fileUploads?: boolean | UserCountOutputTypeCountFileUploadsArgs
    completedMilestones?: boolean | UserCountOutputTypeCountCompletedMilestonesArgs
    assignedMilestones?: boolean | UserCountOutputTypeCountAssignedMilestonesArgs
    comments?: boolean | UserCountOutputTypeCountCommentsArgs
    timeEntries?: boolean | UserCountOutputTypeCountTimeEntriesArgs
    legalRefs?: boolean | UserCountOutputTypeCountLegalRefsArgs
    workflowSteps?: boolean | UserCountOutputTypeCountWorkflowStepsArgs
    legalStatutes?: boolean | UserCountOutputTypeCountLegalStatutesArgs
    courtDecisions?: boolean | UserCountOutputTypeCountCourtDecisionsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssignedCasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedCasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountActivitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFileUploadsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCompletedMilestonesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MilestoneWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssignedMilestonesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MilestoneWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTimeEntriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TimeEntryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLegalRefsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LegalReferenceWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWorkflowStepsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkflowStepWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLegalStatutesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LegalStatuteWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCourtDecisionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourtDecisionWhereInput
  }


  /**
   * Count Type CaseCountOutputType
   */

  export type CaseCountOutputType = {
    files: number
    activities: number
    milestones: number
    comments: number
    timeEntries: number
    legalRefs: number
    workflowSteps: number
    documentTypes: number
    legalStatutes: number
    courtDecisions: number
  }

  export type CaseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    files?: boolean | CaseCountOutputTypeCountFilesArgs
    activities?: boolean | CaseCountOutputTypeCountActivitiesArgs
    milestones?: boolean | CaseCountOutputTypeCountMilestonesArgs
    comments?: boolean | CaseCountOutputTypeCountCommentsArgs
    timeEntries?: boolean | CaseCountOutputTypeCountTimeEntriesArgs
    legalRefs?: boolean | CaseCountOutputTypeCountLegalRefsArgs
    workflowSteps?: boolean | CaseCountOutputTypeCountWorkflowStepsArgs
    documentTypes?: boolean | CaseCountOutputTypeCountDocumentTypesArgs
    legalStatutes?: boolean | CaseCountOutputTypeCountLegalStatutesArgs
    courtDecisions?: boolean | CaseCountOutputTypeCountCourtDecisionsArgs
  }

  // Custom InputTypes
  /**
   * CaseCountOutputType without action
   */
  export type CaseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseCountOutputType
     */
    select?: CaseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CaseCountOutputType without action
   */
  export type CaseCountOutputTypeCountFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileWhereInput
  }

  /**
   * CaseCountOutputType without action
   */
  export type CaseCountOutputTypeCountActivitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityWhereInput
  }

  /**
   * CaseCountOutputType without action
   */
  export type CaseCountOutputTypeCountMilestonesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MilestoneWhereInput
  }

  /**
   * CaseCountOutputType without action
   */
  export type CaseCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * CaseCountOutputType without action
   */
  export type CaseCountOutputTypeCountTimeEntriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TimeEntryWhereInput
  }

  /**
   * CaseCountOutputType without action
   */
  export type CaseCountOutputTypeCountLegalRefsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LegalReferenceWhereInput
  }

  /**
   * CaseCountOutputType without action
   */
  export type CaseCountOutputTypeCountWorkflowStepsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkflowStepWhereInput
  }

  /**
   * CaseCountOutputType without action
   */
  export type CaseCountOutputTypeCountDocumentTypesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentTypeWhereInput
  }

  /**
   * CaseCountOutputType without action
   */
  export type CaseCountOutputTypeCountLegalStatutesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LegalStatuteWhereInput
  }

  /**
   * CaseCountOutputType without action
   */
  export type CaseCountOutputTypeCountCourtDecisionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourtDecisionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountSumAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    provider: number
    providerAccountId: number
    refresh_token: number
    access_token: number
    expires_at: number
    token_type: number
    scope: number
    id_token: number
    session_state: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    expires_at?: true
  }

  export type AccountSumAggregateInputType = {
    expires_at?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
  }

  export type AccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "type" | "provider" | "providerAccountId" | "refresh_token" | "access_token" | "expires_at" | "token_type" | "scope" | "id_token" | "session_state", ExtArgs["result"]["account"]>
  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      type: string
      provider: string
      providerAccountId: string
      refresh_token: string | null
      access_token: string | null
      expires_at: number | null
      token_type: string | null
      scope: string | null
      id_token: string | null
      session_state: string | null
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Accounts and returns the data saved in the database.
     * @param {AccountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts and returns the data updated in the database.
     * @param {AccountUpdateManyAndReturnArgs} args - Arguments to update many Accounts.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AccountUpdateManyAndReturnArgs>(args: SelectSubset<T, AccountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Account model
   */
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'String'>
    readonly userId: FieldRef<"Account", 'String'>
    readonly type: FieldRef<"Account", 'String'>
    readonly provider: FieldRef<"Account", 'String'>
    readonly providerAccountId: FieldRef<"Account", 'String'>
    readonly refresh_token: FieldRef<"Account", 'String'>
    readonly access_token: FieldRef<"Account", 'String'>
    readonly expires_at: FieldRef<"Account", 'Int'>
    readonly token_type: FieldRef<"Account", 'String'>
    readonly scope: FieldRef<"Account", 'String'>
    readonly id_token: FieldRef<"Account", 'String'>
    readonly session_state: FieldRef<"Account", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account createManyAndReturn
   */
  export type AccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
  }

  /**
   * Account updateManyAndReturn
   */
  export type AccountUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to delete.
     */
    limit?: number
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    sessionToken: number
    userId: number
    expires: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    sessionToken: string
    userId: string
    expires: Date
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
  }

  export type SessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sessionToken" | "userId" | "expires", ExtArgs["result"]["session"]>
  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sessionToken: string
      userId: string
      expires: Date
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions and returns the data updated in the database.
     * @param {SessionUpdateManyAndReturnArgs} args - Arguments to update many Sessions.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly sessionToken: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'String'>
    readonly expires: FieldRef<"Session", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session updateManyAndReturn
   */
  export type SessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to delete.
     */
    limit?: number
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model VerificationToken
   */

  export type AggregateVerificationToken = {
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  export type VerificationTokenMinAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenMaxAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenCountAggregateOutputType = {
    identifier: number
    token: number
    expires: number
    _all: number
  }


  export type VerificationTokenMinAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenMaxAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenCountAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
    _all?: true
  }

  export type VerificationTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationToken to aggregate.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VerificationTokens
    **/
    _count?: true | VerificationTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type GetVerificationTokenAggregateType<T extends VerificationTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateVerificationToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerificationToken[P]>
      : GetScalarType<T[P], AggregateVerificationToken[P]>
  }




  export type VerificationTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VerificationTokenWhereInput
    orderBy?: VerificationTokenOrderByWithAggregationInput | VerificationTokenOrderByWithAggregationInput[]
    by: VerificationTokenScalarFieldEnum[] | VerificationTokenScalarFieldEnum
    having?: VerificationTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationTokenCountAggregateInputType | true
    _min?: VerificationTokenMinAggregateInputType
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type VerificationTokenGroupByOutputType = {
    identifier: string
    token: string
    expires: Date
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  type GetVerificationTokenGroupByPayload<T extends VerificationTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VerificationTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
        }
      >
    >


  export type VerificationTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectScalar = {
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }

  export type VerificationTokenOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"identifier" | "token" | "expires", ExtArgs["result"]["verificationToken"]>

  export type $VerificationTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VerificationToken"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      identifier: string
      token: string
      expires: Date
    }, ExtArgs["result"]["verificationToken"]>
    composites: {}
  }

  type VerificationTokenGetPayload<S extends boolean | null | undefined | VerificationTokenDefaultArgs> = $Result.GetResult<Prisma.$VerificationTokenPayload, S>

  type VerificationTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VerificationTokenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VerificationTokenCountAggregateInputType | true
    }

  export interface VerificationTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VerificationToken'], meta: { name: 'VerificationToken' } }
    /**
     * Find zero or one VerificationToken that matches the filter.
     * @param {VerificationTokenFindUniqueArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VerificationTokenFindUniqueArgs>(args: SelectSubset<T, VerificationTokenFindUniqueArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one VerificationToken that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VerificationTokenFindUniqueOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VerificationTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, VerificationTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VerificationToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VerificationTokenFindFirstArgs>(args?: SelectSubset<T, VerificationTokenFindFirstArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VerificationToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VerificationTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, VerificationTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more VerificationTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany()
     * 
     * // Get first 10 VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany({ take: 10 })
     * 
     * // Only select the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.findMany({ select: { identifier: true } })
     * 
     */
    findMany<T extends VerificationTokenFindManyArgs>(args?: SelectSubset<T, VerificationTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a VerificationToken.
     * @param {VerificationTokenCreateArgs} args - Arguments to create a VerificationToken.
     * @example
     * // Create one VerificationToken
     * const VerificationToken = await prisma.verificationToken.create({
     *   data: {
     *     // ... data to create a VerificationToken
     *   }
     * })
     * 
     */
    create<T extends VerificationTokenCreateArgs>(args: SelectSubset<T, VerificationTokenCreateArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many VerificationTokens.
     * @param {VerificationTokenCreateManyArgs} args - Arguments to create many VerificationTokens.
     * @example
     * // Create many VerificationTokens
     * const verificationToken = await prisma.verificationToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VerificationTokenCreateManyArgs>(args?: SelectSubset<T, VerificationTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VerificationTokens and returns the data saved in the database.
     * @param {VerificationTokenCreateManyAndReturnArgs} args - Arguments to create many VerificationTokens.
     * @example
     * // Create many VerificationTokens
     * const verificationToken = await prisma.verificationToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VerificationTokens and only return the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.createManyAndReturn({
     *   select: { identifier: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VerificationTokenCreateManyAndReturnArgs>(args?: SelectSubset<T, VerificationTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a VerificationToken.
     * @param {VerificationTokenDeleteArgs} args - Arguments to delete one VerificationToken.
     * @example
     * // Delete one VerificationToken
     * const VerificationToken = await prisma.verificationToken.delete({
     *   where: {
     *     // ... filter to delete one VerificationToken
     *   }
     * })
     * 
     */
    delete<T extends VerificationTokenDeleteArgs>(args: SelectSubset<T, VerificationTokenDeleteArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one VerificationToken.
     * @param {VerificationTokenUpdateArgs} args - Arguments to update one VerificationToken.
     * @example
     * // Update one VerificationToken
     * const verificationToken = await prisma.verificationToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VerificationTokenUpdateArgs>(args: SelectSubset<T, VerificationTokenUpdateArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more VerificationTokens.
     * @param {VerificationTokenDeleteManyArgs} args - Arguments to filter VerificationTokens to delete.
     * @example
     * // Delete a few VerificationTokens
     * const { count } = await prisma.verificationToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VerificationTokenDeleteManyArgs>(args?: SelectSubset<T, VerificationTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VerificationTokenUpdateManyArgs>(args: SelectSubset<T, VerificationTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens and returns the data updated in the database.
     * @param {VerificationTokenUpdateManyAndReturnArgs} args - Arguments to update many VerificationTokens.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more VerificationTokens and only return the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.updateManyAndReturn({
     *   select: { identifier: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VerificationTokenUpdateManyAndReturnArgs>(args: SelectSubset<T, VerificationTokenUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one VerificationToken.
     * @param {VerificationTokenUpsertArgs} args - Arguments to update or create a VerificationToken.
     * @example
     * // Update or create a VerificationToken
     * const verificationToken = await prisma.verificationToken.upsert({
     *   create: {
     *     // ... data to create a VerificationToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VerificationToken we want to update
     *   }
     * })
     */
    upsert<T extends VerificationTokenUpsertArgs>(args: SelectSubset<T, VerificationTokenUpsertArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenCountArgs} args - Arguments to filter VerificationTokens to count.
     * @example
     * // Count the number of VerificationTokens
     * const count = await prisma.verificationToken.count({
     *   where: {
     *     // ... the filter for the VerificationTokens we want to count
     *   }
     * })
    **/
    count<T extends VerificationTokenCountArgs>(
      args?: Subset<T, VerificationTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationTokenAggregateArgs>(args: Subset<T, VerificationTokenAggregateArgs>): Prisma.PrismaPromise<GetVerificationTokenAggregateType<T>>

    /**
     * Group by VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationTokenGroupByArgs['orderBy'] }
        : { orderBy?: VerificationTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VerificationToken model
   */
  readonly fields: VerificationTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VerificationToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VerificationTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VerificationToken model
   */
  interface VerificationTokenFieldRefs {
    readonly identifier: FieldRef<"VerificationToken", 'String'>
    readonly token: FieldRef<"VerificationToken", 'String'>
    readonly expires: FieldRef<"VerificationToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * VerificationToken findUnique
   */
  export type VerificationTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findUniqueOrThrow
   */
  export type VerificationTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findFirst
   */
  export type VerificationTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findFirstOrThrow
   */
  export type VerificationTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findMany
   */
  export type VerificationTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationTokens to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken create
   */
  export type VerificationTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data needed to create a VerificationToken.
     */
    data: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
  }

  /**
   * VerificationToken createMany
   */
  export type VerificationTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationToken createManyAndReturn
   */
  export type VerificationTokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationToken update
   */
  export type VerificationTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data needed to update a VerificationToken.
     */
    data: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
    /**
     * Choose, which VerificationToken to update.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken updateMany
   */
  export type VerificationTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VerificationTokens.
     */
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     */
    where?: VerificationTokenWhereInput
    /**
     * Limit how many VerificationTokens to update.
     */
    limit?: number
  }

  /**
   * VerificationToken updateManyAndReturn
   */
  export type VerificationTokenUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data used to update VerificationTokens.
     */
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     */
    where?: VerificationTokenWhereInput
    /**
     * Limit how many VerificationTokens to update.
     */
    limit?: number
  }

  /**
   * VerificationToken upsert
   */
  export type VerificationTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The filter to search for the VerificationToken to update in case it exists.
     */
    where: VerificationTokenWhereUniqueInput
    /**
     * In case the VerificationToken found by the `where` argument doesn't exist, create a new VerificationToken with this data.
     */
    create: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
    /**
     * In case the VerificationToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
  }

  /**
   * VerificationToken delete
   */
  export type VerificationTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter which VerificationToken to delete.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken deleteMany
   */
  export type VerificationTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationTokens to delete
     */
    where?: VerificationTokenWhereInput
    /**
     * Limit how many VerificationTokens to delete.
     */
    limit?: number
  }

  /**
   * VerificationToken without action
   */
  export type VerificationTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    password: string | null
    role: $Enums.UserRole | null
    firstName: string | null
    lastName: string | null
    phone: string | null
    position: string | null
    active: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    password: string | null
    role: $Enums.UserRole | null
    firstName: string | null
    lastName: string | null
    phone: string | null
    position: string | null
    active: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    emailVerified: number
    image: number
    password: number
    role: number
    firstName: number
    lastName: number
    phone: number
    position: number
    active: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    password?: true
    role?: true
    firstName?: true
    lastName?: true
    phone?: true
    position?: true
    active?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    password?: true
    role?: true
    firstName?: true
    lastName?: true
    phone?: true
    position?: true
    active?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    password?: true
    role?: true
    firstName?: true
    lastName?: true
    phone?: true
    position?: true
    active?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string | null
    email: string
    emailVerified: Date | null
    image: string | null
    password: string | null
    role: $Enums.UserRole
    firstName: string | null
    lastName: string | null
    phone: string | null
    position: string | null
    active: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    password?: boolean
    role?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    position?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    assignedCases?: boolean | User$assignedCasesArgs<ExtArgs>
    createdCases?: boolean | User$createdCasesArgs<ExtArgs>
    activities?: boolean | User$activitiesArgs<ExtArgs>
    fileUploads?: boolean | User$fileUploadsArgs<ExtArgs>
    completedMilestones?: boolean | User$completedMilestonesArgs<ExtArgs>
    assignedMilestones?: boolean | User$assignedMilestonesArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    timeEntries?: boolean | User$timeEntriesArgs<ExtArgs>
    legalRefs?: boolean | User$legalRefsArgs<ExtArgs>
    workflowSteps?: boolean | User$workflowStepsArgs<ExtArgs>
    legalStatutes?: boolean | User$legalStatutesArgs<ExtArgs>
    courtDecisions?: boolean | User$courtDecisionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    password?: boolean
    role?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    position?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    password?: boolean
    role?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    position?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    password?: boolean
    role?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    position?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "emailVerified" | "image" | "password" | "role" | "firstName" | "lastName" | "phone" | "position" | "active" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    assignedCases?: boolean | User$assignedCasesArgs<ExtArgs>
    createdCases?: boolean | User$createdCasesArgs<ExtArgs>
    activities?: boolean | User$activitiesArgs<ExtArgs>
    fileUploads?: boolean | User$fileUploadsArgs<ExtArgs>
    completedMilestones?: boolean | User$completedMilestonesArgs<ExtArgs>
    assignedMilestones?: boolean | User$assignedMilestonesArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    timeEntries?: boolean | User$timeEntriesArgs<ExtArgs>
    legalRefs?: boolean | User$legalRefsArgs<ExtArgs>
    workflowSteps?: boolean | User$workflowStepsArgs<ExtArgs>
    legalStatutes?: boolean | User$legalStatutesArgs<ExtArgs>
    courtDecisions?: boolean | User$courtDecisionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      accounts: Prisma.$AccountPayload<ExtArgs>[]
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      assignedCases: Prisma.$CasePayload<ExtArgs>[]
      createdCases: Prisma.$CasePayload<ExtArgs>[]
      activities: Prisma.$ActivityPayload<ExtArgs>[]
      fileUploads: Prisma.$FilePayload<ExtArgs>[]
      completedMilestones: Prisma.$MilestonePayload<ExtArgs>[]
      assignedMilestones: Prisma.$MilestonePayload<ExtArgs>[]
      comments: Prisma.$CommentPayload<ExtArgs>[]
      timeEntries: Prisma.$TimeEntryPayload<ExtArgs>[]
      legalRefs: Prisma.$LegalReferencePayload<ExtArgs>[]
      workflowSteps: Prisma.$WorkflowStepPayload<ExtArgs>[]
      legalStatutes: Prisma.$LegalStatutePayload<ExtArgs>[]
      courtDecisions: Prisma.$CourtDecisionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string | null
      email: string
      emailVerified: Date | null
      image: string | null
      password: string | null
      role: $Enums.UserRole
      firstName: string | null
      lastName: string | null
      phone: string | null
      position: string | null
      active: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    accounts<T extends User$accountsArgs<ExtArgs> = {}>(args?: Subset<T, User$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assignedCases<T extends User$assignedCasesArgs<ExtArgs> = {}>(args?: Subset<T, User$assignedCasesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdCases<T extends User$createdCasesArgs<ExtArgs> = {}>(args?: Subset<T, User$createdCasesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    activities<T extends User$activitiesArgs<ExtArgs> = {}>(args?: Subset<T, User$activitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    fileUploads<T extends User$fileUploadsArgs<ExtArgs> = {}>(args?: Subset<T, User$fileUploadsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    completedMilestones<T extends User$completedMilestonesArgs<ExtArgs> = {}>(args?: Subset<T, User$completedMilestonesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MilestonePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assignedMilestones<T extends User$assignedMilestonesArgs<ExtArgs> = {}>(args?: Subset<T, User$assignedMilestonesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MilestonePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    comments<T extends User$commentsArgs<ExtArgs> = {}>(args?: Subset<T, User$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    timeEntries<T extends User$timeEntriesArgs<ExtArgs> = {}>(args?: Subset<T, User$timeEntriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TimeEntryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    legalRefs<T extends User$legalRefsArgs<ExtArgs> = {}>(args?: Subset<T, User$legalRefsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LegalReferencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    workflowSteps<T extends User$workflowStepsArgs<ExtArgs> = {}>(args?: Subset<T, User$workflowStepsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowStepPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    legalStatutes<T extends User$legalStatutesArgs<ExtArgs> = {}>(args?: Subset<T, User$legalStatutesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LegalStatutePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    courtDecisions<T extends User$courtDecisionsArgs<ExtArgs> = {}>(args?: Subset<T, User$courtDecisionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourtDecisionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly emailVerified: FieldRef<"User", 'DateTime'>
    readonly image: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly position: FieldRef<"User", 'String'>
    readonly active: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.accounts
   */
  export type User$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User.assignedCases
   */
  export type User$assignedCasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Case
     */
    omit?: CaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    where?: CaseWhereInput
    orderBy?: CaseOrderByWithRelationInput | CaseOrderByWithRelationInput[]
    cursor?: CaseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CaseScalarFieldEnum | CaseScalarFieldEnum[]
  }

  /**
   * User.createdCases
   */
  export type User$createdCasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Case
     */
    omit?: CaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    where?: CaseWhereInput
    orderBy?: CaseOrderByWithRelationInput | CaseOrderByWithRelationInput[]
    cursor?: CaseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CaseScalarFieldEnum | CaseScalarFieldEnum[]
  }

  /**
   * User.activities
   */
  export type User$activitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    where?: ActivityWhereInput
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    cursor?: ActivityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }

  /**
   * User.fileUploads
   */
  export type User$fileUploadsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    where?: FileWhereInput
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    cursor?: FileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * User.completedMilestones
   */
  export type User$completedMilestonesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Milestone
     */
    omit?: MilestoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneInclude<ExtArgs> | null
    where?: MilestoneWhereInput
    orderBy?: MilestoneOrderByWithRelationInput | MilestoneOrderByWithRelationInput[]
    cursor?: MilestoneWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MilestoneScalarFieldEnum | MilestoneScalarFieldEnum[]
  }

  /**
   * User.assignedMilestones
   */
  export type User$assignedMilestonesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Milestone
     */
    omit?: MilestoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneInclude<ExtArgs> | null
    where?: MilestoneWhereInput
    orderBy?: MilestoneOrderByWithRelationInput | MilestoneOrderByWithRelationInput[]
    cursor?: MilestoneWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MilestoneScalarFieldEnum | MilestoneScalarFieldEnum[]
  }

  /**
   * User.comments
   */
  export type User$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * User.timeEntries
   */
  export type User$timeEntriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeEntry
     */
    select?: TimeEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimeEntry
     */
    omit?: TimeEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeEntryInclude<ExtArgs> | null
    where?: TimeEntryWhereInput
    orderBy?: TimeEntryOrderByWithRelationInput | TimeEntryOrderByWithRelationInput[]
    cursor?: TimeEntryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TimeEntryScalarFieldEnum | TimeEntryScalarFieldEnum[]
  }

  /**
   * User.legalRefs
   */
  export type User$legalRefsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LegalReference
     */
    select?: LegalReferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LegalReference
     */
    omit?: LegalReferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LegalReferenceInclude<ExtArgs> | null
    where?: LegalReferenceWhereInput
    orderBy?: LegalReferenceOrderByWithRelationInput | LegalReferenceOrderByWithRelationInput[]
    cursor?: LegalReferenceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LegalReferenceScalarFieldEnum | LegalReferenceScalarFieldEnum[]
  }

  /**
   * User.workflowSteps
   */
  export type User$workflowStepsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStep
     */
    select?: WorkflowStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStep
     */
    omit?: WorkflowStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStepInclude<ExtArgs> | null
    where?: WorkflowStepWhereInput
    orderBy?: WorkflowStepOrderByWithRelationInput | WorkflowStepOrderByWithRelationInput[]
    cursor?: WorkflowStepWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkflowStepScalarFieldEnum | WorkflowStepScalarFieldEnum[]
  }

  /**
   * User.legalStatutes
   */
  export type User$legalStatutesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LegalStatute
     */
    select?: LegalStatuteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LegalStatute
     */
    omit?: LegalStatuteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LegalStatuteInclude<ExtArgs> | null
    where?: LegalStatuteWhereInput
    orderBy?: LegalStatuteOrderByWithRelationInput | LegalStatuteOrderByWithRelationInput[]
    cursor?: LegalStatuteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LegalStatuteScalarFieldEnum | LegalStatuteScalarFieldEnum[]
  }

  /**
   * User.courtDecisions
   */
  export type User$courtDecisionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourtDecision
     */
    select?: CourtDecisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourtDecision
     */
    omit?: CourtDecisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourtDecisionInclude<ExtArgs> | null
    where?: CourtDecisionWhereInput
    orderBy?: CourtDecisionOrderByWithRelationInput | CourtDecisionOrderByWithRelationInput[]
    cursor?: CourtDecisionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourtDecisionScalarFieldEnum | CourtDecisionScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Case
   */

  export type AggregateCase = {
    _count: CaseCountAggregateOutputType | null
    _avg: CaseAvgAggregateOutputType | null
    _sum: CaseSumAggregateOutputType | null
    _min: CaseMinAggregateOutputType | null
    _max: CaseMaxAggregateOutputType | null
  }

  export type CaseAvgAggregateOutputType = {
    progress: number | null
    estimatedHours: number | null
    actualHours: number | null
    hourlyRate: number | null
  }

  export type CaseSumAggregateOutputType = {
    progress: number | null
    estimatedHours: number | null
    actualHours: number | null
    hourlyRate: number | null
  }

  export type CaseMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    status: $Enums.CaseStatus | null
    priority: $Enums.CasePriority | null
    clientName: string | null
    clientEmail: string | null
    clientPhone: string | null
    dueDate: Date | null
    notes: string | null
    progress: number | null
    estimatedHours: number | null
    actualHours: number | null
    hourlyRate: number | null
    createdAt: Date | null
    updatedAt: Date | null
    assignedToId: string | null
    createdById: string | null
  }

  export type CaseMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    status: $Enums.CaseStatus | null
    priority: $Enums.CasePriority | null
    clientName: string | null
    clientEmail: string | null
    clientPhone: string | null
    dueDate: Date | null
    notes: string | null
    progress: number | null
    estimatedHours: number | null
    actualHours: number | null
    hourlyRate: number | null
    createdAt: Date | null
    updatedAt: Date | null
    assignedToId: string | null
    createdById: string | null
  }

  export type CaseCountAggregateOutputType = {
    id: number
    title: number
    description: number
    status: number
    priority: number
    clientName: number
    clientEmail: number
    clientPhone: number
    dueDate: number
    tags: number
    notes: number
    progress: number
    estimatedHours: number
    actualHours: number
    hourlyRate: number
    createdAt: number
    updatedAt: number
    assignedToId: number
    createdById: number
    _all: number
  }


  export type CaseAvgAggregateInputType = {
    progress?: true
    estimatedHours?: true
    actualHours?: true
    hourlyRate?: true
  }

  export type CaseSumAggregateInputType = {
    progress?: true
    estimatedHours?: true
    actualHours?: true
    hourlyRate?: true
  }

  export type CaseMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    priority?: true
    clientName?: true
    clientEmail?: true
    clientPhone?: true
    dueDate?: true
    notes?: true
    progress?: true
    estimatedHours?: true
    actualHours?: true
    hourlyRate?: true
    createdAt?: true
    updatedAt?: true
    assignedToId?: true
    createdById?: true
  }

  export type CaseMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    priority?: true
    clientName?: true
    clientEmail?: true
    clientPhone?: true
    dueDate?: true
    notes?: true
    progress?: true
    estimatedHours?: true
    actualHours?: true
    hourlyRate?: true
    createdAt?: true
    updatedAt?: true
    assignedToId?: true
    createdById?: true
  }

  export type CaseCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    priority?: true
    clientName?: true
    clientEmail?: true
    clientPhone?: true
    dueDate?: true
    tags?: true
    notes?: true
    progress?: true
    estimatedHours?: true
    actualHours?: true
    hourlyRate?: true
    createdAt?: true
    updatedAt?: true
    assignedToId?: true
    createdById?: true
    _all?: true
  }

  export type CaseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Case to aggregate.
     */
    where?: CaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cases to fetch.
     */
    orderBy?: CaseOrderByWithRelationInput | CaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cases
    **/
    _count?: true | CaseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CaseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CaseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CaseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CaseMaxAggregateInputType
  }

  export type GetCaseAggregateType<T extends CaseAggregateArgs> = {
        [P in keyof T & keyof AggregateCase]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCase[P]>
      : GetScalarType<T[P], AggregateCase[P]>
  }




  export type CaseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseWhereInput
    orderBy?: CaseOrderByWithAggregationInput | CaseOrderByWithAggregationInput[]
    by: CaseScalarFieldEnum[] | CaseScalarFieldEnum
    having?: CaseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CaseCountAggregateInputType | true
    _avg?: CaseAvgAggregateInputType
    _sum?: CaseSumAggregateInputType
    _min?: CaseMinAggregateInputType
    _max?: CaseMaxAggregateInputType
  }

  export type CaseGroupByOutputType = {
    id: string
    title: string
    description: string | null
    status: $Enums.CaseStatus
    priority: $Enums.CasePriority
    clientName: string | null
    clientEmail: string | null
    clientPhone: string | null
    dueDate: Date | null
    tags: string[]
    notes: string | null
    progress: number
    estimatedHours: number | null
    actualHours: number
    hourlyRate: number | null
    createdAt: Date
    updatedAt: Date
    assignedToId: string | null
    createdById: string | null
    _count: CaseCountAggregateOutputType | null
    _avg: CaseAvgAggregateOutputType | null
    _sum: CaseSumAggregateOutputType | null
    _min: CaseMinAggregateOutputType | null
    _max: CaseMaxAggregateOutputType | null
  }

  type GetCaseGroupByPayload<T extends CaseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CaseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CaseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CaseGroupByOutputType[P]>
            : GetScalarType<T[P], CaseGroupByOutputType[P]>
        }
      >
    >


  export type CaseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    clientName?: boolean
    clientEmail?: boolean
    clientPhone?: boolean
    dueDate?: boolean
    tags?: boolean
    notes?: boolean
    progress?: boolean
    estimatedHours?: boolean
    actualHours?: boolean
    hourlyRate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    assignedToId?: boolean
    createdById?: boolean
    assignedTo?: boolean | Case$assignedToArgs<ExtArgs>
    createdBy?: boolean | Case$createdByArgs<ExtArgs>
    files?: boolean | Case$filesArgs<ExtArgs>
    activities?: boolean | Case$activitiesArgs<ExtArgs>
    milestones?: boolean | Case$milestonesArgs<ExtArgs>
    comments?: boolean | Case$commentsArgs<ExtArgs>
    timeEntries?: boolean | Case$timeEntriesArgs<ExtArgs>
    legalRefs?: boolean | Case$legalRefsArgs<ExtArgs>
    workflowSteps?: boolean | Case$workflowStepsArgs<ExtArgs>
    documentTypes?: boolean | Case$documentTypesArgs<ExtArgs>
    legalStatutes?: boolean | Case$legalStatutesArgs<ExtArgs>
    courtDecisions?: boolean | Case$courtDecisionsArgs<ExtArgs>
    _count?: boolean | CaseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["case"]>

  export type CaseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    clientName?: boolean
    clientEmail?: boolean
    clientPhone?: boolean
    dueDate?: boolean
    tags?: boolean
    notes?: boolean
    progress?: boolean
    estimatedHours?: boolean
    actualHours?: boolean
    hourlyRate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    assignedToId?: boolean
    createdById?: boolean
    assignedTo?: boolean | Case$assignedToArgs<ExtArgs>
    createdBy?: boolean | Case$createdByArgs<ExtArgs>
  }, ExtArgs["result"]["case"]>

  export type CaseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    clientName?: boolean
    clientEmail?: boolean
    clientPhone?: boolean
    dueDate?: boolean
    tags?: boolean
    notes?: boolean
    progress?: boolean
    estimatedHours?: boolean
    actualHours?: boolean
    hourlyRate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    assignedToId?: boolean
    createdById?: boolean
    assignedTo?: boolean | Case$assignedToArgs<ExtArgs>
    createdBy?: boolean | Case$createdByArgs<ExtArgs>
  }, ExtArgs["result"]["case"]>

  export type CaseSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    clientName?: boolean
    clientEmail?: boolean
    clientPhone?: boolean
    dueDate?: boolean
    tags?: boolean
    notes?: boolean
    progress?: boolean
    estimatedHours?: boolean
    actualHours?: boolean
    hourlyRate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    assignedToId?: boolean
    createdById?: boolean
  }

  export type CaseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "status" | "priority" | "clientName" | "clientEmail" | "clientPhone" | "dueDate" | "tags" | "notes" | "progress" | "estimatedHours" | "actualHours" | "hourlyRate" | "createdAt" | "updatedAt" | "assignedToId" | "createdById", ExtArgs["result"]["case"]>
  export type CaseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignedTo?: boolean | Case$assignedToArgs<ExtArgs>
    createdBy?: boolean | Case$createdByArgs<ExtArgs>
    files?: boolean | Case$filesArgs<ExtArgs>
    activities?: boolean | Case$activitiesArgs<ExtArgs>
    milestones?: boolean | Case$milestonesArgs<ExtArgs>
    comments?: boolean | Case$commentsArgs<ExtArgs>
    timeEntries?: boolean | Case$timeEntriesArgs<ExtArgs>
    legalRefs?: boolean | Case$legalRefsArgs<ExtArgs>
    workflowSteps?: boolean | Case$workflowStepsArgs<ExtArgs>
    documentTypes?: boolean | Case$documentTypesArgs<ExtArgs>
    legalStatutes?: boolean | Case$legalStatutesArgs<ExtArgs>
    courtDecisions?: boolean | Case$courtDecisionsArgs<ExtArgs>
    _count?: boolean | CaseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CaseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignedTo?: boolean | Case$assignedToArgs<ExtArgs>
    createdBy?: boolean | Case$createdByArgs<ExtArgs>
  }
  export type CaseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignedTo?: boolean | Case$assignedToArgs<ExtArgs>
    createdBy?: boolean | Case$createdByArgs<ExtArgs>
  }

  export type $CasePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Case"
    objects: {
      assignedTo: Prisma.$UserPayload<ExtArgs> | null
      createdBy: Prisma.$UserPayload<ExtArgs> | null
      files: Prisma.$FilePayload<ExtArgs>[]
      activities: Prisma.$ActivityPayload<ExtArgs>[]
      milestones: Prisma.$MilestonePayload<ExtArgs>[]
      comments: Prisma.$CommentPayload<ExtArgs>[]
      timeEntries: Prisma.$TimeEntryPayload<ExtArgs>[]
      legalRefs: Prisma.$LegalReferencePayload<ExtArgs>[]
      workflowSteps: Prisma.$WorkflowStepPayload<ExtArgs>[]
      documentTypes: Prisma.$DocumentTypePayload<ExtArgs>[]
      legalStatutes: Prisma.$LegalStatutePayload<ExtArgs>[]
      courtDecisions: Prisma.$CourtDecisionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      status: $Enums.CaseStatus
      priority: $Enums.CasePriority
      clientName: string | null
      clientEmail: string | null
      clientPhone: string | null
      dueDate: Date | null
      tags: string[]
      notes: string | null
      progress: number
      estimatedHours: number | null
      actualHours: number
      hourlyRate: number | null
      createdAt: Date
      updatedAt: Date
      assignedToId: string | null
      createdById: string | null
    }, ExtArgs["result"]["case"]>
    composites: {}
  }

  type CaseGetPayload<S extends boolean | null | undefined | CaseDefaultArgs> = $Result.GetResult<Prisma.$CasePayload, S>

  type CaseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CaseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CaseCountAggregateInputType | true
    }

  export interface CaseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Case'], meta: { name: 'Case' } }
    /**
     * Find zero or one Case that matches the filter.
     * @param {CaseFindUniqueArgs} args - Arguments to find a Case
     * @example
     * // Get one Case
     * const case = await prisma.case.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CaseFindUniqueArgs>(args: SelectSubset<T, CaseFindUniqueArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Case that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CaseFindUniqueOrThrowArgs} args - Arguments to find a Case
     * @example
     * // Get one Case
     * const case = await prisma.case.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CaseFindUniqueOrThrowArgs>(args: SelectSubset<T, CaseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Case that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseFindFirstArgs} args - Arguments to find a Case
     * @example
     * // Get one Case
     * const case = await prisma.case.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CaseFindFirstArgs>(args?: SelectSubset<T, CaseFindFirstArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Case that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseFindFirstOrThrowArgs} args - Arguments to find a Case
     * @example
     * // Get one Case
     * const case = await prisma.case.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CaseFindFirstOrThrowArgs>(args?: SelectSubset<T, CaseFindFirstOrThrowArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Cases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cases
     * const cases = await prisma.case.findMany()
     * 
     * // Get first 10 Cases
     * const cases = await prisma.case.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const caseWithIdOnly = await prisma.case.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CaseFindManyArgs>(args?: SelectSubset<T, CaseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Case.
     * @param {CaseCreateArgs} args - Arguments to create a Case.
     * @example
     * // Create one Case
     * const Case = await prisma.case.create({
     *   data: {
     *     // ... data to create a Case
     *   }
     * })
     * 
     */
    create<T extends CaseCreateArgs>(args: SelectSubset<T, CaseCreateArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Cases.
     * @param {CaseCreateManyArgs} args - Arguments to create many Cases.
     * @example
     * // Create many Cases
     * const case = await prisma.case.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CaseCreateManyArgs>(args?: SelectSubset<T, CaseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Cases and returns the data saved in the database.
     * @param {CaseCreateManyAndReturnArgs} args - Arguments to create many Cases.
     * @example
     * // Create many Cases
     * const case = await prisma.case.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Cases and only return the `id`
     * const caseWithIdOnly = await prisma.case.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CaseCreateManyAndReturnArgs>(args?: SelectSubset<T, CaseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Case.
     * @param {CaseDeleteArgs} args - Arguments to delete one Case.
     * @example
     * // Delete one Case
     * const Case = await prisma.case.delete({
     *   where: {
     *     // ... filter to delete one Case
     *   }
     * })
     * 
     */
    delete<T extends CaseDeleteArgs>(args: SelectSubset<T, CaseDeleteArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Case.
     * @param {CaseUpdateArgs} args - Arguments to update one Case.
     * @example
     * // Update one Case
     * const case = await prisma.case.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CaseUpdateArgs>(args: SelectSubset<T, CaseUpdateArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Cases.
     * @param {CaseDeleteManyArgs} args - Arguments to filter Cases to delete.
     * @example
     * // Delete a few Cases
     * const { count } = await prisma.case.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CaseDeleteManyArgs>(args?: SelectSubset<T, CaseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cases
     * const case = await prisma.case.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CaseUpdateManyArgs>(args: SelectSubset<T, CaseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cases and returns the data updated in the database.
     * @param {CaseUpdateManyAndReturnArgs} args - Arguments to update many Cases.
     * @example
     * // Update many Cases
     * const case = await prisma.case.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Cases and only return the `id`
     * const caseWithIdOnly = await prisma.case.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CaseUpdateManyAndReturnArgs>(args: SelectSubset<T, CaseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Case.
     * @param {CaseUpsertArgs} args - Arguments to update or create a Case.
     * @example
     * // Update or create a Case
     * const case = await prisma.case.upsert({
     *   create: {
     *     // ... data to create a Case
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Case we want to update
     *   }
     * })
     */
    upsert<T extends CaseUpsertArgs>(args: SelectSubset<T, CaseUpsertArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Cases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseCountArgs} args - Arguments to filter Cases to count.
     * @example
     * // Count the number of Cases
     * const count = await prisma.case.count({
     *   where: {
     *     // ... the filter for the Cases we want to count
     *   }
     * })
    **/
    count<T extends CaseCountArgs>(
      args?: Subset<T, CaseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CaseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Case.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CaseAggregateArgs>(args: Subset<T, CaseAggregateArgs>): Prisma.PrismaPromise<GetCaseAggregateType<T>>

    /**
     * Group by Case.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CaseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CaseGroupByArgs['orderBy'] }
        : { orderBy?: CaseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CaseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCaseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Case model
   */
  readonly fields: CaseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Case.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CaseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    assignedTo<T extends Case$assignedToArgs<ExtArgs> = {}>(args?: Subset<T, Case$assignedToArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    createdBy<T extends Case$createdByArgs<ExtArgs> = {}>(args?: Subset<T, Case$createdByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    files<T extends Case$filesArgs<ExtArgs> = {}>(args?: Subset<T, Case$filesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    activities<T extends Case$activitiesArgs<ExtArgs> = {}>(args?: Subset<T, Case$activitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    milestones<T extends Case$milestonesArgs<ExtArgs> = {}>(args?: Subset<T, Case$milestonesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MilestonePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    comments<T extends Case$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Case$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    timeEntries<T extends Case$timeEntriesArgs<ExtArgs> = {}>(args?: Subset<T, Case$timeEntriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TimeEntryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    legalRefs<T extends Case$legalRefsArgs<ExtArgs> = {}>(args?: Subset<T, Case$legalRefsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LegalReferencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    workflowSteps<T extends Case$workflowStepsArgs<ExtArgs> = {}>(args?: Subset<T, Case$workflowStepsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowStepPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    documentTypes<T extends Case$documentTypesArgs<ExtArgs> = {}>(args?: Subset<T, Case$documentTypesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    legalStatutes<T extends Case$legalStatutesArgs<ExtArgs> = {}>(args?: Subset<T, Case$legalStatutesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LegalStatutePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    courtDecisions<T extends Case$courtDecisionsArgs<ExtArgs> = {}>(args?: Subset<T, Case$courtDecisionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourtDecisionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Case model
   */
  interface CaseFieldRefs {
    readonly id: FieldRef<"Case", 'String'>
    readonly title: FieldRef<"Case", 'String'>
    readonly description: FieldRef<"Case", 'String'>
    readonly status: FieldRef<"Case", 'CaseStatus'>
    readonly priority: FieldRef<"Case", 'CasePriority'>
    readonly clientName: FieldRef<"Case", 'String'>
    readonly clientEmail: FieldRef<"Case", 'String'>
    readonly clientPhone: FieldRef<"Case", 'String'>
    readonly dueDate: FieldRef<"Case", 'DateTime'>
    readonly tags: FieldRef<"Case", 'String[]'>
    readonly notes: FieldRef<"Case", 'String'>
    readonly progress: FieldRef<"Case", 'Int'>
    readonly estimatedHours: FieldRef<"Case", 'Float'>
    readonly actualHours: FieldRef<"Case", 'Float'>
    readonly hourlyRate: FieldRef<"Case", 'Float'>
    readonly createdAt: FieldRef<"Case", 'DateTime'>
    readonly updatedAt: FieldRef<"Case", 'DateTime'>
    readonly assignedToId: FieldRef<"Case", 'String'>
    readonly createdById: FieldRef<"Case", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Case findUnique
   */
  export type CaseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Case
     */
    omit?: CaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * Filter, which Case to fetch.
     */
    where: CaseWhereUniqueInput
  }

  /**
   * Case findUniqueOrThrow
   */
  export type CaseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Case
     */
    omit?: CaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * Filter, which Case to fetch.
     */
    where: CaseWhereUniqueInput
  }

  /**
   * Case findFirst
   */
  export type CaseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Case
     */
    omit?: CaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * Filter, which Case to fetch.
     */
    where?: CaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cases to fetch.
     */
    orderBy?: CaseOrderByWithRelationInput | CaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cases.
     */
    cursor?: CaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cases.
     */
    distinct?: CaseScalarFieldEnum | CaseScalarFieldEnum[]
  }

  /**
   * Case findFirstOrThrow
   */
  export type CaseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Case
     */
    omit?: CaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * Filter, which Case to fetch.
     */
    where?: CaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cases to fetch.
     */
    orderBy?: CaseOrderByWithRelationInput | CaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cases.
     */
    cursor?: CaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cases.
     */
    distinct?: CaseScalarFieldEnum | CaseScalarFieldEnum[]
  }

  /**
   * Case findMany
   */
  export type CaseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Case
     */
    omit?: CaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * Filter, which Cases to fetch.
     */
    where?: CaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cases to fetch.
     */
    orderBy?: CaseOrderByWithRelationInput | CaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cases.
     */
    cursor?: CaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cases.
     */
    skip?: number
    distinct?: CaseScalarFieldEnum | CaseScalarFieldEnum[]
  }

  /**
   * Case create
   */
  export type CaseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Case
     */
    omit?: CaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * The data needed to create a Case.
     */
    data: XOR<CaseCreateInput, CaseUncheckedCreateInput>
  }

  /**
   * Case createMany
   */
  export type CaseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Cases.
     */
    data: CaseCreateManyInput | CaseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Case createManyAndReturn
   */
  export type CaseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Case
     */
    omit?: CaseOmit<ExtArgs> | null
    /**
     * The data used to create many Cases.
     */
    data: CaseCreateManyInput | CaseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Case update
   */
  export type CaseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Case
     */
    omit?: CaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * The data needed to update a Case.
     */
    data: XOR<CaseUpdateInput, CaseUncheckedUpdateInput>
    /**
     * Choose, which Case to update.
     */
    where: CaseWhereUniqueInput
  }

  /**
   * Case updateMany
   */
  export type CaseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Cases.
     */
    data: XOR<CaseUpdateManyMutationInput, CaseUncheckedUpdateManyInput>
    /**
     * Filter which Cases to update
     */
    where?: CaseWhereInput
    /**
     * Limit how many Cases to update.
     */
    limit?: number
  }

  /**
   * Case updateManyAndReturn
   */
  export type CaseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Case
     */
    omit?: CaseOmit<ExtArgs> | null
    /**
     * The data used to update Cases.
     */
    data: XOR<CaseUpdateManyMutationInput, CaseUncheckedUpdateManyInput>
    /**
     * Filter which Cases to update
     */
    where?: CaseWhereInput
    /**
     * Limit how many Cases to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Case upsert
   */
  export type CaseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Case
     */
    omit?: CaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * The filter to search for the Case to update in case it exists.
     */
    where: CaseWhereUniqueInput
    /**
     * In case the Case found by the `where` argument doesn't exist, create a new Case with this data.
     */
    create: XOR<CaseCreateInput, CaseUncheckedCreateInput>
    /**
     * In case the Case was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CaseUpdateInput, CaseUncheckedUpdateInput>
  }

  /**
   * Case delete
   */
  export type CaseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Case
     */
    omit?: CaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * Filter which Case to delete.
     */
    where: CaseWhereUniqueInput
  }

  /**
   * Case deleteMany
   */
  export type CaseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cases to delete
     */
    where?: CaseWhereInput
    /**
     * Limit how many Cases to delete.
     */
    limit?: number
  }

  /**
   * Case.assignedTo
   */
  export type Case$assignedToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Case.createdBy
   */
  export type Case$createdByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Case.files
   */
  export type Case$filesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    where?: FileWhereInput
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    cursor?: FileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * Case.activities
   */
  export type Case$activitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    where?: ActivityWhereInput
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    cursor?: ActivityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }

  /**
   * Case.milestones
   */
  export type Case$milestonesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Milestone
     */
    omit?: MilestoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneInclude<ExtArgs> | null
    where?: MilestoneWhereInput
    orderBy?: MilestoneOrderByWithRelationInput | MilestoneOrderByWithRelationInput[]
    cursor?: MilestoneWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MilestoneScalarFieldEnum | MilestoneScalarFieldEnum[]
  }

  /**
   * Case.comments
   */
  export type Case$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Case.timeEntries
   */
  export type Case$timeEntriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeEntry
     */
    select?: TimeEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimeEntry
     */
    omit?: TimeEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeEntryInclude<ExtArgs> | null
    where?: TimeEntryWhereInput
    orderBy?: TimeEntryOrderByWithRelationInput | TimeEntryOrderByWithRelationInput[]
    cursor?: TimeEntryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TimeEntryScalarFieldEnum | TimeEntryScalarFieldEnum[]
  }

  /**
   * Case.legalRefs
   */
  export type Case$legalRefsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LegalReference
     */
    select?: LegalReferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LegalReference
     */
    omit?: LegalReferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LegalReferenceInclude<ExtArgs> | null
    where?: LegalReferenceWhereInput
    orderBy?: LegalReferenceOrderByWithRelationInput | LegalReferenceOrderByWithRelationInput[]
    cursor?: LegalReferenceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LegalReferenceScalarFieldEnum | LegalReferenceScalarFieldEnum[]
  }

  /**
   * Case.workflowSteps
   */
  export type Case$workflowStepsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStep
     */
    select?: WorkflowStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStep
     */
    omit?: WorkflowStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStepInclude<ExtArgs> | null
    where?: WorkflowStepWhereInput
    orderBy?: WorkflowStepOrderByWithRelationInput | WorkflowStepOrderByWithRelationInput[]
    cursor?: WorkflowStepWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkflowStepScalarFieldEnum | WorkflowStepScalarFieldEnum[]
  }

  /**
   * Case.documentTypes
   */
  export type Case$documentTypesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentType
     */
    select?: DocumentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentType
     */
    omit?: DocumentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTypeInclude<ExtArgs> | null
    where?: DocumentTypeWhereInput
    orderBy?: DocumentTypeOrderByWithRelationInput | DocumentTypeOrderByWithRelationInput[]
    cursor?: DocumentTypeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentTypeScalarFieldEnum | DocumentTypeScalarFieldEnum[]
  }

  /**
   * Case.legalStatutes
   */
  export type Case$legalStatutesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LegalStatute
     */
    select?: LegalStatuteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LegalStatute
     */
    omit?: LegalStatuteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LegalStatuteInclude<ExtArgs> | null
    where?: LegalStatuteWhereInput
    orderBy?: LegalStatuteOrderByWithRelationInput | LegalStatuteOrderByWithRelationInput[]
    cursor?: LegalStatuteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LegalStatuteScalarFieldEnum | LegalStatuteScalarFieldEnum[]
  }

  /**
   * Case.courtDecisions
   */
  export type Case$courtDecisionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourtDecision
     */
    select?: CourtDecisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourtDecision
     */
    omit?: CourtDecisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourtDecisionInclude<ExtArgs> | null
    where?: CourtDecisionWhereInput
    orderBy?: CourtDecisionOrderByWithRelationInput | CourtDecisionOrderByWithRelationInput[]
    cursor?: CourtDecisionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourtDecisionScalarFieldEnum | CourtDecisionScalarFieldEnum[]
  }

  /**
   * Case without action
   */
  export type CaseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Case
     */
    omit?: CaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
  }


  /**
   * Model File
   */

  export type AggregateFile = {
    _count: FileCountAggregateOutputType | null
    _avg: FileAvgAggregateOutputType | null
    _sum: FileSumAggregateOutputType | null
    _min: FileMinAggregateOutputType | null
    _max: FileMaxAggregateOutputType | null
  }

  export type FileAvgAggregateOutputType = {
    fileSize: number | null
  }

  export type FileSumAggregateOutputType = {
    fileSize: number | null
  }

  export type FileMinAggregateOutputType = {
    id: string | null
    originalName: string | null
    fileName: string | null
    fileSize: number | null
    mimeType: string | null
    filePath: string | null
    uploadedAt: Date | null
    caseId: string | null
    uploadedById: string | null
  }

  export type FileMaxAggregateOutputType = {
    id: string | null
    originalName: string | null
    fileName: string | null
    fileSize: number | null
    mimeType: string | null
    filePath: string | null
    uploadedAt: Date | null
    caseId: string | null
    uploadedById: string | null
  }

  export type FileCountAggregateOutputType = {
    id: number
    originalName: number
    fileName: number
    fileSize: number
    mimeType: number
    filePath: number
    uploadedAt: number
    caseId: number
    uploadedById: number
    _all: number
  }


  export type FileAvgAggregateInputType = {
    fileSize?: true
  }

  export type FileSumAggregateInputType = {
    fileSize?: true
  }

  export type FileMinAggregateInputType = {
    id?: true
    originalName?: true
    fileName?: true
    fileSize?: true
    mimeType?: true
    filePath?: true
    uploadedAt?: true
    caseId?: true
    uploadedById?: true
  }

  export type FileMaxAggregateInputType = {
    id?: true
    originalName?: true
    fileName?: true
    fileSize?: true
    mimeType?: true
    filePath?: true
    uploadedAt?: true
    caseId?: true
    uploadedById?: true
  }

  export type FileCountAggregateInputType = {
    id?: true
    originalName?: true
    fileName?: true
    fileSize?: true
    mimeType?: true
    filePath?: true
    uploadedAt?: true
    caseId?: true
    uploadedById?: true
    _all?: true
  }

  export type FileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which File to aggregate.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Files
    **/
    _count?: true | FileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FileMaxAggregateInputType
  }

  export type GetFileAggregateType<T extends FileAggregateArgs> = {
        [P in keyof T & keyof AggregateFile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFile[P]>
      : GetScalarType<T[P], AggregateFile[P]>
  }




  export type FileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileWhereInput
    orderBy?: FileOrderByWithAggregationInput | FileOrderByWithAggregationInput[]
    by: FileScalarFieldEnum[] | FileScalarFieldEnum
    having?: FileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FileCountAggregateInputType | true
    _avg?: FileAvgAggregateInputType
    _sum?: FileSumAggregateInputType
    _min?: FileMinAggregateInputType
    _max?: FileMaxAggregateInputType
  }

  export type FileGroupByOutputType = {
    id: string
    originalName: string
    fileName: string
    fileSize: number
    mimeType: string
    filePath: string
    uploadedAt: Date
    caseId: string
    uploadedById: string
    _count: FileCountAggregateOutputType | null
    _avg: FileAvgAggregateOutputType | null
    _sum: FileSumAggregateOutputType | null
    _min: FileMinAggregateOutputType | null
    _max: FileMaxAggregateOutputType | null
  }

  type GetFileGroupByPayload<T extends FileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FileGroupByOutputType[P]>
            : GetScalarType<T[P], FileGroupByOutputType[P]>
        }
      >
    >


  export type FileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    originalName?: boolean
    fileName?: boolean
    fileSize?: boolean
    mimeType?: boolean
    filePath?: boolean
    uploadedAt?: boolean
    caseId?: boolean
    uploadedById?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["file"]>

  export type FileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    originalName?: boolean
    fileName?: boolean
    fileSize?: boolean
    mimeType?: boolean
    filePath?: boolean
    uploadedAt?: boolean
    caseId?: boolean
    uploadedById?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["file"]>

  export type FileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    originalName?: boolean
    fileName?: boolean
    fileSize?: boolean
    mimeType?: boolean
    filePath?: boolean
    uploadedAt?: boolean
    caseId?: boolean
    uploadedById?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["file"]>

  export type FileSelectScalar = {
    id?: boolean
    originalName?: boolean
    fileName?: boolean
    fileSize?: boolean
    mimeType?: boolean
    filePath?: boolean
    uploadedAt?: boolean
    caseId?: boolean
    uploadedById?: boolean
  }

  export type FileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "originalName" | "fileName" | "fileSize" | "mimeType" | "filePath" | "uploadedAt" | "caseId" | "uploadedById", ExtArgs["result"]["file"]>
  export type FileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $FilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "File"
    objects: {
      case: Prisma.$CasePayload<ExtArgs>
      uploadedBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      originalName: string
      fileName: string
      fileSize: number
      mimeType: string
      filePath: string
      uploadedAt: Date
      caseId: string
      uploadedById: string
    }, ExtArgs["result"]["file"]>
    composites: {}
  }

  type FileGetPayload<S extends boolean | null | undefined | FileDefaultArgs> = $Result.GetResult<Prisma.$FilePayload, S>

  type FileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FileCountAggregateInputType | true
    }

  export interface FileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['File'], meta: { name: 'File' } }
    /**
     * Find zero or one File that matches the filter.
     * @param {FileFindUniqueArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FileFindUniqueArgs>(args: SelectSubset<T, FileFindUniqueArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one File that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FileFindUniqueOrThrowArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FileFindUniqueOrThrowArgs>(args: SelectSubset<T, FileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first File that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindFirstArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FileFindFirstArgs>(args?: SelectSubset<T, FileFindFirstArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first File that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindFirstOrThrowArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FileFindFirstOrThrowArgs>(args?: SelectSubset<T, FileFindFirstOrThrowArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Files that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Files
     * const files = await prisma.file.findMany()
     * 
     * // Get first 10 Files
     * const files = await prisma.file.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fileWithIdOnly = await prisma.file.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FileFindManyArgs>(args?: SelectSubset<T, FileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a File.
     * @param {FileCreateArgs} args - Arguments to create a File.
     * @example
     * // Create one File
     * const File = await prisma.file.create({
     *   data: {
     *     // ... data to create a File
     *   }
     * })
     * 
     */
    create<T extends FileCreateArgs>(args: SelectSubset<T, FileCreateArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Files.
     * @param {FileCreateManyArgs} args - Arguments to create many Files.
     * @example
     * // Create many Files
     * const file = await prisma.file.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FileCreateManyArgs>(args?: SelectSubset<T, FileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Files and returns the data saved in the database.
     * @param {FileCreateManyAndReturnArgs} args - Arguments to create many Files.
     * @example
     * // Create many Files
     * const file = await prisma.file.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Files and only return the `id`
     * const fileWithIdOnly = await prisma.file.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FileCreateManyAndReturnArgs>(args?: SelectSubset<T, FileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a File.
     * @param {FileDeleteArgs} args - Arguments to delete one File.
     * @example
     * // Delete one File
     * const File = await prisma.file.delete({
     *   where: {
     *     // ... filter to delete one File
     *   }
     * })
     * 
     */
    delete<T extends FileDeleteArgs>(args: SelectSubset<T, FileDeleteArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one File.
     * @param {FileUpdateArgs} args - Arguments to update one File.
     * @example
     * // Update one File
     * const file = await prisma.file.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FileUpdateArgs>(args: SelectSubset<T, FileUpdateArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Files.
     * @param {FileDeleteManyArgs} args - Arguments to filter Files to delete.
     * @example
     * // Delete a few Files
     * const { count } = await prisma.file.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FileDeleteManyArgs>(args?: SelectSubset<T, FileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Files
     * const file = await prisma.file.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FileUpdateManyArgs>(args: SelectSubset<T, FileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Files and returns the data updated in the database.
     * @param {FileUpdateManyAndReturnArgs} args - Arguments to update many Files.
     * @example
     * // Update many Files
     * const file = await prisma.file.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Files and only return the `id`
     * const fileWithIdOnly = await prisma.file.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FileUpdateManyAndReturnArgs>(args: SelectSubset<T, FileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one File.
     * @param {FileUpsertArgs} args - Arguments to update or create a File.
     * @example
     * // Update or create a File
     * const file = await prisma.file.upsert({
     *   create: {
     *     // ... data to create a File
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the File we want to update
     *   }
     * })
     */
    upsert<T extends FileUpsertArgs>(args: SelectSubset<T, FileUpsertArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileCountArgs} args - Arguments to filter Files to count.
     * @example
     * // Count the number of Files
     * const count = await prisma.file.count({
     *   where: {
     *     // ... the filter for the Files we want to count
     *   }
     * })
    **/
    count<T extends FileCountArgs>(
      args?: Subset<T, FileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a File.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FileAggregateArgs>(args: Subset<T, FileAggregateArgs>): Prisma.PrismaPromise<GetFileAggregateType<T>>

    /**
     * Group by File.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FileGroupByArgs['orderBy'] }
        : { orderBy?: FileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the File model
   */
  readonly fields: FileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for File.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    case<T extends CaseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CaseDefaultArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    uploadedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the File model
   */
  interface FileFieldRefs {
    readonly id: FieldRef<"File", 'String'>
    readonly originalName: FieldRef<"File", 'String'>
    readonly fileName: FieldRef<"File", 'String'>
    readonly fileSize: FieldRef<"File", 'Int'>
    readonly mimeType: FieldRef<"File", 'String'>
    readonly filePath: FieldRef<"File", 'String'>
    readonly uploadedAt: FieldRef<"File", 'DateTime'>
    readonly caseId: FieldRef<"File", 'String'>
    readonly uploadedById: FieldRef<"File", 'String'>
  }
    

  // Custom InputTypes
  /**
   * File findUnique
   */
  export type FileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File findUniqueOrThrow
   */
  export type FileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File findFirst
   */
  export type FileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Files.
     */
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * File findFirstOrThrow
   */
  export type FileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Files.
     */
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * File findMany
   */
  export type FileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which Files to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * File create
   */
  export type FileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The data needed to create a File.
     */
    data: XOR<FileCreateInput, FileUncheckedCreateInput>
  }

  /**
   * File createMany
   */
  export type FileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Files.
     */
    data: FileCreateManyInput | FileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * File createManyAndReturn
   */
  export type FileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * The data used to create many Files.
     */
    data: FileCreateManyInput | FileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * File update
   */
  export type FileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The data needed to update a File.
     */
    data: XOR<FileUpdateInput, FileUncheckedUpdateInput>
    /**
     * Choose, which File to update.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File updateMany
   */
  export type FileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Files.
     */
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyInput>
    /**
     * Filter which Files to update
     */
    where?: FileWhereInput
    /**
     * Limit how many Files to update.
     */
    limit?: number
  }

  /**
   * File updateManyAndReturn
   */
  export type FileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * The data used to update Files.
     */
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyInput>
    /**
     * Filter which Files to update
     */
    where?: FileWhereInput
    /**
     * Limit how many Files to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * File upsert
   */
  export type FileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The filter to search for the File to update in case it exists.
     */
    where: FileWhereUniqueInput
    /**
     * In case the File found by the `where` argument doesn't exist, create a new File with this data.
     */
    create: XOR<FileCreateInput, FileUncheckedCreateInput>
    /**
     * In case the File was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FileUpdateInput, FileUncheckedUpdateInput>
  }

  /**
   * File delete
   */
  export type FileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter which File to delete.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File deleteMany
   */
  export type FileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Files to delete
     */
    where?: FileWhereInput
    /**
     * Limit how many Files to delete.
     */
    limit?: number
  }

  /**
   * File without action
   */
  export type FileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
  }


  /**
   * Model Activity
   */

  export type AggregateActivity = {
    _count: ActivityCountAggregateOutputType | null
    _min: ActivityMinAggregateOutputType | null
    _max: ActivityMaxAggregateOutputType | null
  }

  export type ActivityMinAggregateOutputType = {
    id: string | null
    type: string | null
    description: string | null
    createdAt: Date | null
    userId: string | null
    caseId: string | null
  }

  export type ActivityMaxAggregateOutputType = {
    id: string | null
    type: string | null
    description: string | null
    createdAt: Date | null
    userId: string | null
    caseId: string | null
  }

  export type ActivityCountAggregateOutputType = {
    id: number
    type: number
    description: number
    metadata: number
    createdAt: number
    userId: number
    caseId: number
    _all: number
  }


  export type ActivityMinAggregateInputType = {
    id?: true
    type?: true
    description?: true
    createdAt?: true
    userId?: true
    caseId?: true
  }

  export type ActivityMaxAggregateInputType = {
    id?: true
    type?: true
    description?: true
    createdAt?: true
    userId?: true
    caseId?: true
  }

  export type ActivityCountAggregateInputType = {
    id?: true
    type?: true
    description?: true
    metadata?: true
    createdAt?: true
    userId?: true
    caseId?: true
    _all?: true
  }

  export type ActivityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Activity to aggregate.
     */
    where?: ActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activities to fetch.
     */
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Activities
    **/
    _count?: true | ActivityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActivityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActivityMaxAggregateInputType
  }

  export type GetActivityAggregateType<T extends ActivityAggregateArgs> = {
        [P in keyof T & keyof AggregateActivity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActivity[P]>
      : GetScalarType<T[P], AggregateActivity[P]>
  }




  export type ActivityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityWhereInput
    orderBy?: ActivityOrderByWithAggregationInput | ActivityOrderByWithAggregationInput[]
    by: ActivityScalarFieldEnum[] | ActivityScalarFieldEnum
    having?: ActivityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActivityCountAggregateInputType | true
    _min?: ActivityMinAggregateInputType
    _max?: ActivityMaxAggregateInputType
  }

  export type ActivityGroupByOutputType = {
    id: string
    type: string
    description: string
    metadata: JsonValue | null
    createdAt: Date
    userId: string | null
    caseId: string | null
    _count: ActivityCountAggregateOutputType | null
    _min: ActivityMinAggregateOutputType | null
    _max: ActivityMaxAggregateOutputType | null
  }

  type GetActivityGroupByPayload<T extends ActivityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ActivityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActivityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActivityGroupByOutputType[P]>
            : GetScalarType<T[P], ActivityGroupByOutputType[P]>
        }
      >
    >


  export type ActivitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    description?: boolean
    metadata?: boolean
    createdAt?: boolean
    userId?: boolean
    caseId?: boolean
    user?: boolean | Activity$userArgs<ExtArgs>
    case?: boolean | Activity$caseArgs<ExtArgs>
  }, ExtArgs["result"]["activity"]>

  export type ActivitySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    description?: boolean
    metadata?: boolean
    createdAt?: boolean
    userId?: boolean
    caseId?: boolean
    user?: boolean | Activity$userArgs<ExtArgs>
    case?: boolean | Activity$caseArgs<ExtArgs>
  }, ExtArgs["result"]["activity"]>

  export type ActivitySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    description?: boolean
    metadata?: boolean
    createdAt?: boolean
    userId?: boolean
    caseId?: boolean
    user?: boolean | Activity$userArgs<ExtArgs>
    case?: boolean | Activity$caseArgs<ExtArgs>
  }, ExtArgs["result"]["activity"]>

  export type ActivitySelectScalar = {
    id?: boolean
    type?: boolean
    description?: boolean
    metadata?: boolean
    createdAt?: boolean
    userId?: boolean
    caseId?: boolean
  }

  export type ActivityOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "description" | "metadata" | "createdAt" | "userId" | "caseId", ExtArgs["result"]["activity"]>
  export type ActivityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Activity$userArgs<ExtArgs>
    case?: boolean | Activity$caseArgs<ExtArgs>
  }
  export type ActivityIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Activity$userArgs<ExtArgs>
    case?: boolean | Activity$caseArgs<ExtArgs>
  }
  export type ActivityIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Activity$userArgs<ExtArgs>
    case?: boolean | Activity$caseArgs<ExtArgs>
  }

  export type $ActivityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Activity"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      case: Prisma.$CasePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: string
      description: string
      metadata: Prisma.JsonValue | null
      createdAt: Date
      userId: string | null
      caseId: string | null
    }, ExtArgs["result"]["activity"]>
    composites: {}
  }

  type ActivityGetPayload<S extends boolean | null | undefined | ActivityDefaultArgs> = $Result.GetResult<Prisma.$ActivityPayload, S>

  type ActivityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ActivityFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ActivityCountAggregateInputType | true
    }

  export interface ActivityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Activity'], meta: { name: 'Activity' } }
    /**
     * Find zero or one Activity that matches the filter.
     * @param {ActivityFindUniqueArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ActivityFindUniqueArgs>(args: SelectSubset<T, ActivityFindUniqueArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Activity that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ActivityFindUniqueOrThrowArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ActivityFindUniqueOrThrowArgs>(args: SelectSubset<T, ActivityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Activity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityFindFirstArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ActivityFindFirstArgs>(args?: SelectSubset<T, ActivityFindFirstArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Activity that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityFindFirstOrThrowArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ActivityFindFirstOrThrowArgs>(args?: SelectSubset<T, ActivityFindFirstOrThrowArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Activities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Activities
     * const activities = await prisma.activity.findMany()
     * 
     * // Get first 10 Activities
     * const activities = await prisma.activity.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const activityWithIdOnly = await prisma.activity.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ActivityFindManyArgs>(args?: SelectSubset<T, ActivityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Activity.
     * @param {ActivityCreateArgs} args - Arguments to create a Activity.
     * @example
     * // Create one Activity
     * const Activity = await prisma.activity.create({
     *   data: {
     *     // ... data to create a Activity
     *   }
     * })
     * 
     */
    create<T extends ActivityCreateArgs>(args: SelectSubset<T, ActivityCreateArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Activities.
     * @param {ActivityCreateManyArgs} args - Arguments to create many Activities.
     * @example
     * // Create many Activities
     * const activity = await prisma.activity.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ActivityCreateManyArgs>(args?: SelectSubset<T, ActivityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Activities and returns the data saved in the database.
     * @param {ActivityCreateManyAndReturnArgs} args - Arguments to create many Activities.
     * @example
     * // Create many Activities
     * const activity = await prisma.activity.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Activities and only return the `id`
     * const activityWithIdOnly = await prisma.activity.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ActivityCreateManyAndReturnArgs>(args?: SelectSubset<T, ActivityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Activity.
     * @param {ActivityDeleteArgs} args - Arguments to delete one Activity.
     * @example
     * // Delete one Activity
     * const Activity = await prisma.activity.delete({
     *   where: {
     *     // ... filter to delete one Activity
     *   }
     * })
     * 
     */
    delete<T extends ActivityDeleteArgs>(args: SelectSubset<T, ActivityDeleteArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Activity.
     * @param {ActivityUpdateArgs} args - Arguments to update one Activity.
     * @example
     * // Update one Activity
     * const activity = await prisma.activity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ActivityUpdateArgs>(args: SelectSubset<T, ActivityUpdateArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Activities.
     * @param {ActivityDeleteManyArgs} args - Arguments to filter Activities to delete.
     * @example
     * // Delete a few Activities
     * const { count } = await prisma.activity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ActivityDeleteManyArgs>(args?: SelectSubset<T, ActivityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Activities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Activities
     * const activity = await prisma.activity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ActivityUpdateManyArgs>(args: SelectSubset<T, ActivityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Activities and returns the data updated in the database.
     * @param {ActivityUpdateManyAndReturnArgs} args - Arguments to update many Activities.
     * @example
     * // Update many Activities
     * const activity = await prisma.activity.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Activities and only return the `id`
     * const activityWithIdOnly = await prisma.activity.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ActivityUpdateManyAndReturnArgs>(args: SelectSubset<T, ActivityUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Activity.
     * @param {ActivityUpsertArgs} args - Arguments to update or create a Activity.
     * @example
     * // Update or create a Activity
     * const activity = await prisma.activity.upsert({
     *   create: {
     *     // ... data to create a Activity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Activity we want to update
     *   }
     * })
     */
    upsert<T extends ActivityUpsertArgs>(args: SelectSubset<T, ActivityUpsertArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Activities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityCountArgs} args - Arguments to filter Activities to count.
     * @example
     * // Count the number of Activities
     * const count = await prisma.activity.count({
     *   where: {
     *     // ... the filter for the Activities we want to count
     *   }
     * })
    **/
    count<T extends ActivityCountArgs>(
      args?: Subset<T, ActivityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActivityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Activity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActivityAggregateArgs>(args: Subset<T, ActivityAggregateArgs>): Prisma.PrismaPromise<GetActivityAggregateType<T>>

    /**
     * Group by Activity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActivityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActivityGroupByArgs['orderBy'] }
        : { orderBy?: ActivityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActivityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActivityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Activity model
   */
  readonly fields: ActivityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Activity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ActivityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Activity$userArgs<ExtArgs> = {}>(args?: Subset<T, Activity$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    case<T extends Activity$caseArgs<ExtArgs> = {}>(args?: Subset<T, Activity$caseArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Activity model
   */
  interface ActivityFieldRefs {
    readonly id: FieldRef<"Activity", 'String'>
    readonly type: FieldRef<"Activity", 'String'>
    readonly description: FieldRef<"Activity", 'String'>
    readonly metadata: FieldRef<"Activity", 'Json'>
    readonly createdAt: FieldRef<"Activity", 'DateTime'>
    readonly userId: FieldRef<"Activity", 'String'>
    readonly caseId: FieldRef<"Activity", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Activity findUnique
   */
  export type ActivityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter, which Activity to fetch.
     */
    where: ActivityWhereUniqueInput
  }

  /**
   * Activity findUniqueOrThrow
   */
  export type ActivityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter, which Activity to fetch.
     */
    where: ActivityWhereUniqueInput
  }

  /**
   * Activity findFirst
   */
  export type ActivityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter, which Activity to fetch.
     */
    where?: ActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activities to fetch.
     */
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Activities.
     */
    cursor?: ActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Activities.
     */
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }

  /**
   * Activity findFirstOrThrow
   */
  export type ActivityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter, which Activity to fetch.
     */
    where?: ActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activities to fetch.
     */
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Activities.
     */
    cursor?: ActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Activities.
     */
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }

  /**
   * Activity findMany
   */
  export type ActivityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter, which Activities to fetch.
     */
    where?: ActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activities to fetch.
     */
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Activities.
     */
    cursor?: ActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activities.
     */
    skip?: number
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }

  /**
   * Activity create
   */
  export type ActivityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * The data needed to create a Activity.
     */
    data: XOR<ActivityCreateInput, ActivityUncheckedCreateInput>
  }

  /**
   * Activity createMany
   */
  export type ActivityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Activities.
     */
    data: ActivityCreateManyInput | ActivityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Activity createManyAndReturn
   */
  export type ActivityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * The data used to create many Activities.
     */
    data: ActivityCreateManyInput | ActivityCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Activity update
   */
  export type ActivityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * The data needed to update a Activity.
     */
    data: XOR<ActivityUpdateInput, ActivityUncheckedUpdateInput>
    /**
     * Choose, which Activity to update.
     */
    where: ActivityWhereUniqueInput
  }

  /**
   * Activity updateMany
   */
  export type ActivityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Activities.
     */
    data: XOR<ActivityUpdateManyMutationInput, ActivityUncheckedUpdateManyInput>
    /**
     * Filter which Activities to update
     */
    where?: ActivityWhereInput
    /**
     * Limit how many Activities to update.
     */
    limit?: number
  }

  /**
   * Activity updateManyAndReturn
   */
  export type ActivityUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * The data used to update Activities.
     */
    data: XOR<ActivityUpdateManyMutationInput, ActivityUncheckedUpdateManyInput>
    /**
     * Filter which Activities to update
     */
    where?: ActivityWhereInput
    /**
     * Limit how many Activities to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Activity upsert
   */
  export type ActivityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * The filter to search for the Activity to update in case it exists.
     */
    where: ActivityWhereUniqueInput
    /**
     * In case the Activity found by the `where` argument doesn't exist, create a new Activity with this data.
     */
    create: XOR<ActivityCreateInput, ActivityUncheckedCreateInput>
    /**
     * In case the Activity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ActivityUpdateInput, ActivityUncheckedUpdateInput>
  }

  /**
   * Activity delete
   */
  export type ActivityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter which Activity to delete.
     */
    where: ActivityWhereUniqueInput
  }

  /**
   * Activity deleteMany
   */
  export type ActivityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Activities to delete
     */
    where?: ActivityWhereInput
    /**
     * Limit how many Activities to delete.
     */
    limit?: number
  }

  /**
   * Activity.user
   */
  export type Activity$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Activity.case
   */
  export type Activity$caseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Case
     */
    omit?: CaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    where?: CaseWhereInput
  }

  /**
   * Activity without action
   */
  export type ActivityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
  }


  /**
   * Model Milestone
   */

  export type AggregateMilestone = {
    _count: MilestoneCountAggregateOutputType | null
    _avg: MilestoneAvgAggregateOutputType | null
    _sum: MilestoneSumAggregateOutputType | null
    _min: MilestoneMinAggregateOutputType | null
    _max: MilestoneMaxAggregateOutputType | null
  }

  export type MilestoneAvgAggregateOutputType = {
    order: number | null
    estimatedHours: number | null
  }

  export type MilestoneSumAggregateOutputType = {
    order: number | null
    estimatedHours: number | null
  }

  export type MilestoneMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    dueDate: Date | null
    completed: boolean | null
    completedAt: Date | null
    order: number | null
    estimatedHours: number | null
    createdAt: Date | null
    updatedAt: Date | null
    caseId: string | null
    completedById: string | null
    assignedToId: string | null
  }

  export type MilestoneMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    dueDate: Date | null
    completed: boolean | null
    completedAt: Date | null
    order: number | null
    estimatedHours: number | null
    createdAt: Date | null
    updatedAt: Date | null
    caseId: string | null
    completedById: string | null
    assignedToId: string | null
  }

  export type MilestoneCountAggregateOutputType = {
    id: number
    title: number
    description: number
    dueDate: number
    completed: number
    completedAt: number
    order: number
    estimatedHours: number
    createdAt: number
    updatedAt: number
    caseId: number
    completedById: number
    assignedToId: number
    _all: number
  }


  export type MilestoneAvgAggregateInputType = {
    order?: true
    estimatedHours?: true
  }

  export type MilestoneSumAggregateInputType = {
    order?: true
    estimatedHours?: true
  }

  export type MilestoneMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    dueDate?: true
    completed?: true
    completedAt?: true
    order?: true
    estimatedHours?: true
    createdAt?: true
    updatedAt?: true
    caseId?: true
    completedById?: true
    assignedToId?: true
  }

  export type MilestoneMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    dueDate?: true
    completed?: true
    completedAt?: true
    order?: true
    estimatedHours?: true
    createdAt?: true
    updatedAt?: true
    caseId?: true
    completedById?: true
    assignedToId?: true
  }

  export type MilestoneCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    dueDate?: true
    completed?: true
    completedAt?: true
    order?: true
    estimatedHours?: true
    createdAt?: true
    updatedAt?: true
    caseId?: true
    completedById?: true
    assignedToId?: true
    _all?: true
  }

  export type MilestoneAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Milestone to aggregate.
     */
    where?: MilestoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Milestones to fetch.
     */
    orderBy?: MilestoneOrderByWithRelationInput | MilestoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MilestoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Milestones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Milestones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Milestones
    **/
    _count?: true | MilestoneCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MilestoneAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MilestoneSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MilestoneMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MilestoneMaxAggregateInputType
  }

  export type GetMilestoneAggregateType<T extends MilestoneAggregateArgs> = {
        [P in keyof T & keyof AggregateMilestone]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMilestone[P]>
      : GetScalarType<T[P], AggregateMilestone[P]>
  }




  export type MilestoneGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MilestoneWhereInput
    orderBy?: MilestoneOrderByWithAggregationInput | MilestoneOrderByWithAggregationInput[]
    by: MilestoneScalarFieldEnum[] | MilestoneScalarFieldEnum
    having?: MilestoneScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MilestoneCountAggregateInputType | true
    _avg?: MilestoneAvgAggregateInputType
    _sum?: MilestoneSumAggregateInputType
    _min?: MilestoneMinAggregateInputType
    _max?: MilestoneMaxAggregateInputType
  }

  export type MilestoneGroupByOutputType = {
    id: string
    title: string
    description: string | null
    dueDate: Date | null
    completed: boolean
    completedAt: Date | null
    order: number
    estimatedHours: number | null
    createdAt: Date
    updatedAt: Date
    caseId: string
    completedById: string | null
    assignedToId: string | null
    _count: MilestoneCountAggregateOutputType | null
    _avg: MilestoneAvgAggregateOutputType | null
    _sum: MilestoneSumAggregateOutputType | null
    _min: MilestoneMinAggregateOutputType | null
    _max: MilestoneMaxAggregateOutputType | null
  }

  type GetMilestoneGroupByPayload<T extends MilestoneGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MilestoneGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MilestoneGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MilestoneGroupByOutputType[P]>
            : GetScalarType<T[P], MilestoneGroupByOutputType[P]>
        }
      >
    >


  export type MilestoneSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    dueDate?: boolean
    completed?: boolean
    completedAt?: boolean
    order?: boolean
    estimatedHours?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    caseId?: boolean
    completedById?: boolean
    assignedToId?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
    completedBy?: boolean | Milestone$completedByArgs<ExtArgs>
    assignedTo?: boolean | Milestone$assignedToArgs<ExtArgs>
  }, ExtArgs["result"]["milestone"]>

  export type MilestoneSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    dueDate?: boolean
    completed?: boolean
    completedAt?: boolean
    order?: boolean
    estimatedHours?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    caseId?: boolean
    completedById?: boolean
    assignedToId?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
    completedBy?: boolean | Milestone$completedByArgs<ExtArgs>
    assignedTo?: boolean | Milestone$assignedToArgs<ExtArgs>
  }, ExtArgs["result"]["milestone"]>

  export type MilestoneSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    dueDate?: boolean
    completed?: boolean
    completedAt?: boolean
    order?: boolean
    estimatedHours?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    caseId?: boolean
    completedById?: boolean
    assignedToId?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
    completedBy?: boolean | Milestone$completedByArgs<ExtArgs>
    assignedTo?: boolean | Milestone$assignedToArgs<ExtArgs>
  }, ExtArgs["result"]["milestone"]>

  export type MilestoneSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    dueDate?: boolean
    completed?: boolean
    completedAt?: boolean
    order?: boolean
    estimatedHours?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    caseId?: boolean
    completedById?: boolean
    assignedToId?: boolean
  }

  export type MilestoneOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "dueDate" | "completed" | "completedAt" | "order" | "estimatedHours" | "createdAt" | "updatedAt" | "caseId" | "completedById" | "assignedToId", ExtArgs["result"]["milestone"]>
  export type MilestoneInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
    completedBy?: boolean | Milestone$completedByArgs<ExtArgs>
    assignedTo?: boolean | Milestone$assignedToArgs<ExtArgs>
  }
  export type MilestoneIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
    completedBy?: boolean | Milestone$completedByArgs<ExtArgs>
    assignedTo?: boolean | Milestone$assignedToArgs<ExtArgs>
  }
  export type MilestoneIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
    completedBy?: boolean | Milestone$completedByArgs<ExtArgs>
    assignedTo?: boolean | Milestone$assignedToArgs<ExtArgs>
  }

  export type $MilestonePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Milestone"
    objects: {
      case: Prisma.$CasePayload<ExtArgs>
      completedBy: Prisma.$UserPayload<ExtArgs> | null
      assignedTo: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      dueDate: Date | null
      completed: boolean
      completedAt: Date | null
      order: number
      estimatedHours: number | null
      createdAt: Date
      updatedAt: Date
      caseId: string
      completedById: string | null
      assignedToId: string | null
    }, ExtArgs["result"]["milestone"]>
    composites: {}
  }

  type MilestoneGetPayload<S extends boolean | null | undefined | MilestoneDefaultArgs> = $Result.GetResult<Prisma.$MilestonePayload, S>

  type MilestoneCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MilestoneFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MilestoneCountAggregateInputType | true
    }

  export interface MilestoneDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Milestone'], meta: { name: 'Milestone' } }
    /**
     * Find zero or one Milestone that matches the filter.
     * @param {MilestoneFindUniqueArgs} args - Arguments to find a Milestone
     * @example
     * // Get one Milestone
     * const milestone = await prisma.milestone.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MilestoneFindUniqueArgs>(args: SelectSubset<T, MilestoneFindUniqueArgs<ExtArgs>>): Prisma__MilestoneClient<$Result.GetResult<Prisma.$MilestonePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Milestone that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MilestoneFindUniqueOrThrowArgs} args - Arguments to find a Milestone
     * @example
     * // Get one Milestone
     * const milestone = await prisma.milestone.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MilestoneFindUniqueOrThrowArgs>(args: SelectSubset<T, MilestoneFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MilestoneClient<$Result.GetResult<Prisma.$MilestonePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Milestone that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MilestoneFindFirstArgs} args - Arguments to find a Milestone
     * @example
     * // Get one Milestone
     * const milestone = await prisma.milestone.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MilestoneFindFirstArgs>(args?: SelectSubset<T, MilestoneFindFirstArgs<ExtArgs>>): Prisma__MilestoneClient<$Result.GetResult<Prisma.$MilestonePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Milestone that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MilestoneFindFirstOrThrowArgs} args - Arguments to find a Milestone
     * @example
     * // Get one Milestone
     * const milestone = await prisma.milestone.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MilestoneFindFirstOrThrowArgs>(args?: SelectSubset<T, MilestoneFindFirstOrThrowArgs<ExtArgs>>): Prisma__MilestoneClient<$Result.GetResult<Prisma.$MilestonePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Milestones that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MilestoneFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Milestones
     * const milestones = await prisma.milestone.findMany()
     * 
     * // Get first 10 Milestones
     * const milestones = await prisma.milestone.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const milestoneWithIdOnly = await prisma.milestone.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MilestoneFindManyArgs>(args?: SelectSubset<T, MilestoneFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MilestonePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Milestone.
     * @param {MilestoneCreateArgs} args - Arguments to create a Milestone.
     * @example
     * // Create one Milestone
     * const Milestone = await prisma.milestone.create({
     *   data: {
     *     // ... data to create a Milestone
     *   }
     * })
     * 
     */
    create<T extends MilestoneCreateArgs>(args: SelectSubset<T, MilestoneCreateArgs<ExtArgs>>): Prisma__MilestoneClient<$Result.GetResult<Prisma.$MilestonePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Milestones.
     * @param {MilestoneCreateManyArgs} args - Arguments to create many Milestones.
     * @example
     * // Create many Milestones
     * const milestone = await prisma.milestone.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MilestoneCreateManyArgs>(args?: SelectSubset<T, MilestoneCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Milestones and returns the data saved in the database.
     * @param {MilestoneCreateManyAndReturnArgs} args - Arguments to create many Milestones.
     * @example
     * // Create many Milestones
     * const milestone = await prisma.milestone.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Milestones and only return the `id`
     * const milestoneWithIdOnly = await prisma.milestone.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MilestoneCreateManyAndReturnArgs>(args?: SelectSubset<T, MilestoneCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MilestonePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Milestone.
     * @param {MilestoneDeleteArgs} args - Arguments to delete one Milestone.
     * @example
     * // Delete one Milestone
     * const Milestone = await prisma.milestone.delete({
     *   where: {
     *     // ... filter to delete one Milestone
     *   }
     * })
     * 
     */
    delete<T extends MilestoneDeleteArgs>(args: SelectSubset<T, MilestoneDeleteArgs<ExtArgs>>): Prisma__MilestoneClient<$Result.GetResult<Prisma.$MilestonePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Milestone.
     * @param {MilestoneUpdateArgs} args - Arguments to update one Milestone.
     * @example
     * // Update one Milestone
     * const milestone = await prisma.milestone.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MilestoneUpdateArgs>(args: SelectSubset<T, MilestoneUpdateArgs<ExtArgs>>): Prisma__MilestoneClient<$Result.GetResult<Prisma.$MilestonePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Milestones.
     * @param {MilestoneDeleteManyArgs} args - Arguments to filter Milestones to delete.
     * @example
     * // Delete a few Milestones
     * const { count } = await prisma.milestone.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MilestoneDeleteManyArgs>(args?: SelectSubset<T, MilestoneDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Milestones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MilestoneUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Milestones
     * const milestone = await prisma.milestone.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MilestoneUpdateManyArgs>(args: SelectSubset<T, MilestoneUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Milestones and returns the data updated in the database.
     * @param {MilestoneUpdateManyAndReturnArgs} args - Arguments to update many Milestones.
     * @example
     * // Update many Milestones
     * const milestone = await prisma.milestone.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Milestones and only return the `id`
     * const milestoneWithIdOnly = await prisma.milestone.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MilestoneUpdateManyAndReturnArgs>(args: SelectSubset<T, MilestoneUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MilestonePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Milestone.
     * @param {MilestoneUpsertArgs} args - Arguments to update or create a Milestone.
     * @example
     * // Update or create a Milestone
     * const milestone = await prisma.milestone.upsert({
     *   create: {
     *     // ... data to create a Milestone
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Milestone we want to update
     *   }
     * })
     */
    upsert<T extends MilestoneUpsertArgs>(args: SelectSubset<T, MilestoneUpsertArgs<ExtArgs>>): Prisma__MilestoneClient<$Result.GetResult<Prisma.$MilestonePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Milestones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MilestoneCountArgs} args - Arguments to filter Milestones to count.
     * @example
     * // Count the number of Milestones
     * const count = await prisma.milestone.count({
     *   where: {
     *     // ... the filter for the Milestones we want to count
     *   }
     * })
    **/
    count<T extends MilestoneCountArgs>(
      args?: Subset<T, MilestoneCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MilestoneCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Milestone.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MilestoneAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MilestoneAggregateArgs>(args: Subset<T, MilestoneAggregateArgs>): Prisma.PrismaPromise<GetMilestoneAggregateType<T>>

    /**
     * Group by Milestone.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MilestoneGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MilestoneGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MilestoneGroupByArgs['orderBy'] }
        : { orderBy?: MilestoneGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MilestoneGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMilestoneGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Milestone model
   */
  readonly fields: MilestoneFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Milestone.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MilestoneClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    case<T extends CaseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CaseDefaultArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    completedBy<T extends Milestone$completedByArgs<ExtArgs> = {}>(args?: Subset<T, Milestone$completedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    assignedTo<T extends Milestone$assignedToArgs<ExtArgs> = {}>(args?: Subset<T, Milestone$assignedToArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Milestone model
   */
  interface MilestoneFieldRefs {
    readonly id: FieldRef<"Milestone", 'String'>
    readonly title: FieldRef<"Milestone", 'String'>
    readonly description: FieldRef<"Milestone", 'String'>
    readonly dueDate: FieldRef<"Milestone", 'DateTime'>
    readonly completed: FieldRef<"Milestone", 'Boolean'>
    readonly completedAt: FieldRef<"Milestone", 'DateTime'>
    readonly order: FieldRef<"Milestone", 'Int'>
    readonly estimatedHours: FieldRef<"Milestone", 'Float'>
    readonly createdAt: FieldRef<"Milestone", 'DateTime'>
    readonly updatedAt: FieldRef<"Milestone", 'DateTime'>
    readonly caseId: FieldRef<"Milestone", 'String'>
    readonly completedById: FieldRef<"Milestone", 'String'>
    readonly assignedToId: FieldRef<"Milestone", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Milestone findUnique
   */
  export type MilestoneFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Milestone
     */
    omit?: MilestoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneInclude<ExtArgs> | null
    /**
     * Filter, which Milestone to fetch.
     */
    where: MilestoneWhereUniqueInput
  }

  /**
   * Milestone findUniqueOrThrow
   */
  export type MilestoneFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Milestone
     */
    omit?: MilestoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneInclude<ExtArgs> | null
    /**
     * Filter, which Milestone to fetch.
     */
    where: MilestoneWhereUniqueInput
  }

  /**
   * Milestone findFirst
   */
  export type MilestoneFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Milestone
     */
    omit?: MilestoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneInclude<ExtArgs> | null
    /**
     * Filter, which Milestone to fetch.
     */
    where?: MilestoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Milestones to fetch.
     */
    orderBy?: MilestoneOrderByWithRelationInput | MilestoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Milestones.
     */
    cursor?: MilestoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Milestones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Milestones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Milestones.
     */
    distinct?: MilestoneScalarFieldEnum | MilestoneScalarFieldEnum[]
  }

  /**
   * Milestone findFirstOrThrow
   */
  export type MilestoneFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Milestone
     */
    omit?: MilestoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneInclude<ExtArgs> | null
    /**
     * Filter, which Milestone to fetch.
     */
    where?: MilestoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Milestones to fetch.
     */
    orderBy?: MilestoneOrderByWithRelationInput | MilestoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Milestones.
     */
    cursor?: MilestoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Milestones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Milestones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Milestones.
     */
    distinct?: MilestoneScalarFieldEnum | MilestoneScalarFieldEnum[]
  }

  /**
   * Milestone findMany
   */
  export type MilestoneFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Milestone
     */
    omit?: MilestoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneInclude<ExtArgs> | null
    /**
     * Filter, which Milestones to fetch.
     */
    where?: MilestoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Milestones to fetch.
     */
    orderBy?: MilestoneOrderByWithRelationInput | MilestoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Milestones.
     */
    cursor?: MilestoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Milestones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Milestones.
     */
    skip?: number
    distinct?: MilestoneScalarFieldEnum | MilestoneScalarFieldEnum[]
  }

  /**
   * Milestone create
   */
  export type MilestoneCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Milestone
     */
    omit?: MilestoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneInclude<ExtArgs> | null
    /**
     * The data needed to create a Milestone.
     */
    data: XOR<MilestoneCreateInput, MilestoneUncheckedCreateInput>
  }

  /**
   * Milestone createMany
   */
  export type MilestoneCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Milestones.
     */
    data: MilestoneCreateManyInput | MilestoneCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Milestone createManyAndReturn
   */
  export type MilestoneCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Milestone
     */
    omit?: MilestoneOmit<ExtArgs> | null
    /**
     * The data used to create many Milestones.
     */
    data: MilestoneCreateManyInput | MilestoneCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Milestone update
   */
  export type MilestoneUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Milestone
     */
    omit?: MilestoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneInclude<ExtArgs> | null
    /**
     * The data needed to update a Milestone.
     */
    data: XOR<MilestoneUpdateInput, MilestoneUncheckedUpdateInput>
    /**
     * Choose, which Milestone to update.
     */
    where: MilestoneWhereUniqueInput
  }

  /**
   * Milestone updateMany
   */
  export type MilestoneUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Milestones.
     */
    data: XOR<MilestoneUpdateManyMutationInput, MilestoneUncheckedUpdateManyInput>
    /**
     * Filter which Milestones to update
     */
    where?: MilestoneWhereInput
    /**
     * Limit how many Milestones to update.
     */
    limit?: number
  }

  /**
   * Milestone updateManyAndReturn
   */
  export type MilestoneUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Milestone
     */
    omit?: MilestoneOmit<ExtArgs> | null
    /**
     * The data used to update Milestones.
     */
    data: XOR<MilestoneUpdateManyMutationInput, MilestoneUncheckedUpdateManyInput>
    /**
     * Filter which Milestones to update
     */
    where?: MilestoneWhereInput
    /**
     * Limit how many Milestones to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Milestone upsert
   */
  export type MilestoneUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Milestone
     */
    omit?: MilestoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneInclude<ExtArgs> | null
    /**
     * The filter to search for the Milestone to update in case it exists.
     */
    where: MilestoneWhereUniqueInput
    /**
     * In case the Milestone found by the `where` argument doesn't exist, create a new Milestone with this data.
     */
    create: XOR<MilestoneCreateInput, MilestoneUncheckedCreateInput>
    /**
     * In case the Milestone was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MilestoneUpdateInput, MilestoneUncheckedUpdateInput>
  }

  /**
   * Milestone delete
   */
  export type MilestoneDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Milestone
     */
    omit?: MilestoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneInclude<ExtArgs> | null
    /**
     * Filter which Milestone to delete.
     */
    where: MilestoneWhereUniqueInput
  }

  /**
   * Milestone deleteMany
   */
  export type MilestoneDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Milestones to delete
     */
    where?: MilestoneWhereInput
    /**
     * Limit how many Milestones to delete.
     */
    limit?: number
  }

  /**
   * Milestone.completedBy
   */
  export type Milestone$completedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Milestone.assignedTo
   */
  export type Milestone$assignedToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Milestone without action
   */
  export type MilestoneDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Milestone
     */
    select?: MilestoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Milestone
     */
    omit?: MilestoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilestoneInclude<ExtArgs> | null
  }


  /**
   * Model Comment
   */

  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentMinAggregateOutputType = {
    id: string | null
    content: string | null
    isInternal: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    caseId: string | null
    authorId: string | null
  }

  export type CommentMaxAggregateOutputType = {
    id: string | null
    content: string | null
    isInternal: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    caseId: string | null
    authorId: string | null
  }

  export type CommentCountAggregateOutputType = {
    id: number
    content: number
    isInternal: number
    createdAt: number
    updatedAt: number
    caseId: number
    authorId: number
    _all: number
  }


  export type CommentMinAggregateInputType = {
    id?: true
    content?: true
    isInternal?: true
    createdAt?: true
    updatedAt?: true
    caseId?: true
    authorId?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    content?: true
    isInternal?: true
    createdAt?: true
    updatedAt?: true
    caseId?: true
    authorId?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    content?: true
    isInternal?: true
    createdAt?: true
    updatedAt?: true
    caseId?: true
    authorId?: true
    _all?: true
  }

  export type CommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comment to aggregate.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithAggregationInput | CommentOrderByWithAggregationInput[]
    by: CommentScalarFieldEnum[] | CommentScalarFieldEnum
    having?: CommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }

  export type CommentGroupByOutputType = {
    id: string
    content: string
    isInternal: boolean
    createdAt: Date
    updatedAt: Date
    caseId: string
    authorId: string
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type CommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    isInternal?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    caseId?: boolean
    authorId?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    isInternal?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    caseId?: boolean
    authorId?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    isInternal?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    caseId?: boolean
    authorId?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectScalar = {
    id?: boolean
    content?: boolean
    isInternal?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    caseId?: boolean
    authorId?: boolean
  }

  export type CommentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "content" | "isInternal" | "createdAt" | "updatedAt" | "caseId" | "authorId", ExtArgs["result"]["comment"]>
  export type CommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CommentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CommentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Comment"
    objects: {
      case: Prisma.$CasePayload<ExtArgs>
      author: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      content: string
      isInternal: boolean
      createdAt: Date
      updatedAt: Date
      caseId: string
      authorId: string
    }, ExtArgs["result"]["comment"]>
    composites: {}
  }

  type CommentGetPayload<S extends boolean | null | undefined | CommentDefaultArgs> = $Result.GetResult<Prisma.$CommentPayload, S>

  type CommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CommentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CommentCountAggregateInputType | true
    }

  export interface CommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comment'], meta: { name: 'Comment' } }
    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommentFindUniqueArgs>(args: SelectSubset<T, CommentFindUniqueArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Comment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CommentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommentFindUniqueOrThrowArgs>(args: SelectSubset<T, CommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommentFindFirstArgs>(args?: SelectSubset<T, CommentFindFirstArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Comment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommentFindFirstOrThrowArgs>(args?: SelectSubset<T, CommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommentFindManyArgs>(args?: SelectSubset<T, CommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
     */
    create<T extends CommentCreateArgs>(args: SelectSubset<T, CommentCreateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Comments.
     * @param {CommentCreateManyArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommentCreateManyArgs>(args?: SelectSubset<T, CommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Comments and returns the data saved in the database.
     * @param {CommentCreateManyAndReturnArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Comments and only return the `id`
     * const commentWithIdOnly = await prisma.comment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CommentCreateManyAndReturnArgs>(args?: SelectSubset<T, CommentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
     */
    delete<T extends CommentDeleteArgs>(args: SelectSubset<T, CommentDeleteArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommentUpdateArgs>(args: SelectSubset<T, CommentUpdateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommentDeleteManyArgs>(args?: SelectSubset<T, CommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommentUpdateManyArgs>(args: SelectSubset<T, CommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments and returns the data updated in the database.
     * @param {CommentUpdateManyAndReturnArgs} args - Arguments to update many Comments.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Comments and only return the `id`
     * const commentWithIdOnly = await prisma.comment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CommentUpdateManyAndReturnArgs>(args: SelectSubset<T, CommentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
     */
    upsert<T extends CommentUpsertArgs>(args: SelectSubset<T, CommentUpsertArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): Prisma.PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Comment model
   */
  readonly fields: CommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    case<T extends CaseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CaseDefaultArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    author<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Comment model
   */
  interface CommentFieldRefs {
    readonly id: FieldRef<"Comment", 'String'>
    readonly content: FieldRef<"Comment", 'String'>
    readonly isInternal: FieldRef<"Comment", 'Boolean'>
    readonly createdAt: FieldRef<"Comment", 'DateTime'>
    readonly updatedAt: FieldRef<"Comment", 'DateTime'>
    readonly caseId: FieldRef<"Comment", 'String'>
    readonly authorId: FieldRef<"Comment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Comment findUnique
   */
  export type CommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findUniqueOrThrow
   */
  export type CommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findFirst
   */
  export type CommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findFirstOrThrow
   */
  export type CommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findMany
   */
  export type CommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment create
   */
  export type CommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to create a Comment.
     */
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>
  }

  /**
   * Comment createMany
   */
  export type CommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Comment createManyAndReturn
   */
  export type CommentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Comment update
   */
  export type CommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to update a Comment.
     */
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
    /**
     * Choose, which Comment to update.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to update.
     */
    limit?: number
  }

  /**
   * Comment updateManyAndReturn
   */
  export type CommentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Comment upsert
   */
  export type CommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The filter to search for the Comment to update in case it exists.
     */
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
     */
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
  }

  /**
   * Comment delete
   */
  export type CommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter which Comment to delete.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comments to delete
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to delete.
     */
    limit?: number
  }

  /**
   * Comment without action
   */
  export type CommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
  }


  /**
   * Model TimeEntry
   */

  export type AggregateTimeEntry = {
    _count: TimeEntryCountAggregateOutputType | null
    _avg: TimeEntryAvgAggregateOutputType | null
    _sum: TimeEntrySumAggregateOutputType | null
    _min: TimeEntryMinAggregateOutputType | null
    _max: TimeEntryMaxAggregateOutputType | null
  }

  export type TimeEntryAvgAggregateOutputType = {
    hours: number | null
    hourlyRate: number | null
    amount: number | null
  }

  export type TimeEntrySumAggregateOutputType = {
    hours: number | null
    hourlyRate: number | null
    amount: number | null
  }

  export type TimeEntryMinAggregateOutputType = {
    id: string | null
    description: string | null
    hours: number | null
    date: Date | null
    billable: boolean | null
    hourlyRate: number | null
    amount: number | null
    createdAt: Date | null
    updatedAt: Date | null
    caseId: string | null
    userId: string | null
  }

  export type TimeEntryMaxAggregateOutputType = {
    id: string | null
    description: string | null
    hours: number | null
    date: Date | null
    billable: boolean | null
    hourlyRate: number | null
    amount: number | null
    createdAt: Date | null
    updatedAt: Date | null
    caseId: string | null
    userId: string | null
  }

  export type TimeEntryCountAggregateOutputType = {
    id: number
    description: number
    hours: number
    date: number
    billable: number
    hourlyRate: number
    amount: number
    createdAt: number
    updatedAt: number
    caseId: number
    userId: number
    _all: number
  }


  export type TimeEntryAvgAggregateInputType = {
    hours?: true
    hourlyRate?: true
    amount?: true
  }

  export type TimeEntrySumAggregateInputType = {
    hours?: true
    hourlyRate?: true
    amount?: true
  }

  export type TimeEntryMinAggregateInputType = {
    id?: true
    description?: true
    hours?: true
    date?: true
    billable?: true
    hourlyRate?: true
    amount?: true
    createdAt?: true
    updatedAt?: true
    caseId?: true
    userId?: true
  }

  export type TimeEntryMaxAggregateInputType = {
    id?: true
    description?: true
    hours?: true
    date?: true
    billable?: true
    hourlyRate?: true
    amount?: true
    createdAt?: true
    updatedAt?: true
    caseId?: true
    userId?: true
  }

  export type TimeEntryCountAggregateInputType = {
    id?: true
    description?: true
    hours?: true
    date?: true
    billable?: true
    hourlyRate?: true
    amount?: true
    createdAt?: true
    updatedAt?: true
    caseId?: true
    userId?: true
    _all?: true
  }

  export type TimeEntryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TimeEntry to aggregate.
     */
    where?: TimeEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TimeEntries to fetch.
     */
    orderBy?: TimeEntryOrderByWithRelationInput | TimeEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TimeEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TimeEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TimeEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TimeEntries
    **/
    _count?: true | TimeEntryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TimeEntryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TimeEntrySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TimeEntryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TimeEntryMaxAggregateInputType
  }

  export type GetTimeEntryAggregateType<T extends TimeEntryAggregateArgs> = {
        [P in keyof T & keyof AggregateTimeEntry]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTimeEntry[P]>
      : GetScalarType<T[P], AggregateTimeEntry[P]>
  }




  export type TimeEntryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TimeEntryWhereInput
    orderBy?: TimeEntryOrderByWithAggregationInput | TimeEntryOrderByWithAggregationInput[]
    by: TimeEntryScalarFieldEnum[] | TimeEntryScalarFieldEnum
    having?: TimeEntryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TimeEntryCountAggregateInputType | true
    _avg?: TimeEntryAvgAggregateInputType
    _sum?: TimeEntrySumAggregateInputType
    _min?: TimeEntryMinAggregateInputType
    _max?: TimeEntryMaxAggregateInputType
  }

  export type TimeEntryGroupByOutputType = {
    id: string
    description: string | null
    hours: number
    date: Date
    billable: boolean
    hourlyRate: number | null
    amount: number | null
    createdAt: Date
    updatedAt: Date
    caseId: string
    userId: string
    _count: TimeEntryCountAggregateOutputType | null
    _avg: TimeEntryAvgAggregateOutputType | null
    _sum: TimeEntrySumAggregateOutputType | null
    _min: TimeEntryMinAggregateOutputType | null
    _max: TimeEntryMaxAggregateOutputType | null
  }

  type GetTimeEntryGroupByPayload<T extends TimeEntryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TimeEntryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TimeEntryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TimeEntryGroupByOutputType[P]>
            : GetScalarType<T[P], TimeEntryGroupByOutputType[P]>
        }
      >
    >


  export type TimeEntrySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    hours?: boolean
    date?: boolean
    billable?: boolean
    hourlyRate?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    caseId?: boolean
    userId?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["timeEntry"]>

  export type TimeEntrySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    hours?: boolean
    date?: boolean
    billable?: boolean
    hourlyRate?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    caseId?: boolean
    userId?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["timeEntry"]>

  export type TimeEntrySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    hours?: boolean
    date?: boolean
    billable?: boolean
    hourlyRate?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    caseId?: boolean
    userId?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["timeEntry"]>

  export type TimeEntrySelectScalar = {
    id?: boolean
    description?: boolean
    hours?: boolean
    date?: boolean
    billable?: boolean
    hourlyRate?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    caseId?: boolean
    userId?: boolean
  }

  export type TimeEntryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "description" | "hours" | "date" | "billable" | "hourlyRate" | "amount" | "createdAt" | "updatedAt" | "caseId" | "userId", ExtArgs["result"]["timeEntry"]>
  export type TimeEntryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TimeEntryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TimeEntryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TimeEntryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TimeEntry"
    objects: {
      case: Prisma.$CasePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      description: string | null
      hours: number
      date: Date
      billable: boolean
      hourlyRate: number | null
      amount: number | null
      createdAt: Date
      updatedAt: Date
      caseId: string
      userId: string
    }, ExtArgs["result"]["timeEntry"]>
    composites: {}
  }

  type TimeEntryGetPayload<S extends boolean | null | undefined | TimeEntryDefaultArgs> = $Result.GetResult<Prisma.$TimeEntryPayload, S>

  type TimeEntryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TimeEntryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TimeEntryCountAggregateInputType | true
    }

  export interface TimeEntryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TimeEntry'], meta: { name: 'TimeEntry' } }
    /**
     * Find zero or one TimeEntry that matches the filter.
     * @param {TimeEntryFindUniqueArgs} args - Arguments to find a TimeEntry
     * @example
     * // Get one TimeEntry
     * const timeEntry = await prisma.timeEntry.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TimeEntryFindUniqueArgs>(args: SelectSubset<T, TimeEntryFindUniqueArgs<ExtArgs>>): Prisma__TimeEntryClient<$Result.GetResult<Prisma.$TimeEntryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TimeEntry that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TimeEntryFindUniqueOrThrowArgs} args - Arguments to find a TimeEntry
     * @example
     * // Get one TimeEntry
     * const timeEntry = await prisma.timeEntry.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TimeEntryFindUniqueOrThrowArgs>(args: SelectSubset<T, TimeEntryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TimeEntryClient<$Result.GetResult<Prisma.$TimeEntryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TimeEntry that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimeEntryFindFirstArgs} args - Arguments to find a TimeEntry
     * @example
     * // Get one TimeEntry
     * const timeEntry = await prisma.timeEntry.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TimeEntryFindFirstArgs>(args?: SelectSubset<T, TimeEntryFindFirstArgs<ExtArgs>>): Prisma__TimeEntryClient<$Result.GetResult<Prisma.$TimeEntryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TimeEntry that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimeEntryFindFirstOrThrowArgs} args - Arguments to find a TimeEntry
     * @example
     * // Get one TimeEntry
     * const timeEntry = await prisma.timeEntry.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TimeEntryFindFirstOrThrowArgs>(args?: SelectSubset<T, TimeEntryFindFirstOrThrowArgs<ExtArgs>>): Prisma__TimeEntryClient<$Result.GetResult<Prisma.$TimeEntryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TimeEntries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimeEntryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TimeEntries
     * const timeEntries = await prisma.timeEntry.findMany()
     * 
     * // Get first 10 TimeEntries
     * const timeEntries = await prisma.timeEntry.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const timeEntryWithIdOnly = await prisma.timeEntry.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TimeEntryFindManyArgs>(args?: SelectSubset<T, TimeEntryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TimeEntryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TimeEntry.
     * @param {TimeEntryCreateArgs} args - Arguments to create a TimeEntry.
     * @example
     * // Create one TimeEntry
     * const TimeEntry = await prisma.timeEntry.create({
     *   data: {
     *     // ... data to create a TimeEntry
     *   }
     * })
     * 
     */
    create<T extends TimeEntryCreateArgs>(args: SelectSubset<T, TimeEntryCreateArgs<ExtArgs>>): Prisma__TimeEntryClient<$Result.GetResult<Prisma.$TimeEntryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TimeEntries.
     * @param {TimeEntryCreateManyArgs} args - Arguments to create many TimeEntries.
     * @example
     * // Create many TimeEntries
     * const timeEntry = await prisma.timeEntry.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TimeEntryCreateManyArgs>(args?: SelectSubset<T, TimeEntryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TimeEntries and returns the data saved in the database.
     * @param {TimeEntryCreateManyAndReturnArgs} args - Arguments to create many TimeEntries.
     * @example
     * // Create many TimeEntries
     * const timeEntry = await prisma.timeEntry.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TimeEntries and only return the `id`
     * const timeEntryWithIdOnly = await prisma.timeEntry.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TimeEntryCreateManyAndReturnArgs>(args?: SelectSubset<T, TimeEntryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TimeEntryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TimeEntry.
     * @param {TimeEntryDeleteArgs} args - Arguments to delete one TimeEntry.
     * @example
     * // Delete one TimeEntry
     * const TimeEntry = await prisma.timeEntry.delete({
     *   where: {
     *     // ... filter to delete one TimeEntry
     *   }
     * })
     * 
     */
    delete<T extends TimeEntryDeleteArgs>(args: SelectSubset<T, TimeEntryDeleteArgs<ExtArgs>>): Prisma__TimeEntryClient<$Result.GetResult<Prisma.$TimeEntryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TimeEntry.
     * @param {TimeEntryUpdateArgs} args - Arguments to update one TimeEntry.
     * @example
     * // Update one TimeEntry
     * const timeEntry = await prisma.timeEntry.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TimeEntryUpdateArgs>(args: SelectSubset<T, TimeEntryUpdateArgs<ExtArgs>>): Prisma__TimeEntryClient<$Result.GetResult<Prisma.$TimeEntryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TimeEntries.
     * @param {TimeEntryDeleteManyArgs} args - Arguments to filter TimeEntries to delete.
     * @example
     * // Delete a few TimeEntries
     * const { count } = await prisma.timeEntry.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TimeEntryDeleteManyArgs>(args?: SelectSubset<T, TimeEntryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TimeEntries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimeEntryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TimeEntries
     * const timeEntry = await prisma.timeEntry.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TimeEntryUpdateManyArgs>(args: SelectSubset<T, TimeEntryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TimeEntries and returns the data updated in the database.
     * @param {TimeEntryUpdateManyAndReturnArgs} args - Arguments to update many TimeEntries.
     * @example
     * // Update many TimeEntries
     * const timeEntry = await prisma.timeEntry.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TimeEntries and only return the `id`
     * const timeEntryWithIdOnly = await prisma.timeEntry.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TimeEntryUpdateManyAndReturnArgs>(args: SelectSubset<T, TimeEntryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TimeEntryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TimeEntry.
     * @param {TimeEntryUpsertArgs} args - Arguments to update or create a TimeEntry.
     * @example
     * // Update or create a TimeEntry
     * const timeEntry = await prisma.timeEntry.upsert({
     *   create: {
     *     // ... data to create a TimeEntry
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TimeEntry we want to update
     *   }
     * })
     */
    upsert<T extends TimeEntryUpsertArgs>(args: SelectSubset<T, TimeEntryUpsertArgs<ExtArgs>>): Prisma__TimeEntryClient<$Result.GetResult<Prisma.$TimeEntryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TimeEntries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimeEntryCountArgs} args - Arguments to filter TimeEntries to count.
     * @example
     * // Count the number of TimeEntries
     * const count = await prisma.timeEntry.count({
     *   where: {
     *     // ... the filter for the TimeEntries we want to count
     *   }
     * })
    **/
    count<T extends TimeEntryCountArgs>(
      args?: Subset<T, TimeEntryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TimeEntryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TimeEntry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimeEntryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TimeEntryAggregateArgs>(args: Subset<T, TimeEntryAggregateArgs>): Prisma.PrismaPromise<GetTimeEntryAggregateType<T>>

    /**
     * Group by TimeEntry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimeEntryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TimeEntryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TimeEntryGroupByArgs['orderBy'] }
        : { orderBy?: TimeEntryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TimeEntryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTimeEntryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TimeEntry model
   */
  readonly fields: TimeEntryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TimeEntry.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TimeEntryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    case<T extends CaseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CaseDefaultArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TimeEntry model
   */
  interface TimeEntryFieldRefs {
    readonly id: FieldRef<"TimeEntry", 'String'>
    readonly description: FieldRef<"TimeEntry", 'String'>
    readonly hours: FieldRef<"TimeEntry", 'Float'>
    readonly date: FieldRef<"TimeEntry", 'DateTime'>
    readonly billable: FieldRef<"TimeEntry", 'Boolean'>
    readonly hourlyRate: FieldRef<"TimeEntry", 'Float'>
    readonly amount: FieldRef<"TimeEntry", 'Float'>
    readonly createdAt: FieldRef<"TimeEntry", 'DateTime'>
    readonly updatedAt: FieldRef<"TimeEntry", 'DateTime'>
    readonly caseId: FieldRef<"TimeEntry", 'String'>
    readonly userId: FieldRef<"TimeEntry", 'String'>
  }
    

  // Custom InputTypes
  /**
   * TimeEntry findUnique
   */
  export type TimeEntryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeEntry
     */
    select?: TimeEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimeEntry
     */
    omit?: TimeEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeEntryInclude<ExtArgs> | null
    /**
     * Filter, which TimeEntry to fetch.
     */
    where: TimeEntryWhereUniqueInput
  }

  /**
   * TimeEntry findUniqueOrThrow
   */
  export type TimeEntryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeEntry
     */
    select?: TimeEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimeEntry
     */
    omit?: TimeEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeEntryInclude<ExtArgs> | null
    /**
     * Filter, which TimeEntry to fetch.
     */
    where: TimeEntryWhereUniqueInput
  }

  /**
   * TimeEntry findFirst
   */
  export type TimeEntryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeEntry
     */
    select?: TimeEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimeEntry
     */
    omit?: TimeEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeEntryInclude<ExtArgs> | null
    /**
     * Filter, which TimeEntry to fetch.
     */
    where?: TimeEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TimeEntries to fetch.
     */
    orderBy?: TimeEntryOrderByWithRelationInput | TimeEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TimeEntries.
     */
    cursor?: TimeEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TimeEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TimeEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TimeEntries.
     */
    distinct?: TimeEntryScalarFieldEnum | TimeEntryScalarFieldEnum[]
  }

  /**
   * TimeEntry findFirstOrThrow
   */
  export type TimeEntryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeEntry
     */
    select?: TimeEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimeEntry
     */
    omit?: TimeEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeEntryInclude<ExtArgs> | null
    /**
     * Filter, which TimeEntry to fetch.
     */
    where?: TimeEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TimeEntries to fetch.
     */
    orderBy?: TimeEntryOrderByWithRelationInput | TimeEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TimeEntries.
     */
    cursor?: TimeEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TimeEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TimeEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TimeEntries.
     */
    distinct?: TimeEntryScalarFieldEnum | TimeEntryScalarFieldEnum[]
  }

  /**
   * TimeEntry findMany
   */
  export type TimeEntryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeEntry
     */
    select?: TimeEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimeEntry
     */
    omit?: TimeEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeEntryInclude<ExtArgs> | null
    /**
     * Filter, which TimeEntries to fetch.
     */
    where?: TimeEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TimeEntries to fetch.
     */
    orderBy?: TimeEntryOrderByWithRelationInput | TimeEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TimeEntries.
     */
    cursor?: TimeEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TimeEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TimeEntries.
     */
    skip?: number
    distinct?: TimeEntryScalarFieldEnum | TimeEntryScalarFieldEnum[]
  }

  /**
   * TimeEntry create
   */
  export type TimeEntryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeEntry
     */
    select?: TimeEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimeEntry
     */
    omit?: TimeEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeEntryInclude<ExtArgs> | null
    /**
     * The data needed to create a TimeEntry.
     */
    data: XOR<TimeEntryCreateInput, TimeEntryUncheckedCreateInput>
  }

  /**
   * TimeEntry createMany
   */
  export type TimeEntryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TimeEntries.
     */
    data: TimeEntryCreateManyInput | TimeEntryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TimeEntry createManyAndReturn
   */
  export type TimeEntryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeEntry
     */
    select?: TimeEntrySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TimeEntry
     */
    omit?: TimeEntryOmit<ExtArgs> | null
    /**
     * The data used to create many TimeEntries.
     */
    data: TimeEntryCreateManyInput | TimeEntryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeEntryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TimeEntry update
   */
  export type TimeEntryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeEntry
     */
    select?: TimeEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimeEntry
     */
    omit?: TimeEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeEntryInclude<ExtArgs> | null
    /**
     * The data needed to update a TimeEntry.
     */
    data: XOR<TimeEntryUpdateInput, TimeEntryUncheckedUpdateInput>
    /**
     * Choose, which TimeEntry to update.
     */
    where: TimeEntryWhereUniqueInput
  }

  /**
   * TimeEntry updateMany
   */
  export type TimeEntryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TimeEntries.
     */
    data: XOR<TimeEntryUpdateManyMutationInput, TimeEntryUncheckedUpdateManyInput>
    /**
     * Filter which TimeEntries to update
     */
    where?: TimeEntryWhereInput
    /**
     * Limit how many TimeEntries to update.
     */
    limit?: number
  }

  /**
   * TimeEntry updateManyAndReturn
   */
  export type TimeEntryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeEntry
     */
    select?: TimeEntrySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TimeEntry
     */
    omit?: TimeEntryOmit<ExtArgs> | null
    /**
     * The data used to update TimeEntries.
     */
    data: XOR<TimeEntryUpdateManyMutationInput, TimeEntryUncheckedUpdateManyInput>
    /**
     * Filter which TimeEntries to update
     */
    where?: TimeEntryWhereInput
    /**
     * Limit how many TimeEntries to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeEntryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TimeEntry upsert
   */
  export type TimeEntryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeEntry
     */
    select?: TimeEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimeEntry
     */
    omit?: TimeEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeEntryInclude<ExtArgs> | null
    /**
     * The filter to search for the TimeEntry to update in case it exists.
     */
    where: TimeEntryWhereUniqueInput
    /**
     * In case the TimeEntry found by the `where` argument doesn't exist, create a new TimeEntry with this data.
     */
    create: XOR<TimeEntryCreateInput, TimeEntryUncheckedCreateInput>
    /**
     * In case the TimeEntry was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TimeEntryUpdateInput, TimeEntryUncheckedUpdateInput>
  }

  /**
   * TimeEntry delete
   */
  export type TimeEntryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeEntry
     */
    select?: TimeEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimeEntry
     */
    omit?: TimeEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeEntryInclude<ExtArgs> | null
    /**
     * Filter which TimeEntry to delete.
     */
    where: TimeEntryWhereUniqueInput
  }

  /**
   * TimeEntry deleteMany
   */
  export type TimeEntryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TimeEntries to delete
     */
    where?: TimeEntryWhereInput
    /**
     * Limit how many TimeEntries to delete.
     */
    limit?: number
  }

  /**
   * TimeEntry without action
   */
  export type TimeEntryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeEntry
     */
    select?: TimeEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimeEntry
     */
    omit?: TimeEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeEntryInclude<ExtArgs> | null
  }


  /**
   * Model LegalReference
   */

  export type AggregateLegalReference = {
    _count: LegalReferenceCountAggregateOutputType | null
    _min: LegalReferenceMinAggregateOutputType | null
    _max: LegalReferenceMaxAggregateOutputType | null
  }

  export type LegalReferenceMinAggregateOutputType = {
    id: string | null
    type: string | null
    title: string | null
    citation: string | null
    url: string | null
    summary: string | null
    relevance: string | null
    createdAt: Date | null
    caseId: string | null
    addedById: string | null
  }

  export type LegalReferenceMaxAggregateOutputType = {
    id: string | null
    type: string | null
    title: string | null
    citation: string | null
    url: string | null
    summary: string | null
    relevance: string | null
    createdAt: Date | null
    caseId: string | null
    addedById: string | null
  }

  export type LegalReferenceCountAggregateOutputType = {
    id: number
    type: number
    title: number
    citation: number
    url: number
    summary: number
    relevance: number
    createdAt: number
    caseId: number
    addedById: number
    _all: number
  }


  export type LegalReferenceMinAggregateInputType = {
    id?: true
    type?: true
    title?: true
    citation?: true
    url?: true
    summary?: true
    relevance?: true
    createdAt?: true
    caseId?: true
    addedById?: true
  }

  export type LegalReferenceMaxAggregateInputType = {
    id?: true
    type?: true
    title?: true
    citation?: true
    url?: true
    summary?: true
    relevance?: true
    createdAt?: true
    caseId?: true
    addedById?: true
  }

  export type LegalReferenceCountAggregateInputType = {
    id?: true
    type?: true
    title?: true
    citation?: true
    url?: true
    summary?: true
    relevance?: true
    createdAt?: true
    caseId?: true
    addedById?: true
    _all?: true
  }

  export type LegalReferenceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LegalReference to aggregate.
     */
    where?: LegalReferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LegalReferences to fetch.
     */
    orderBy?: LegalReferenceOrderByWithRelationInput | LegalReferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LegalReferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LegalReferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LegalReferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LegalReferences
    **/
    _count?: true | LegalReferenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LegalReferenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LegalReferenceMaxAggregateInputType
  }

  export type GetLegalReferenceAggregateType<T extends LegalReferenceAggregateArgs> = {
        [P in keyof T & keyof AggregateLegalReference]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLegalReference[P]>
      : GetScalarType<T[P], AggregateLegalReference[P]>
  }




  export type LegalReferenceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LegalReferenceWhereInput
    orderBy?: LegalReferenceOrderByWithAggregationInput | LegalReferenceOrderByWithAggregationInput[]
    by: LegalReferenceScalarFieldEnum[] | LegalReferenceScalarFieldEnum
    having?: LegalReferenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LegalReferenceCountAggregateInputType | true
    _min?: LegalReferenceMinAggregateInputType
    _max?: LegalReferenceMaxAggregateInputType
  }

  export type LegalReferenceGroupByOutputType = {
    id: string
    type: string
    title: string
    citation: string
    url: string | null
    summary: string | null
    relevance: string | null
    createdAt: Date
    caseId: string
    addedById: string | null
    _count: LegalReferenceCountAggregateOutputType | null
    _min: LegalReferenceMinAggregateOutputType | null
    _max: LegalReferenceMaxAggregateOutputType | null
  }

  type GetLegalReferenceGroupByPayload<T extends LegalReferenceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LegalReferenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LegalReferenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LegalReferenceGroupByOutputType[P]>
            : GetScalarType<T[P], LegalReferenceGroupByOutputType[P]>
        }
      >
    >


  export type LegalReferenceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    title?: boolean
    citation?: boolean
    url?: boolean
    summary?: boolean
    relevance?: boolean
    createdAt?: boolean
    caseId?: boolean
    addedById?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
    addedBy?: boolean | LegalReference$addedByArgs<ExtArgs>
  }, ExtArgs["result"]["legalReference"]>

  export type LegalReferenceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    title?: boolean
    citation?: boolean
    url?: boolean
    summary?: boolean
    relevance?: boolean
    createdAt?: boolean
    caseId?: boolean
    addedById?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
    addedBy?: boolean | LegalReference$addedByArgs<ExtArgs>
  }, ExtArgs["result"]["legalReference"]>

  export type LegalReferenceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    title?: boolean
    citation?: boolean
    url?: boolean
    summary?: boolean
    relevance?: boolean
    createdAt?: boolean
    caseId?: boolean
    addedById?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
    addedBy?: boolean | LegalReference$addedByArgs<ExtArgs>
  }, ExtArgs["result"]["legalReference"]>

  export type LegalReferenceSelectScalar = {
    id?: boolean
    type?: boolean
    title?: boolean
    citation?: boolean
    url?: boolean
    summary?: boolean
    relevance?: boolean
    createdAt?: boolean
    caseId?: boolean
    addedById?: boolean
  }

  export type LegalReferenceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "title" | "citation" | "url" | "summary" | "relevance" | "createdAt" | "caseId" | "addedById", ExtArgs["result"]["legalReference"]>
  export type LegalReferenceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
    addedBy?: boolean | LegalReference$addedByArgs<ExtArgs>
  }
  export type LegalReferenceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
    addedBy?: boolean | LegalReference$addedByArgs<ExtArgs>
  }
  export type LegalReferenceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
    addedBy?: boolean | LegalReference$addedByArgs<ExtArgs>
  }

  export type $LegalReferencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LegalReference"
    objects: {
      case: Prisma.$CasePayload<ExtArgs>
      addedBy: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: string
      title: string
      citation: string
      url: string | null
      summary: string | null
      relevance: string | null
      createdAt: Date
      caseId: string
      addedById: string | null
    }, ExtArgs["result"]["legalReference"]>
    composites: {}
  }

  type LegalReferenceGetPayload<S extends boolean | null | undefined | LegalReferenceDefaultArgs> = $Result.GetResult<Prisma.$LegalReferencePayload, S>

  type LegalReferenceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LegalReferenceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LegalReferenceCountAggregateInputType | true
    }

  export interface LegalReferenceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LegalReference'], meta: { name: 'LegalReference' } }
    /**
     * Find zero or one LegalReference that matches the filter.
     * @param {LegalReferenceFindUniqueArgs} args - Arguments to find a LegalReference
     * @example
     * // Get one LegalReference
     * const legalReference = await prisma.legalReference.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LegalReferenceFindUniqueArgs>(args: SelectSubset<T, LegalReferenceFindUniqueArgs<ExtArgs>>): Prisma__LegalReferenceClient<$Result.GetResult<Prisma.$LegalReferencePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LegalReference that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LegalReferenceFindUniqueOrThrowArgs} args - Arguments to find a LegalReference
     * @example
     * // Get one LegalReference
     * const legalReference = await prisma.legalReference.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LegalReferenceFindUniqueOrThrowArgs>(args: SelectSubset<T, LegalReferenceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LegalReferenceClient<$Result.GetResult<Prisma.$LegalReferencePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LegalReference that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LegalReferenceFindFirstArgs} args - Arguments to find a LegalReference
     * @example
     * // Get one LegalReference
     * const legalReference = await prisma.legalReference.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LegalReferenceFindFirstArgs>(args?: SelectSubset<T, LegalReferenceFindFirstArgs<ExtArgs>>): Prisma__LegalReferenceClient<$Result.GetResult<Prisma.$LegalReferencePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LegalReference that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LegalReferenceFindFirstOrThrowArgs} args - Arguments to find a LegalReference
     * @example
     * // Get one LegalReference
     * const legalReference = await prisma.legalReference.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LegalReferenceFindFirstOrThrowArgs>(args?: SelectSubset<T, LegalReferenceFindFirstOrThrowArgs<ExtArgs>>): Prisma__LegalReferenceClient<$Result.GetResult<Prisma.$LegalReferencePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LegalReferences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LegalReferenceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LegalReferences
     * const legalReferences = await prisma.legalReference.findMany()
     * 
     * // Get first 10 LegalReferences
     * const legalReferences = await prisma.legalReference.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const legalReferenceWithIdOnly = await prisma.legalReference.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LegalReferenceFindManyArgs>(args?: SelectSubset<T, LegalReferenceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LegalReferencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LegalReference.
     * @param {LegalReferenceCreateArgs} args - Arguments to create a LegalReference.
     * @example
     * // Create one LegalReference
     * const LegalReference = await prisma.legalReference.create({
     *   data: {
     *     // ... data to create a LegalReference
     *   }
     * })
     * 
     */
    create<T extends LegalReferenceCreateArgs>(args: SelectSubset<T, LegalReferenceCreateArgs<ExtArgs>>): Prisma__LegalReferenceClient<$Result.GetResult<Prisma.$LegalReferencePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LegalReferences.
     * @param {LegalReferenceCreateManyArgs} args - Arguments to create many LegalReferences.
     * @example
     * // Create many LegalReferences
     * const legalReference = await prisma.legalReference.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LegalReferenceCreateManyArgs>(args?: SelectSubset<T, LegalReferenceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LegalReferences and returns the data saved in the database.
     * @param {LegalReferenceCreateManyAndReturnArgs} args - Arguments to create many LegalReferences.
     * @example
     * // Create many LegalReferences
     * const legalReference = await prisma.legalReference.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LegalReferences and only return the `id`
     * const legalReferenceWithIdOnly = await prisma.legalReference.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LegalReferenceCreateManyAndReturnArgs>(args?: SelectSubset<T, LegalReferenceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LegalReferencePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LegalReference.
     * @param {LegalReferenceDeleteArgs} args - Arguments to delete one LegalReference.
     * @example
     * // Delete one LegalReference
     * const LegalReference = await prisma.legalReference.delete({
     *   where: {
     *     // ... filter to delete one LegalReference
     *   }
     * })
     * 
     */
    delete<T extends LegalReferenceDeleteArgs>(args: SelectSubset<T, LegalReferenceDeleteArgs<ExtArgs>>): Prisma__LegalReferenceClient<$Result.GetResult<Prisma.$LegalReferencePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LegalReference.
     * @param {LegalReferenceUpdateArgs} args - Arguments to update one LegalReference.
     * @example
     * // Update one LegalReference
     * const legalReference = await prisma.legalReference.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LegalReferenceUpdateArgs>(args: SelectSubset<T, LegalReferenceUpdateArgs<ExtArgs>>): Prisma__LegalReferenceClient<$Result.GetResult<Prisma.$LegalReferencePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LegalReferences.
     * @param {LegalReferenceDeleteManyArgs} args - Arguments to filter LegalReferences to delete.
     * @example
     * // Delete a few LegalReferences
     * const { count } = await prisma.legalReference.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LegalReferenceDeleteManyArgs>(args?: SelectSubset<T, LegalReferenceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LegalReferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LegalReferenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LegalReferences
     * const legalReference = await prisma.legalReference.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LegalReferenceUpdateManyArgs>(args: SelectSubset<T, LegalReferenceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LegalReferences and returns the data updated in the database.
     * @param {LegalReferenceUpdateManyAndReturnArgs} args - Arguments to update many LegalReferences.
     * @example
     * // Update many LegalReferences
     * const legalReference = await prisma.legalReference.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LegalReferences and only return the `id`
     * const legalReferenceWithIdOnly = await prisma.legalReference.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LegalReferenceUpdateManyAndReturnArgs>(args: SelectSubset<T, LegalReferenceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LegalReferencePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LegalReference.
     * @param {LegalReferenceUpsertArgs} args - Arguments to update or create a LegalReference.
     * @example
     * // Update or create a LegalReference
     * const legalReference = await prisma.legalReference.upsert({
     *   create: {
     *     // ... data to create a LegalReference
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LegalReference we want to update
     *   }
     * })
     */
    upsert<T extends LegalReferenceUpsertArgs>(args: SelectSubset<T, LegalReferenceUpsertArgs<ExtArgs>>): Prisma__LegalReferenceClient<$Result.GetResult<Prisma.$LegalReferencePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LegalReferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LegalReferenceCountArgs} args - Arguments to filter LegalReferences to count.
     * @example
     * // Count the number of LegalReferences
     * const count = await prisma.legalReference.count({
     *   where: {
     *     // ... the filter for the LegalReferences we want to count
     *   }
     * })
    **/
    count<T extends LegalReferenceCountArgs>(
      args?: Subset<T, LegalReferenceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LegalReferenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LegalReference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LegalReferenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LegalReferenceAggregateArgs>(args: Subset<T, LegalReferenceAggregateArgs>): Prisma.PrismaPromise<GetLegalReferenceAggregateType<T>>

    /**
     * Group by LegalReference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LegalReferenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LegalReferenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LegalReferenceGroupByArgs['orderBy'] }
        : { orderBy?: LegalReferenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LegalReferenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLegalReferenceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LegalReference model
   */
  readonly fields: LegalReferenceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LegalReference.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LegalReferenceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    case<T extends CaseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CaseDefaultArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    addedBy<T extends LegalReference$addedByArgs<ExtArgs> = {}>(args?: Subset<T, LegalReference$addedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LegalReference model
   */
  interface LegalReferenceFieldRefs {
    readonly id: FieldRef<"LegalReference", 'String'>
    readonly type: FieldRef<"LegalReference", 'String'>
    readonly title: FieldRef<"LegalReference", 'String'>
    readonly citation: FieldRef<"LegalReference", 'String'>
    readonly url: FieldRef<"LegalReference", 'String'>
    readonly summary: FieldRef<"LegalReference", 'String'>
    readonly relevance: FieldRef<"LegalReference", 'String'>
    readonly createdAt: FieldRef<"LegalReference", 'DateTime'>
    readonly caseId: FieldRef<"LegalReference", 'String'>
    readonly addedById: FieldRef<"LegalReference", 'String'>
  }
    

  // Custom InputTypes
  /**
   * LegalReference findUnique
   */
  export type LegalReferenceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LegalReference
     */
    select?: LegalReferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LegalReference
     */
    omit?: LegalReferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LegalReferenceInclude<ExtArgs> | null
    /**
     * Filter, which LegalReference to fetch.
     */
    where: LegalReferenceWhereUniqueInput
  }

  /**
   * LegalReference findUniqueOrThrow
   */
  export type LegalReferenceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LegalReference
     */
    select?: LegalReferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LegalReference
     */
    omit?: LegalReferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LegalReferenceInclude<ExtArgs> | null
    /**
     * Filter, which LegalReference to fetch.
     */
    where: LegalReferenceWhereUniqueInput
  }

  /**
   * LegalReference findFirst
   */
  export type LegalReferenceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LegalReference
     */
    select?: LegalReferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LegalReference
     */
    omit?: LegalReferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LegalReferenceInclude<ExtArgs> | null
    /**
     * Filter, which LegalReference to fetch.
     */
    where?: LegalReferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LegalReferences to fetch.
     */
    orderBy?: LegalReferenceOrderByWithRelationInput | LegalReferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LegalReferences.
     */
    cursor?: LegalReferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LegalReferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LegalReferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LegalReferences.
     */
    distinct?: LegalReferenceScalarFieldEnum | LegalReferenceScalarFieldEnum[]
  }

  /**
   * LegalReference findFirstOrThrow
   */
  export type LegalReferenceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LegalReference
     */
    select?: LegalReferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LegalReference
     */
    omit?: LegalReferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LegalReferenceInclude<ExtArgs> | null
    /**
     * Filter, which LegalReference to fetch.
     */
    where?: LegalReferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LegalReferences to fetch.
     */
    orderBy?: LegalReferenceOrderByWithRelationInput | LegalReferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LegalReferences.
     */
    cursor?: LegalReferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LegalReferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LegalReferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LegalReferences.
     */
    distinct?: LegalReferenceScalarFieldEnum | LegalReferenceScalarFieldEnum[]
  }

  /**
   * LegalReference findMany
   */
  export type LegalReferenceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LegalReference
     */
    select?: LegalReferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LegalReference
     */
    omit?: LegalReferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LegalReferenceInclude<ExtArgs> | null
    /**
     * Filter, which LegalReferences to fetch.
     */
    where?: LegalReferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LegalReferences to fetch.
     */
    orderBy?: LegalReferenceOrderByWithRelationInput | LegalReferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LegalReferences.
     */
    cursor?: LegalReferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LegalReferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LegalReferences.
     */
    skip?: number
    distinct?: LegalReferenceScalarFieldEnum | LegalReferenceScalarFieldEnum[]
  }

  /**
   * LegalReference create
   */
  export type LegalReferenceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LegalReference
     */
    select?: LegalReferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LegalReference
     */
    omit?: LegalReferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LegalReferenceInclude<ExtArgs> | null
    /**
     * The data needed to create a LegalReference.
     */
    data: XOR<LegalReferenceCreateInput, LegalReferenceUncheckedCreateInput>
  }

  /**
   * LegalReference createMany
   */
  export type LegalReferenceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LegalReferences.
     */
    data: LegalReferenceCreateManyInput | LegalReferenceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LegalReference createManyAndReturn
   */
  export type LegalReferenceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LegalReference
     */
    select?: LegalReferenceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LegalReference
     */
    omit?: LegalReferenceOmit<ExtArgs> | null
    /**
     * The data used to create many LegalReferences.
     */
    data: LegalReferenceCreateManyInput | LegalReferenceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LegalReferenceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LegalReference update
   */
  export type LegalReferenceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LegalReference
     */
    select?: LegalReferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LegalReference
     */
    omit?: LegalReferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LegalReferenceInclude<ExtArgs> | null
    /**
     * The data needed to update a LegalReference.
     */
    data: XOR<LegalReferenceUpdateInput, LegalReferenceUncheckedUpdateInput>
    /**
     * Choose, which LegalReference to update.
     */
    where: LegalReferenceWhereUniqueInput
  }

  /**
   * LegalReference updateMany
   */
  export type LegalReferenceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LegalReferences.
     */
    data: XOR<LegalReferenceUpdateManyMutationInput, LegalReferenceUncheckedUpdateManyInput>
    /**
     * Filter which LegalReferences to update
     */
    where?: LegalReferenceWhereInput
    /**
     * Limit how many LegalReferences to update.
     */
    limit?: number
  }

  /**
   * LegalReference updateManyAndReturn
   */
  export type LegalReferenceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LegalReference
     */
    select?: LegalReferenceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LegalReference
     */
    omit?: LegalReferenceOmit<ExtArgs> | null
    /**
     * The data used to update LegalReferences.
     */
    data: XOR<LegalReferenceUpdateManyMutationInput, LegalReferenceUncheckedUpdateManyInput>
    /**
     * Filter which LegalReferences to update
     */
    where?: LegalReferenceWhereInput
    /**
     * Limit how many LegalReferences to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LegalReferenceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LegalReference upsert
   */
  export type LegalReferenceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LegalReference
     */
    select?: LegalReferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LegalReference
     */
    omit?: LegalReferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LegalReferenceInclude<ExtArgs> | null
    /**
     * The filter to search for the LegalReference to update in case it exists.
     */
    where: LegalReferenceWhereUniqueInput
    /**
     * In case the LegalReference found by the `where` argument doesn't exist, create a new LegalReference with this data.
     */
    create: XOR<LegalReferenceCreateInput, LegalReferenceUncheckedCreateInput>
    /**
     * In case the LegalReference was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LegalReferenceUpdateInput, LegalReferenceUncheckedUpdateInput>
  }

  /**
   * LegalReference delete
   */
  export type LegalReferenceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LegalReference
     */
    select?: LegalReferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LegalReference
     */
    omit?: LegalReferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LegalReferenceInclude<ExtArgs> | null
    /**
     * Filter which LegalReference to delete.
     */
    where: LegalReferenceWhereUniqueInput
  }

  /**
   * LegalReference deleteMany
   */
  export type LegalReferenceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LegalReferences to delete
     */
    where?: LegalReferenceWhereInput
    /**
     * Limit how many LegalReferences to delete.
     */
    limit?: number
  }

  /**
   * LegalReference.addedBy
   */
  export type LegalReference$addedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * LegalReference without action
   */
  export type LegalReferenceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LegalReference
     */
    select?: LegalReferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LegalReference
     */
    omit?: LegalReferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LegalReferenceInclude<ExtArgs> | null
  }


  /**
   * Model WorkflowStep
   */

  export type AggregateWorkflowStep = {
    _count: WorkflowStepCountAggregateOutputType | null
    _avg: WorkflowStepAvgAggregateOutputType | null
    _sum: WorkflowStepSumAggregateOutputType | null
    _min: WorkflowStepMinAggregateOutputType | null
    _max: WorkflowStepMaxAggregateOutputType | null
  }

  export type WorkflowStepAvgAggregateOutputType = {
    order: number | null
    estimatedHours: number | null
    actualHours: number | null
  }

  export type WorkflowStepSumAggregateOutputType = {
    order: number | null
    estimatedHours: number | null
    actualHours: number | null
  }

  export type WorkflowStepMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    order: number | null
    completed: boolean | null
    completedAt: Date | null
    dueDate: Date | null
    assignedToId: string | null
    estimatedHours: number | null
    actualHours: number | null
    createdAt: Date | null
    updatedAt: Date | null
    caseId: string | null
  }

  export type WorkflowStepMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    order: number | null
    completed: boolean | null
    completedAt: Date | null
    dueDate: Date | null
    assignedToId: string | null
    estimatedHours: number | null
    actualHours: number | null
    createdAt: Date | null
    updatedAt: Date | null
    caseId: string | null
  }

  export type WorkflowStepCountAggregateOutputType = {
    id: number
    title: number
    description: number
    order: number
    completed: number
    completedAt: number
    dueDate: number
    assignedToId: number
    dependencies: number
    estimatedHours: number
    actualHours: number
    createdAt: number
    updatedAt: number
    caseId: number
    _all: number
  }


  export type WorkflowStepAvgAggregateInputType = {
    order?: true
    estimatedHours?: true
    actualHours?: true
  }

  export type WorkflowStepSumAggregateInputType = {
    order?: true
    estimatedHours?: true
    actualHours?: true
  }

  export type WorkflowStepMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    order?: true
    completed?: true
    completedAt?: true
    dueDate?: true
    assignedToId?: true
    estimatedHours?: true
    actualHours?: true
    createdAt?: true
    updatedAt?: true
    caseId?: true
  }

  export type WorkflowStepMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    order?: true
    completed?: true
    completedAt?: true
    dueDate?: true
    assignedToId?: true
    estimatedHours?: true
    actualHours?: true
    createdAt?: true
    updatedAt?: true
    caseId?: true
  }

  export type WorkflowStepCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    order?: true
    completed?: true
    completedAt?: true
    dueDate?: true
    assignedToId?: true
    dependencies?: true
    estimatedHours?: true
    actualHours?: true
    createdAt?: true
    updatedAt?: true
    caseId?: true
    _all?: true
  }

  export type WorkflowStepAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkflowStep to aggregate.
     */
    where?: WorkflowStepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowSteps to fetch.
     */
    orderBy?: WorkflowStepOrderByWithRelationInput | WorkflowStepOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkflowStepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowSteps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowSteps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkflowSteps
    **/
    _count?: true | WorkflowStepCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkflowStepAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkflowStepSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkflowStepMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkflowStepMaxAggregateInputType
  }

  export type GetWorkflowStepAggregateType<T extends WorkflowStepAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkflowStep]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkflowStep[P]>
      : GetScalarType<T[P], AggregateWorkflowStep[P]>
  }




  export type WorkflowStepGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkflowStepWhereInput
    orderBy?: WorkflowStepOrderByWithAggregationInput | WorkflowStepOrderByWithAggregationInput[]
    by: WorkflowStepScalarFieldEnum[] | WorkflowStepScalarFieldEnum
    having?: WorkflowStepScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkflowStepCountAggregateInputType | true
    _avg?: WorkflowStepAvgAggregateInputType
    _sum?: WorkflowStepSumAggregateInputType
    _min?: WorkflowStepMinAggregateInputType
    _max?: WorkflowStepMaxAggregateInputType
  }

  export type WorkflowStepGroupByOutputType = {
    id: string
    title: string
    description: string | null
    order: number
    completed: boolean
    completedAt: Date | null
    dueDate: Date | null
    assignedToId: string | null
    dependencies: string[]
    estimatedHours: number | null
    actualHours: number
    createdAt: Date
    updatedAt: Date
    caseId: string
    _count: WorkflowStepCountAggregateOutputType | null
    _avg: WorkflowStepAvgAggregateOutputType | null
    _sum: WorkflowStepSumAggregateOutputType | null
    _min: WorkflowStepMinAggregateOutputType | null
    _max: WorkflowStepMaxAggregateOutputType | null
  }

  type GetWorkflowStepGroupByPayload<T extends WorkflowStepGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkflowStepGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkflowStepGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkflowStepGroupByOutputType[P]>
            : GetScalarType<T[P], WorkflowStepGroupByOutputType[P]>
        }
      >
    >


  export type WorkflowStepSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    order?: boolean
    completed?: boolean
    completedAt?: boolean
    dueDate?: boolean
    assignedToId?: boolean
    dependencies?: boolean
    estimatedHours?: boolean
    actualHours?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    caseId?: boolean
    assignedTo?: boolean | WorkflowStep$assignedToArgs<ExtArgs>
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workflowStep"]>

  export type WorkflowStepSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    order?: boolean
    completed?: boolean
    completedAt?: boolean
    dueDate?: boolean
    assignedToId?: boolean
    dependencies?: boolean
    estimatedHours?: boolean
    actualHours?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    caseId?: boolean
    assignedTo?: boolean | WorkflowStep$assignedToArgs<ExtArgs>
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workflowStep"]>

  export type WorkflowStepSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    order?: boolean
    completed?: boolean
    completedAt?: boolean
    dueDate?: boolean
    assignedToId?: boolean
    dependencies?: boolean
    estimatedHours?: boolean
    actualHours?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    caseId?: boolean
    assignedTo?: boolean | WorkflowStep$assignedToArgs<ExtArgs>
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workflowStep"]>

  export type WorkflowStepSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    order?: boolean
    completed?: boolean
    completedAt?: boolean
    dueDate?: boolean
    assignedToId?: boolean
    dependencies?: boolean
    estimatedHours?: boolean
    actualHours?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    caseId?: boolean
  }

  export type WorkflowStepOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "order" | "completed" | "completedAt" | "dueDate" | "assignedToId" | "dependencies" | "estimatedHours" | "actualHours" | "createdAt" | "updatedAt" | "caseId", ExtArgs["result"]["workflowStep"]>
  export type WorkflowStepInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignedTo?: boolean | WorkflowStep$assignedToArgs<ExtArgs>
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }
  export type WorkflowStepIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignedTo?: boolean | WorkflowStep$assignedToArgs<ExtArgs>
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }
  export type WorkflowStepIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignedTo?: boolean | WorkflowStep$assignedToArgs<ExtArgs>
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }

  export type $WorkflowStepPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkflowStep"
    objects: {
      assignedTo: Prisma.$UserPayload<ExtArgs> | null
      case: Prisma.$CasePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      order: number
      completed: boolean
      completedAt: Date | null
      dueDate: Date | null
      assignedToId: string | null
      dependencies: string[]
      estimatedHours: number | null
      actualHours: number
      createdAt: Date
      updatedAt: Date
      caseId: string
    }, ExtArgs["result"]["workflowStep"]>
    composites: {}
  }

  type WorkflowStepGetPayload<S extends boolean | null | undefined | WorkflowStepDefaultArgs> = $Result.GetResult<Prisma.$WorkflowStepPayload, S>

  type WorkflowStepCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WorkflowStepFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WorkflowStepCountAggregateInputType | true
    }

  export interface WorkflowStepDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkflowStep'], meta: { name: 'WorkflowStep' } }
    /**
     * Find zero or one WorkflowStep that matches the filter.
     * @param {WorkflowStepFindUniqueArgs} args - Arguments to find a WorkflowStep
     * @example
     * // Get one WorkflowStep
     * const workflowStep = await prisma.workflowStep.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkflowStepFindUniqueArgs>(args: SelectSubset<T, WorkflowStepFindUniqueArgs<ExtArgs>>): Prisma__WorkflowStepClient<$Result.GetResult<Prisma.$WorkflowStepPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WorkflowStep that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WorkflowStepFindUniqueOrThrowArgs} args - Arguments to find a WorkflowStep
     * @example
     * // Get one WorkflowStep
     * const workflowStep = await prisma.workflowStep.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkflowStepFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkflowStepFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkflowStepClient<$Result.GetResult<Prisma.$WorkflowStepPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkflowStep that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowStepFindFirstArgs} args - Arguments to find a WorkflowStep
     * @example
     * // Get one WorkflowStep
     * const workflowStep = await prisma.workflowStep.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkflowStepFindFirstArgs>(args?: SelectSubset<T, WorkflowStepFindFirstArgs<ExtArgs>>): Prisma__WorkflowStepClient<$Result.GetResult<Prisma.$WorkflowStepPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkflowStep that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowStepFindFirstOrThrowArgs} args - Arguments to find a WorkflowStep
     * @example
     * // Get one WorkflowStep
     * const workflowStep = await prisma.workflowStep.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkflowStepFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkflowStepFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkflowStepClient<$Result.GetResult<Prisma.$WorkflowStepPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WorkflowSteps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowStepFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkflowSteps
     * const workflowSteps = await prisma.workflowStep.findMany()
     * 
     * // Get first 10 WorkflowSteps
     * const workflowSteps = await prisma.workflowStep.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workflowStepWithIdOnly = await prisma.workflowStep.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkflowStepFindManyArgs>(args?: SelectSubset<T, WorkflowStepFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowStepPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WorkflowStep.
     * @param {WorkflowStepCreateArgs} args - Arguments to create a WorkflowStep.
     * @example
     * // Create one WorkflowStep
     * const WorkflowStep = await prisma.workflowStep.create({
     *   data: {
     *     // ... data to create a WorkflowStep
     *   }
     * })
     * 
     */
    create<T extends WorkflowStepCreateArgs>(args: SelectSubset<T, WorkflowStepCreateArgs<ExtArgs>>): Prisma__WorkflowStepClient<$Result.GetResult<Prisma.$WorkflowStepPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WorkflowSteps.
     * @param {WorkflowStepCreateManyArgs} args - Arguments to create many WorkflowSteps.
     * @example
     * // Create many WorkflowSteps
     * const workflowStep = await prisma.workflowStep.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkflowStepCreateManyArgs>(args?: SelectSubset<T, WorkflowStepCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkflowSteps and returns the data saved in the database.
     * @param {WorkflowStepCreateManyAndReturnArgs} args - Arguments to create many WorkflowSteps.
     * @example
     * // Create many WorkflowSteps
     * const workflowStep = await prisma.workflowStep.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkflowSteps and only return the `id`
     * const workflowStepWithIdOnly = await prisma.workflowStep.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkflowStepCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkflowStepCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowStepPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WorkflowStep.
     * @param {WorkflowStepDeleteArgs} args - Arguments to delete one WorkflowStep.
     * @example
     * // Delete one WorkflowStep
     * const WorkflowStep = await prisma.workflowStep.delete({
     *   where: {
     *     // ... filter to delete one WorkflowStep
     *   }
     * })
     * 
     */
    delete<T extends WorkflowStepDeleteArgs>(args: SelectSubset<T, WorkflowStepDeleteArgs<ExtArgs>>): Prisma__WorkflowStepClient<$Result.GetResult<Prisma.$WorkflowStepPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WorkflowStep.
     * @param {WorkflowStepUpdateArgs} args - Arguments to update one WorkflowStep.
     * @example
     * // Update one WorkflowStep
     * const workflowStep = await prisma.workflowStep.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkflowStepUpdateArgs>(args: SelectSubset<T, WorkflowStepUpdateArgs<ExtArgs>>): Prisma__WorkflowStepClient<$Result.GetResult<Prisma.$WorkflowStepPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WorkflowSteps.
     * @param {WorkflowStepDeleteManyArgs} args - Arguments to filter WorkflowSteps to delete.
     * @example
     * // Delete a few WorkflowSteps
     * const { count } = await prisma.workflowStep.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkflowStepDeleteManyArgs>(args?: SelectSubset<T, WorkflowStepDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkflowSteps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowStepUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkflowSteps
     * const workflowStep = await prisma.workflowStep.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkflowStepUpdateManyArgs>(args: SelectSubset<T, WorkflowStepUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkflowSteps and returns the data updated in the database.
     * @param {WorkflowStepUpdateManyAndReturnArgs} args - Arguments to update many WorkflowSteps.
     * @example
     * // Update many WorkflowSteps
     * const workflowStep = await prisma.workflowStep.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WorkflowSteps and only return the `id`
     * const workflowStepWithIdOnly = await prisma.workflowStep.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WorkflowStepUpdateManyAndReturnArgs>(args: SelectSubset<T, WorkflowStepUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowStepPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WorkflowStep.
     * @param {WorkflowStepUpsertArgs} args - Arguments to update or create a WorkflowStep.
     * @example
     * // Update or create a WorkflowStep
     * const workflowStep = await prisma.workflowStep.upsert({
     *   create: {
     *     // ... data to create a WorkflowStep
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkflowStep we want to update
     *   }
     * })
     */
    upsert<T extends WorkflowStepUpsertArgs>(args: SelectSubset<T, WorkflowStepUpsertArgs<ExtArgs>>): Prisma__WorkflowStepClient<$Result.GetResult<Prisma.$WorkflowStepPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WorkflowSteps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowStepCountArgs} args - Arguments to filter WorkflowSteps to count.
     * @example
     * // Count the number of WorkflowSteps
     * const count = await prisma.workflowStep.count({
     *   where: {
     *     // ... the filter for the WorkflowSteps we want to count
     *   }
     * })
    **/
    count<T extends WorkflowStepCountArgs>(
      args?: Subset<T, WorkflowStepCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkflowStepCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkflowStep.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowStepAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkflowStepAggregateArgs>(args: Subset<T, WorkflowStepAggregateArgs>): Prisma.PrismaPromise<GetWorkflowStepAggregateType<T>>

    /**
     * Group by WorkflowStep.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowStepGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkflowStepGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkflowStepGroupByArgs['orderBy'] }
        : { orderBy?: WorkflowStepGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkflowStepGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkflowStepGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkflowStep model
   */
  readonly fields: WorkflowStepFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkflowStep.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkflowStepClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    assignedTo<T extends WorkflowStep$assignedToArgs<ExtArgs> = {}>(args?: Subset<T, WorkflowStep$assignedToArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    case<T extends CaseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CaseDefaultArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkflowStep model
   */
  interface WorkflowStepFieldRefs {
    readonly id: FieldRef<"WorkflowStep", 'String'>
    readonly title: FieldRef<"WorkflowStep", 'String'>
    readonly description: FieldRef<"WorkflowStep", 'String'>
    readonly order: FieldRef<"WorkflowStep", 'Int'>
    readonly completed: FieldRef<"WorkflowStep", 'Boolean'>
    readonly completedAt: FieldRef<"WorkflowStep", 'DateTime'>
    readonly dueDate: FieldRef<"WorkflowStep", 'DateTime'>
    readonly assignedToId: FieldRef<"WorkflowStep", 'String'>
    readonly dependencies: FieldRef<"WorkflowStep", 'String[]'>
    readonly estimatedHours: FieldRef<"WorkflowStep", 'Float'>
    readonly actualHours: FieldRef<"WorkflowStep", 'Float'>
    readonly createdAt: FieldRef<"WorkflowStep", 'DateTime'>
    readonly updatedAt: FieldRef<"WorkflowStep", 'DateTime'>
    readonly caseId: FieldRef<"WorkflowStep", 'String'>
  }
    

  // Custom InputTypes
  /**
   * WorkflowStep findUnique
   */
  export type WorkflowStepFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStep
     */
    select?: WorkflowStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStep
     */
    omit?: WorkflowStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStepInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowStep to fetch.
     */
    where: WorkflowStepWhereUniqueInput
  }

  /**
   * WorkflowStep findUniqueOrThrow
   */
  export type WorkflowStepFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStep
     */
    select?: WorkflowStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStep
     */
    omit?: WorkflowStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStepInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowStep to fetch.
     */
    where: WorkflowStepWhereUniqueInput
  }

  /**
   * WorkflowStep findFirst
   */
  export type WorkflowStepFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStep
     */
    select?: WorkflowStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStep
     */
    omit?: WorkflowStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStepInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowStep to fetch.
     */
    where?: WorkflowStepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowSteps to fetch.
     */
    orderBy?: WorkflowStepOrderByWithRelationInput | WorkflowStepOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkflowSteps.
     */
    cursor?: WorkflowStepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowSteps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowSteps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkflowSteps.
     */
    distinct?: WorkflowStepScalarFieldEnum | WorkflowStepScalarFieldEnum[]
  }

  /**
   * WorkflowStep findFirstOrThrow
   */
  export type WorkflowStepFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStep
     */
    select?: WorkflowStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStep
     */
    omit?: WorkflowStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStepInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowStep to fetch.
     */
    where?: WorkflowStepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowSteps to fetch.
     */
    orderBy?: WorkflowStepOrderByWithRelationInput | WorkflowStepOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkflowSteps.
     */
    cursor?: WorkflowStepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowSteps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowSteps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkflowSteps.
     */
    distinct?: WorkflowStepScalarFieldEnum | WorkflowStepScalarFieldEnum[]
  }

  /**
   * WorkflowStep findMany
   */
  export type WorkflowStepFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStep
     */
    select?: WorkflowStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStep
     */
    omit?: WorkflowStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStepInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowSteps to fetch.
     */
    where?: WorkflowStepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowSteps to fetch.
     */
    orderBy?: WorkflowStepOrderByWithRelationInput | WorkflowStepOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkflowSteps.
     */
    cursor?: WorkflowStepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowSteps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowSteps.
     */
    skip?: number
    distinct?: WorkflowStepScalarFieldEnum | WorkflowStepScalarFieldEnum[]
  }

  /**
   * WorkflowStep create
   */
  export type WorkflowStepCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStep
     */
    select?: WorkflowStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStep
     */
    omit?: WorkflowStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStepInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkflowStep.
     */
    data: XOR<WorkflowStepCreateInput, WorkflowStepUncheckedCreateInput>
  }

  /**
   * WorkflowStep createMany
   */
  export type WorkflowStepCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkflowSteps.
     */
    data: WorkflowStepCreateManyInput | WorkflowStepCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkflowStep createManyAndReturn
   */
  export type WorkflowStepCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStep
     */
    select?: WorkflowStepSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStep
     */
    omit?: WorkflowStepOmit<ExtArgs> | null
    /**
     * The data used to create many WorkflowSteps.
     */
    data: WorkflowStepCreateManyInput | WorkflowStepCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStepIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkflowStep update
   */
  export type WorkflowStepUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStep
     */
    select?: WorkflowStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStep
     */
    omit?: WorkflowStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStepInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkflowStep.
     */
    data: XOR<WorkflowStepUpdateInput, WorkflowStepUncheckedUpdateInput>
    /**
     * Choose, which WorkflowStep to update.
     */
    where: WorkflowStepWhereUniqueInput
  }

  /**
   * WorkflowStep updateMany
   */
  export type WorkflowStepUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkflowSteps.
     */
    data: XOR<WorkflowStepUpdateManyMutationInput, WorkflowStepUncheckedUpdateManyInput>
    /**
     * Filter which WorkflowSteps to update
     */
    where?: WorkflowStepWhereInput
    /**
     * Limit how many WorkflowSteps to update.
     */
    limit?: number
  }

  /**
   * WorkflowStep updateManyAndReturn
   */
  export type WorkflowStepUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStep
     */
    select?: WorkflowStepSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStep
     */
    omit?: WorkflowStepOmit<ExtArgs> | null
    /**
     * The data used to update WorkflowSteps.
     */
    data: XOR<WorkflowStepUpdateManyMutationInput, WorkflowStepUncheckedUpdateManyInput>
    /**
     * Filter which WorkflowSteps to update
     */
    where?: WorkflowStepWhereInput
    /**
     * Limit how many WorkflowSteps to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStepIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkflowStep upsert
   */
  export type WorkflowStepUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStep
     */
    select?: WorkflowStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStep
     */
    omit?: WorkflowStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStepInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkflowStep to update in case it exists.
     */
    where: WorkflowStepWhereUniqueInput
    /**
     * In case the WorkflowStep found by the `where` argument doesn't exist, create a new WorkflowStep with this data.
     */
    create: XOR<WorkflowStepCreateInput, WorkflowStepUncheckedCreateInput>
    /**
     * In case the WorkflowStep was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkflowStepUpdateInput, WorkflowStepUncheckedUpdateInput>
  }

  /**
   * WorkflowStep delete
   */
  export type WorkflowStepDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStep
     */
    select?: WorkflowStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStep
     */
    omit?: WorkflowStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStepInclude<ExtArgs> | null
    /**
     * Filter which WorkflowStep to delete.
     */
    where: WorkflowStepWhereUniqueInput
  }

  /**
   * WorkflowStep deleteMany
   */
  export type WorkflowStepDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkflowSteps to delete
     */
    where?: WorkflowStepWhereInput
    /**
     * Limit how many WorkflowSteps to delete.
     */
    limit?: number
  }

  /**
   * WorkflowStep.assignedTo
   */
  export type WorkflowStep$assignedToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * WorkflowStep without action
   */
  export type WorkflowStepDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStep
     */
    select?: WorkflowStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStep
     */
    omit?: WorkflowStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStepInclude<ExtArgs> | null
  }


  /**
   * Model DocumentType
   */

  export type AggregateDocumentType = {
    _count: DocumentTypeCountAggregateOutputType | null
    _avg: DocumentTypeAvgAggregateOutputType | null
    _sum: DocumentTypeSumAggregateOutputType | null
    _min: DocumentTypeMinAggregateOutputType | null
    _max: DocumentTypeMaxAggregateOutputType | null
  }

  export type DocumentTypeAvgAggregateOutputType = {
    order: number | null
  }

  export type DocumentTypeSumAggregateOutputType = {
    order: number | null
  }

  export type DocumentTypeMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    icon: string | null
    required: boolean | null
    category: string | null
    template: string | null
    order: number | null
    createdAt: Date | null
    caseId: string | null
  }

  export type DocumentTypeMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    icon: string | null
    required: boolean | null
    category: string | null
    template: string | null
    order: number | null
    createdAt: Date | null
    caseId: string | null
  }

  export type DocumentTypeCountAggregateOutputType = {
    id: number
    name: number
    description: number
    icon: number
    required: number
    category: number
    template: number
    order: number
    createdAt: number
    caseId: number
    _all: number
  }


  export type DocumentTypeAvgAggregateInputType = {
    order?: true
  }

  export type DocumentTypeSumAggregateInputType = {
    order?: true
  }

  export type DocumentTypeMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    icon?: true
    required?: true
    category?: true
    template?: true
    order?: true
    createdAt?: true
    caseId?: true
  }

  export type DocumentTypeMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    icon?: true
    required?: true
    category?: true
    template?: true
    order?: true
    createdAt?: true
    caseId?: true
  }

  export type DocumentTypeCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    icon?: true
    required?: true
    category?: true
    template?: true
    order?: true
    createdAt?: true
    caseId?: true
    _all?: true
  }

  export type DocumentTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DocumentType to aggregate.
     */
    where?: DocumentTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentTypes to fetch.
     */
    orderBy?: DocumentTypeOrderByWithRelationInput | DocumentTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DocumentTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DocumentTypes
    **/
    _count?: true | DocumentTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DocumentTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DocumentTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentTypeMaxAggregateInputType
  }

  export type GetDocumentTypeAggregateType<T extends DocumentTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateDocumentType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocumentType[P]>
      : GetScalarType<T[P], AggregateDocumentType[P]>
  }




  export type DocumentTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentTypeWhereInput
    orderBy?: DocumentTypeOrderByWithAggregationInput | DocumentTypeOrderByWithAggregationInput[]
    by: DocumentTypeScalarFieldEnum[] | DocumentTypeScalarFieldEnum
    having?: DocumentTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentTypeCountAggregateInputType | true
    _avg?: DocumentTypeAvgAggregateInputType
    _sum?: DocumentTypeSumAggregateInputType
    _min?: DocumentTypeMinAggregateInputType
    _max?: DocumentTypeMaxAggregateInputType
  }

  export type DocumentTypeGroupByOutputType = {
    id: string
    name: string
    description: string | null
    icon: string | null
    required: boolean
    category: string | null
    template: string | null
    order: number
    createdAt: Date
    caseId: string
    _count: DocumentTypeCountAggregateOutputType | null
    _avg: DocumentTypeAvgAggregateOutputType | null
    _sum: DocumentTypeSumAggregateOutputType | null
    _min: DocumentTypeMinAggregateOutputType | null
    _max: DocumentTypeMaxAggregateOutputType | null
  }

  type GetDocumentTypeGroupByPayload<T extends DocumentTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DocumentTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentTypeGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentTypeGroupByOutputType[P]>
        }
      >
    >


  export type DocumentTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    icon?: boolean
    required?: boolean
    category?: boolean
    template?: boolean
    order?: boolean
    createdAt?: boolean
    caseId?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["documentType"]>

  export type DocumentTypeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    icon?: boolean
    required?: boolean
    category?: boolean
    template?: boolean
    order?: boolean
    createdAt?: boolean
    caseId?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["documentType"]>

  export type DocumentTypeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    icon?: boolean
    required?: boolean
    category?: boolean
    template?: boolean
    order?: boolean
    createdAt?: boolean
    caseId?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["documentType"]>

  export type DocumentTypeSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    icon?: boolean
    required?: boolean
    category?: boolean
    template?: boolean
    order?: boolean
    createdAt?: boolean
    caseId?: boolean
  }

  export type DocumentTypeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "icon" | "required" | "category" | "template" | "order" | "createdAt" | "caseId", ExtArgs["result"]["documentType"]>
  export type DocumentTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }
  export type DocumentTypeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }
  export type DocumentTypeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }

  export type $DocumentTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DocumentType"
    objects: {
      case: Prisma.$CasePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      icon: string | null
      required: boolean
      category: string | null
      template: string | null
      order: number
      createdAt: Date
      caseId: string
    }, ExtArgs["result"]["documentType"]>
    composites: {}
  }

  type DocumentTypeGetPayload<S extends boolean | null | undefined | DocumentTypeDefaultArgs> = $Result.GetResult<Prisma.$DocumentTypePayload, S>

  type DocumentTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DocumentTypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DocumentTypeCountAggregateInputType | true
    }

  export interface DocumentTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DocumentType'], meta: { name: 'DocumentType' } }
    /**
     * Find zero or one DocumentType that matches the filter.
     * @param {DocumentTypeFindUniqueArgs} args - Arguments to find a DocumentType
     * @example
     * // Get one DocumentType
     * const documentType = await prisma.documentType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DocumentTypeFindUniqueArgs>(args: SelectSubset<T, DocumentTypeFindUniqueArgs<ExtArgs>>): Prisma__DocumentTypeClient<$Result.GetResult<Prisma.$DocumentTypePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DocumentType that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DocumentTypeFindUniqueOrThrowArgs} args - Arguments to find a DocumentType
     * @example
     * // Get one DocumentType
     * const documentType = await prisma.documentType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DocumentTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, DocumentTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DocumentTypeClient<$Result.GetResult<Prisma.$DocumentTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DocumentType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTypeFindFirstArgs} args - Arguments to find a DocumentType
     * @example
     * // Get one DocumentType
     * const documentType = await prisma.documentType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DocumentTypeFindFirstArgs>(args?: SelectSubset<T, DocumentTypeFindFirstArgs<ExtArgs>>): Prisma__DocumentTypeClient<$Result.GetResult<Prisma.$DocumentTypePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DocumentType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTypeFindFirstOrThrowArgs} args - Arguments to find a DocumentType
     * @example
     * // Get one DocumentType
     * const documentType = await prisma.documentType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DocumentTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, DocumentTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__DocumentTypeClient<$Result.GetResult<Prisma.$DocumentTypePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DocumentTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DocumentTypes
     * const documentTypes = await prisma.documentType.findMany()
     * 
     * // Get first 10 DocumentTypes
     * const documentTypes = await prisma.documentType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const documentTypeWithIdOnly = await prisma.documentType.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DocumentTypeFindManyArgs>(args?: SelectSubset<T, DocumentTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DocumentType.
     * @param {DocumentTypeCreateArgs} args - Arguments to create a DocumentType.
     * @example
     * // Create one DocumentType
     * const DocumentType = await prisma.documentType.create({
     *   data: {
     *     // ... data to create a DocumentType
     *   }
     * })
     * 
     */
    create<T extends DocumentTypeCreateArgs>(args: SelectSubset<T, DocumentTypeCreateArgs<ExtArgs>>): Prisma__DocumentTypeClient<$Result.GetResult<Prisma.$DocumentTypePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DocumentTypes.
     * @param {DocumentTypeCreateManyArgs} args - Arguments to create many DocumentTypes.
     * @example
     * // Create many DocumentTypes
     * const documentType = await prisma.documentType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DocumentTypeCreateManyArgs>(args?: SelectSubset<T, DocumentTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DocumentTypes and returns the data saved in the database.
     * @param {DocumentTypeCreateManyAndReturnArgs} args - Arguments to create many DocumentTypes.
     * @example
     * // Create many DocumentTypes
     * const documentType = await prisma.documentType.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DocumentTypes and only return the `id`
     * const documentTypeWithIdOnly = await prisma.documentType.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DocumentTypeCreateManyAndReturnArgs>(args?: SelectSubset<T, DocumentTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentTypePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DocumentType.
     * @param {DocumentTypeDeleteArgs} args - Arguments to delete one DocumentType.
     * @example
     * // Delete one DocumentType
     * const DocumentType = await prisma.documentType.delete({
     *   where: {
     *     // ... filter to delete one DocumentType
     *   }
     * })
     * 
     */
    delete<T extends DocumentTypeDeleteArgs>(args: SelectSubset<T, DocumentTypeDeleteArgs<ExtArgs>>): Prisma__DocumentTypeClient<$Result.GetResult<Prisma.$DocumentTypePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DocumentType.
     * @param {DocumentTypeUpdateArgs} args - Arguments to update one DocumentType.
     * @example
     * // Update one DocumentType
     * const documentType = await prisma.documentType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DocumentTypeUpdateArgs>(args: SelectSubset<T, DocumentTypeUpdateArgs<ExtArgs>>): Prisma__DocumentTypeClient<$Result.GetResult<Prisma.$DocumentTypePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DocumentTypes.
     * @param {DocumentTypeDeleteManyArgs} args - Arguments to filter DocumentTypes to delete.
     * @example
     * // Delete a few DocumentTypes
     * const { count } = await prisma.documentType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DocumentTypeDeleteManyArgs>(args?: SelectSubset<T, DocumentTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DocumentTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DocumentTypes
     * const documentType = await prisma.documentType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DocumentTypeUpdateManyArgs>(args: SelectSubset<T, DocumentTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DocumentTypes and returns the data updated in the database.
     * @param {DocumentTypeUpdateManyAndReturnArgs} args - Arguments to update many DocumentTypes.
     * @example
     * // Update many DocumentTypes
     * const documentType = await prisma.documentType.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DocumentTypes and only return the `id`
     * const documentTypeWithIdOnly = await prisma.documentType.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DocumentTypeUpdateManyAndReturnArgs>(args: SelectSubset<T, DocumentTypeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentTypePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DocumentType.
     * @param {DocumentTypeUpsertArgs} args - Arguments to update or create a DocumentType.
     * @example
     * // Update or create a DocumentType
     * const documentType = await prisma.documentType.upsert({
     *   create: {
     *     // ... data to create a DocumentType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DocumentType we want to update
     *   }
     * })
     */
    upsert<T extends DocumentTypeUpsertArgs>(args: SelectSubset<T, DocumentTypeUpsertArgs<ExtArgs>>): Prisma__DocumentTypeClient<$Result.GetResult<Prisma.$DocumentTypePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DocumentTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTypeCountArgs} args - Arguments to filter DocumentTypes to count.
     * @example
     * // Count the number of DocumentTypes
     * const count = await prisma.documentType.count({
     *   where: {
     *     // ... the filter for the DocumentTypes we want to count
     *   }
     * })
    **/
    count<T extends DocumentTypeCountArgs>(
      args?: Subset<T, DocumentTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DocumentType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentTypeAggregateArgs>(args: Subset<T, DocumentTypeAggregateArgs>): Prisma.PrismaPromise<GetDocumentTypeAggregateType<T>>

    /**
     * Group by DocumentType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentTypeGroupByArgs['orderBy'] }
        : { orderBy?: DocumentTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DocumentType model
   */
  readonly fields: DocumentTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DocumentType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DocumentTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    case<T extends CaseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CaseDefaultArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DocumentType model
   */
  interface DocumentTypeFieldRefs {
    readonly id: FieldRef<"DocumentType", 'String'>
    readonly name: FieldRef<"DocumentType", 'String'>
    readonly description: FieldRef<"DocumentType", 'String'>
    readonly icon: FieldRef<"DocumentType", 'String'>
    readonly required: FieldRef<"DocumentType", 'Boolean'>
    readonly category: FieldRef<"DocumentType", 'String'>
    readonly template: FieldRef<"DocumentType", 'String'>
    readonly order: FieldRef<"DocumentType", 'Int'>
    readonly createdAt: FieldRef<"DocumentType", 'DateTime'>
    readonly caseId: FieldRef<"DocumentType", 'String'>
  }
    

  // Custom InputTypes
  /**
   * DocumentType findUnique
   */
  export type DocumentTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentType
     */
    select?: DocumentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentType
     */
    omit?: DocumentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTypeInclude<ExtArgs> | null
    /**
     * Filter, which DocumentType to fetch.
     */
    where: DocumentTypeWhereUniqueInput
  }

  /**
   * DocumentType findUniqueOrThrow
   */
  export type DocumentTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentType
     */
    select?: DocumentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentType
     */
    omit?: DocumentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTypeInclude<ExtArgs> | null
    /**
     * Filter, which DocumentType to fetch.
     */
    where: DocumentTypeWhereUniqueInput
  }

  /**
   * DocumentType findFirst
   */
  export type DocumentTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentType
     */
    select?: DocumentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentType
     */
    omit?: DocumentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTypeInclude<ExtArgs> | null
    /**
     * Filter, which DocumentType to fetch.
     */
    where?: DocumentTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentTypes to fetch.
     */
    orderBy?: DocumentTypeOrderByWithRelationInput | DocumentTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DocumentTypes.
     */
    cursor?: DocumentTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DocumentTypes.
     */
    distinct?: DocumentTypeScalarFieldEnum | DocumentTypeScalarFieldEnum[]
  }

  /**
   * DocumentType findFirstOrThrow
   */
  export type DocumentTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentType
     */
    select?: DocumentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentType
     */
    omit?: DocumentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTypeInclude<ExtArgs> | null
    /**
     * Filter, which DocumentType to fetch.
     */
    where?: DocumentTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentTypes to fetch.
     */
    orderBy?: DocumentTypeOrderByWithRelationInput | DocumentTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DocumentTypes.
     */
    cursor?: DocumentTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DocumentTypes.
     */
    distinct?: DocumentTypeScalarFieldEnum | DocumentTypeScalarFieldEnum[]
  }

  /**
   * DocumentType findMany
   */
  export type DocumentTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentType
     */
    select?: DocumentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentType
     */
    omit?: DocumentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTypeInclude<ExtArgs> | null
    /**
     * Filter, which DocumentTypes to fetch.
     */
    where?: DocumentTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentTypes to fetch.
     */
    orderBy?: DocumentTypeOrderByWithRelationInput | DocumentTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DocumentTypes.
     */
    cursor?: DocumentTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentTypes.
     */
    skip?: number
    distinct?: DocumentTypeScalarFieldEnum | DocumentTypeScalarFieldEnum[]
  }

  /**
   * DocumentType create
   */
  export type DocumentTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentType
     */
    select?: DocumentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentType
     */
    omit?: DocumentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a DocumentType.
     */
    data: XOR<DocumentTypeCreateInput, DocumentTypeUncheckedCreateInput>
  }

  /**
   * DocumentType createMany
   */
  export type DocumentTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DocumentTypes.
     */
    data: DocumentTypeCreateManyInput | DocumentTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DocumentType createManyAndReturn
   */
  export type DocumentTypeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentType
     */
    select?: DocumentTypeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentType
     */
    omit?: DocumentTypeOmit<ExtArgs> | null
    /**
     * The data used to create many DocumentTypes.
     */
    data: DocumentTypeCreateManyInput | DocumentTypeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTypeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DocumentType update
   */
  export type DocumentTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentType
     */
    select?: DocumentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentType
     */
    omit?: DocumentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a DocumentType.
     */
    data: XOR<DocumentTypeUpdateInput, DocumentTypeUncheckedUpdateInput>
    /**
     * Choose, which DocumentType to update.
     */
    where: DocumentTypeWhereUniqueInput
  }

  /**
   * DocumentType updateMany
   */
  export type DocumentTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DocumentTypes.
     */
    data: XOR<DocumentTypeUpdateManyMutationInput, DocumentTypeUncheckedUpdateManyInput>
    /**
     * Filter which DocumentTypes to update
     */
    where?: DocumentTypeWhereInput
    /**
     * Limit how many DocumentTypes to update.
     */
    limit?: number
  }

  /**
   * DocumentType updateManyAndReturn
   */
  export type DocumentTypeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentType
     */
    select?: DocumentTypeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentType
     */
    omit?: DocumentTypeOmit<ExtArgs> | null
    /**
     * The data used to update DocumentTypes.
     */
    data: XOR<DocumentTypeUpdateManyMutationInput, DocumentTypeUncheckedUpdateManyInput>
    /**
     * Filter which DocumentTypes to update
     */
    where?: DocumentTypeWhereInput
    /**
     * Limit how many DocumentTypes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTypeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DocumentType upsert
   */
  export type DocumentTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentType
     */
    select?: DocumentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentType
     */
    omit?: DocumentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the DocumentType to update in case it exists.
     */
    where: DocumentTypeWhereUniqueInput
    /**
     * In case the DocumentType found by the `where` argument doesn't exist, create a new DocumentType with this data.
     */
    create: XOR<DocumentTypeCreateInput, DocumentTypeUncheckedCreateInput>
    /**
     * In case the DocumentType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DocumentTypeUpdateInput, DocumentTypeUncheckedUpdateInput>
  }

  /**
   * DocumentType delete
   */
  export type DocumentTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentType
     */
    select?: DocumentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentType
     */
    omit?: DocumentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTypeInclude<ExtArgs> | null
    /**
     * Filter which DocumentType to delete.
     */
    where: DocumentTypeWhereUniqueInput
  }

  /**
   * DocumentType deleteMany
   */
  export type DocumentTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DocumentTypes to delete
     */
    where?: DocumentTypeWhereInput
    /**
     * Limit how many DocumentTypes to delete.
     */
    limit?: number
  }

  /**
   * DocumentType without action
   */
  export type DocumentTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentType
     */
    select?: DocumentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentType
     */
    omit?: DocumentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTypeInclude<ExtArgs> | null
  }


  /**
   * Model LegalStatute
   */

  export type AggregateLegalStatute = {
    _count: LegalStatuteCountAggregateOutputType | null
    _min: LegalStatuteMinAggregateOutputType | null
    _max: LegalStatuteMaxAggregateOutputType | null
  }

  export type LegalStatuteMinAggregateOutputType = {
    id: string | null
    title: string | null
    chapter: string | null
    section: string | null
    subsection: string | null
    description: string | null
    url: string | null
    notes: string | null
    priority: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    caseId: string | null
    addedById: string | null
  }

  export type LegalStatuteMaxAggregateOutputType = {
    id: string | null
    title: string | null
    chapter: string | null
    section: string | null
    subsection: string | null
    description: string | null
    url: string | null
    notes: string | null
    priority: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    caseId: string | null
    addedById: string | null
  }

  export type LegalStatuteCountAggregateOutputType = {
    id: number
    title: number
    chapter: number
    section: number
    subsection: number
    description: number
    url: number
    notes: number
    priority: number
    status: number
    createdAt: number
    updatedAt: number
    caseId: number
    addedById: number
    _all: number
  }


  export type LegalStatuteMinAggregateInputType = {
    id?: true
    title?: true
    chapter?: true
    section?: true
    subsection?: true
    description?: true
    url?: true
    notes?: true
    priority?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    caseId?: true
    addedById?: true
  }

  export type LegalStatuteMaxAggregateInputType = {
    id?: true
    title?: true
    chapter?: true
    section?: true
    subsection?: true
    description?: true
    url?: true
    notes?: true
    priority?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    caseId?: true
    addedById?: true
  }

  export type LegalStatuteCountAggregateInputType = {
    id?: true
    title?: true
    chapter?: true
    section?: true
    subsection?: true
    description?: true
    url?: true
    notes?: true
    priority?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    caseId?: true
    addedById?: true
    _all?: true
  }

  export type LegalStatuteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LegalStatute to aggregate.
     */
    where?: LegalStatuteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LegalStatutes to fetch.
     */
    orderBy?: LegalStatuteOrderByWithRelationInput | LegalStatuteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LegalStatuteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LegalStatutes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LegalStatutes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LegalStatutes
    **/
    _count?: true | LegalStatuteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LegalStatuteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LegalStatuteMaxAggregateInputType
  }

  export type GetLegalStatuteAggregateType<T extends LegalStatuteAggregateArgs> = {
        [P in keyof T & keyof AggregateLegalStatute]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLegalStatute[P]>
      : GetScalarType<T[P], AggregateLegalStatute[P]>
  }




  export type LegalStatuteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LegalStatuteWhereInput
    orderBy?: LegalStatuteOrderByWithAggregationInput | LegalStatuteOrderByWithAggregationInput[]
    by: LegalStatuteScalarFieldEnum[] | LegalStatuteScalarFieldEnum
    having?: LegalStatuteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LegalStatuteCountAggregateInputType | true
    _min?: LegalStatuteMinAggregateInputType
    _max?: LegalStatuteMaxAggregateInputType
  }

  export type LegalStatuteGroupByOutputType = {
    id: string
    title: string
    chapter: string | null
    section: string | null
    subsection: string | null
    description: string | null
    url: string | null
    notes: string | null
    priority: string
    status: string
    createdAt: Date
    updatedAt: Date
    caseId: string
    addedById: string | null
    _count: LegalStatuteCountAggregateOutputType | null
    _min: LegalStatuteMinAggregateOutputType | null
    _max: LegalStatuteMaxAggregateOutputType | null
  }

  type GetLegalStatuteGroupByPayload<T extends LegalStatuteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LegalStatuteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LegalStatuteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LegalStatuteGroupByOutputType[P]>
            : GetScalarType<T[P], LegalStatuteGroupByOutputType[P]>
        }
      >
    >


  export type LegalStatuteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    chapter?: boolean
    section?: boolean
    subsection?: boolean
    description?: boolean
    url?: boolean
    notes?: boolean
    priority?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    caseId?: boolean
    addedById?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
    addedBy?: boolean | LegalStatute$addedByArgs<ExtArgs>
  }, ExtArgs["result"]["legalStatute"]>

  export type LegalStatuteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    chapter?: boolean
    section?: boolean
    subsection?: boolean
    description?: boolean
    url?: boolean
    notes?: boolean
    priority?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    caseId?: boolean
    addedById?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
    addedBy?: boolean | LegalStatute$addedByArgs<ExtArgs>
  }, ExtArgs["result"]["legalStatute"]>

  export type LegalStatuteSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    chapter?: boolean
    section?: boolean
    subsection?: boolean
    description?: boolean
    url?: boolean
    notes?: boolean
    priority?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    caseId?: boolean
    addedById?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
    addedBy?: boolean | LegalStatute$addedByArgs<ExtArgs>
  }, ExtArgs["result"]["legalStatute"]>

  export type LegalStatuteSelectScalar = {
    id?: boolean
    title?: boolean
    chapter?: boolean
    section?: boolean
    subsection?: boolean
    description?: boolean
    url?: boolean
    notes?: boolean
    priority?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    caseId?: boolean
    addedById?: boolean
  }

  export type LegalStatuteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "chapter" | "section" | "subsection" | "description" | "url" | "notes" | "priority" | "status" | "createdAt" | "updatedAt" | "caseId" | "addedById", ExtArgs["result"]["legalStatute"]>
  export type LegalStatuteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
    addedBy?: boolean | LegalStatute$addedByArgs<ExtArgs>
  }
  export type LegalStatuteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
    addedBy?: boolean | LegalStatute$addedByArgs<ExtArgs>
  }
  export type LegalStatuteIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
    addedBy?: boolean | LegalStatute$addedByArgs<ExtArgs>
  }

  export type $LegalStatutePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LegalStatute"
    objects: {
      case: Prisma.$CasePayload<ExtArgs>
      addedBy: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      chapter: string | null
      section: string | null
      subsection: string | null
      description: string | null
      url: string | null
      notes: string | null
      priority: string
      status: string
      createdAt: Date
      updatedAt: Date
      caseId: string
      addedById: string | null
    }, ExtArgs["result"]["legalStatute"]>
    composites: {}
  }

  type LegalStatuteGetPayload<S extends boolean | null | undefined | LegalStatuteDefaultArgs> = $Result.GetResult<Prisma.$LegalStatutePayload, S>

  type LegalStatuteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LegalStatuteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LegalStatuteCountAggregateInputType | true
    }

  export interface LegalStatuteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LegalStatute'], meta: { name: 'LegalStatute' } }
    /**
     * Find zero or one LegalStatute that matches the filter.
     * @param {LegalStatuteFindUniqueArgs} args - Arguments to find a LegalStatute
     * @example
     * // Get one LegalStatute
     * const legalStatute = await prisma.legalStatute.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LegalStatuteFindUniqueArgs>(args: SelectSubset<T, LegalStatuteFindUniqueArgs<ExtArgs>>): Prisma__LegalStatuteClient<$Result.GetResult<Prisma.$LegalStatutePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LegalStatute that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LegalStatuteFindUniqueOrThrowArgs} args - Arguments to find a LegalStatute
     * @example
     * // Get one LegalStatute
     * const legalStatute = await prisma.legalStatute.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LegalStatuteFindUniqueOrThrowArgs>(args: SelectSubset<T, LegalStatuteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LegalStatuteClient<$Result.GetResult<Prisma.$LegalStatutePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LegalStatute that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LegalStatuteFindFirstArgs} args - Arguments to find a LegalStatute
     * @example
     * // Get one LegalStatute
     * const legalStatute = await prisma.legalStatute.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LegalStatuteFindFirstArgs>(args?: SelectSubset<T, LegalStatuteFindFirstArgs<ExtArgs>>): Prisma__LegalStatuteClient<$Result.GetResult<Prisma.$LegalStatutePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LegalStatute that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LegalStatuteFindFirstOrThrowArgs} args - Arguments to find a LegalStatute
     * @example
     * // Get one LegalStatute
     * const legalStatute = await prisma.legalStatute.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LegalStatuteFindFirstOrThrowArgs>(args?: SelectSubset<T, LegalStatuteFindFirstOrThrowArgs<ExtArgs>>): Prisma__LegalStatuteClient<$Result.GetResult<Prisma.$LegalStatutePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LegalStatutes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LegalStatuteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LegalStatutes
     * const legalStatutes = await prisma.legalStatute.findMany()
     * 
     * // Get first 10 LegalStatutes
     * const legalStatutes = await prisma.legalStatute.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const legalStatuteWithIdOnly = await prisma.legalStatute.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LegalStatuteFindManyArgs>(args?: SelectSubset<T, LegalStatuteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LegalStatutePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LegalStatute.
     * @param {LegalStatuteCreateArgs} args - Arguments to create a LegalStatute.
     * @example
     * // Create one LegalStatute
     * const LegalStatute = await prisma.legalStatute.create({
     *   data: {
     *     // ... data to create a LegalStatute
     *   }
     * })
     * 
     */
    create<T extends LegalStatuteCreateArgs>(args: SelectSubset<T, LegalStatuteCreateArgs<ExtArgs>>): Prisma__LegalStatuteClient<$Result.GetResult<Prisma.$LegalStatutePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LegalStatutes.
     * @param {LegalStatuteCreateManyArgs} args - Arguments to create many LegalStatutes.
     * @example
     * // Create many LegalStatutes
     * const legalStatute = await prisma.legalStatute.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LegalStatuteCreateManyArgs>(args?: SelectSubset<T, LegalStatuteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LegalStatutes and returns the data saved in the database.
     * @param {LegalStatuteCreateManyAndReturnArgs} args - Arguments to create many LegalStatutes.
     * @example
     * // Create many LegalStatutes
     * const legalStatute = await prisma.legalStatute.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LegalStatutes and only return the `id`
     * const legalStatuteWithIdOnly = await prisma.legalStatute.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LegalStatuteCreateManyAndReturnArgs>(args?: SelectSubset<T, LegalStatuteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LegalStatutePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LegalStatute.
     * @param {LegalStatuteDeleteArgs} args - Arguments to delete one LegalStatute.
     * @example
     * // Delete one LegalStatute
     * const LegalStatute = await prisma.legalStatute.delete({
     *   where: {
     *     // ... filter to delete one LegalStatute
     *   }
     * })
     * 
     */
    delete<T extends LegalStatuteDeleteArgs>(args: SelectSubset<T, LegalStatuteDeleteArgs<ExtArgs>>): Prisma__LegalStatuteClient<$Result.GetResult<Prisma.$LegalStatutePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LegalStatute.
     * @param {LegalStatuteUpdateArgs} args - Arguments to update one LegalStatute.
     * @example
     * // Update one LegalStatute
     * const legalStatute = await prisma.legalStatute.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LegalStatuteUpdateArgs>(args: SelectSubset<T, LegalStatuteUpdateArgs<ExtArgs>>): Prisma__LegalStatuteClient<$Result.GetResult<Prisma.$LegalStatutePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LegalStatutes.
     * @param {LegalStatuteDeleteManyArgs} args - Arguments to filter LegalStatutes to delete.
     * @example
     * // Delete a few LegalStatutes
     * const { count } = await prisma.legalStatute.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LegalStatuteDeleteManyArgs>(args?: SelectSubset<T, LegalStatuteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LegalStatutes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LegalStatuteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LegalStatutes
     * const legalStatute = await prisma.legalStatute.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LegalStatuteUpdateManyArgs>(args: SelectSubset<T, LegalStatuteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LegalStatutes and returns the data updated in the database.
     * @param {LegalStatuteUpdateManyAndReturnArgs} args - Arguments to update many LegalStatutes.
     * @example
     * // Update many LegalStatutes
     * const legalStatute = await prisma.legalStatute.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LegalStatutes and only return the `id`
     * const legalStatuteWithIdOnly = await prisma.legalStatute.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LegalStatuteUpdateManyAndReturnArgs>(args: SelectSubset<T, LegalStatuteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LegalStatutePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LegalStatute.
     * @param {LegalStatuteUpsertArgs} args - Arguments to update or create a LegalStatute.
     * @example
     * // Update or create a LegalStatute
     * const legalStatute = await prisma.legalStatute.upsert({
     *   create: {
     *     // ... data to create a LegalStatute
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LegalStatute we want to update
     *   }
     * })
     */
    upsert<T extends LegalStatuteUpsertArgs>(args: SelectSubset<T, LegalStatuteUpsertArgs<ExtArgs>>): Prisma__LegalStatuteClient<$Result.GetResult<Prisma.$LegalStatutePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LegalStatutes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LegalStatuteCountArgs} args - Arguments to filter LegalStatutes to count.
     * @example
     * // Count the number of LegalStatutes
     * const count = await prisma.legalStatute.count({
     *   where: {
     *     // ... the filter for the LegalStatutes we want to count
     *   }
     * })
    **/
    count<T extends LegalStatuteCountArgs>(
      args?: Subset<T, LegalStatuteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LegalStatuteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LegalStatute.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LegalStatuteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LegalStatuteAggregateArgs>(args: Subset<T, LegalStatuteAggregateArgs>): Prisma.PrismaPromise<GetLegalStatuteAggregateType<T>>

    /**
     * Group by LegalStatute.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LegalStatuteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LegalStatuteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LegalStatuteGroupByArgs['orderBy'] }
        : { orderBy?: LegalStatuteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LegalStatuteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLegalStatuteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LegalStatute model
   */
  readonly fields: LegalStatuteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LegalStatute.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LegalStatuteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    case<T extends CaseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CaseDefaultArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    addedBy<T extends LegalStatute$addedByArgs<ExtArgs> = {}>(args?: Subset<T, LegalStatute$addedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LegalStatute model
   */
  interface LegalStatuteFieldRefs {
    readonly id: FieldRef<"LegalStatute", 'String'>
    readonly title: FieldRef<"LegalStatute", 'String'>
    readonly chapter: FieldRef<"LegalStatute", 'String'>
    readonly section: FieldRef<"LegalStatute", 'String'>
    readonly subsection: FieldRef<"LegalStatute", 'String'>
    readonly description: FieldRef<"LegalStatute", 'String'>
    readonly url: FieldRef<"LegalStatute", 'String'>
    readonly notes: FieldRef<"LegalStatute", 'String'>
    readonly priority: FieldRef<"LegalStatute", 'String'>
    readonly status: FieldRef<"LegalStatute", 'String'>
    readonly createdAt: FieldRef<"LegalStatute", 'DateTime'>
    readonly updatedAt: FieldRef<"LegalStatute", 'DateTime'>
    readonly caseId: FieldRef<"LegalStatute", 'String'>
    readonly addedById: FieldRef<"LegalStatute", 'String'>
  }
    

  // Custom InputTypes
  /**
   * LegalStatute findUnique
   */
  export type LegalStatuteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LegalStatute
     */
    select?: LegalStatuteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LegalStatute
     */
    omit?: LegalStatuteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LegalStatuteInclude<ExtArgs> | null
    /**
     * Filter, which LegalStatute to fetch.
     */
    where: LegalStatuteWhereUniqueInput
  }

  /**
   * LegalStatute findUniqueOrThrow
   */
  export type LegalStatuteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LegalStatute
     */
    select?: LegalStatuteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LegalStatute
     */
    omit?: LegalStatuteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LegalStatuteInclude<ExtArgs> | null
    /**
     * Filter, which LegalStatute to fetch.
     */
    where: LegalStatuteWhereUniqueInput
  }

  /**
   * LegalStatute findFirst
   */
  export type LegalStatuteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LegalStatute
     */
    select?: LegalStatuteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LegalStatute
     */
    omit?: LegalStatuteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LegalStatuteInclude<ExtArgs> | null
    /**
     * Filter, which LegalStatute to fetch.
     */
    where?: LegalStatuteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LegalStatutes to fetch.
     */
    orderBy?: LegalStatuteOrderByWithRelationInput | LegalStatuteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LegalStatutes.
     */
    cursor?: LegalStatuteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LegalStatutes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LegalStatutes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LegalStatutes.
     */
    distinct?: LegalStatuteScalarFieldEnum | LegalStatuteScalarFieldEnum[]
  }

  /**
   * LegalStatute findFirstOrThrow
   */
  export type LegalStatuteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LegalStatute
     */
    select?: LegalStatuteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LegalStatute
     */
    omit?: LegalStatuteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LegalStatuteInclude<ExtArgs> | null
    /**
     * Filter, which LegalStatute to fetch.
     */
    where?: LegalStatuteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LegalStatutes to fetch.
     */
    orderBy?: LegalStatuteOrderByWithRelationInput | LegalStatuteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LegalStatutes.
     */
    cursor?: LegalStatuteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LegalStatutes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LegalStatutes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LegalStatutes.
     */
    distinct?: LegalStatuteScalarFieldEnum | LegalStatuteScalarFieldEnum[]
  }

  /**
   * LegalStatute findMany
   */
  export type LegalStatuteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LegalStatute
     */
    select?: LegalStatuteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LegalStatute
     */
    omit?: LegalStatuteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LegalStatuteInclude<ExtArgs> | null
    /**
     * Filter, which LegalStatutes to fetch.
     */
    where?: LegalStatuteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LegalStatutes to fetch.
     */
    orderBy?: LegalStatuteOrderByWithRelationInput | LegalStatuteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LegalStatutes.
     */
    cursor?: LegalStatuteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LegalStatutes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LegalStatutes.
     */
    skip?: number
    distinct?: LegalStatuteScalarFieldEnum | LegalStatuteScalarFieldEnum[]
  }

  /**
   * LegalStatute create
   */
  export type LegalStatuteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LegalStatute
     */
    select?: LegalStatuteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LegalStatute
     */
    omit?: LegalStatuteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LegalStatuteInclude<ExtArgs> | null
    /**
     * The data needed to create a LegalStatute.
     */
    data: XOR<LegalStatuteCreateInput, LegalStatuteUncheckedCreateInput>
  }

  /**
   * LegalStatute createMany
   */
  export type LegalStatuteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LegalStatutes.
     */
    data: LegalStatuteCreateManyInput | LegalStatuteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LegalStatute createManyAndReturn
   */
  export type LegalStatuteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LegalStatute
     */
    select?: LegalStatuteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LegalStatute
     */
    omit?: LegalStatuteOmit<ExtArgs> | null
    /**
     * The data used to create many LegalStatutes.
     */
    data: LegalStatuteCreateManyInput | LegalStatuteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LegalStatuteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LegalStatute update
   */
  export type LegalStatuteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LegalStatute
     */
    select?: LegalStatuteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LegalStatute
     */
    omit?: LegalStatuteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LegalStatuteInclude<ExtArgs> | null
    /**
     * The data needed to update a LegalStatute.
     */
    data: XOR<LegalStatuteUpdateInput, LegalStatuteUncheckedUpdateInput>
    /**
     * Choose, which LegalStatute to update.
     */
    where: LegalStatuteWhereUniqueInput
  }

  /**
   * LegalStatute updateMany
   */
  export type LegalStatuteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LegalStatutes.
     */
    data: XOR<LegalStatuteUpdateManyMutationInput, LegalStatuteUncheckedUpdateManyInput>
    /**
     * Filter which LegalStatutes to update
     */
    where?: LegalStatuteWhereInput
    /**
     * Limit how many LegalStatutes to update.
     */
    limit?: number
  }

  /**
   * LegalStatute updateManyAndReturn
   */
  export type LegalStatuteUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LegalStatute
     */
    select?: LegalStatuteSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LegalStatute
     */
    omit?: LegalStatuteOmit<ExtArgs> | null
    /**
     * The data used to update LegalStatutes.
     */
    data: XOR<LegalStatuteUpdateManyMutationInput, LegalStatuteUncheckedUpdateManyInput>
    /**
     * Filter which LegalStatutes to update
     */
    where?: LegalStatuteWhereInput
    /**
     * Limit how many LegalStatutes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LegalStatuteIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LegalStatute upsert
   */
  export type LegalStatuteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LegalStatute
     */
    select?: LegalStatuteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LegalStatute
     */
    omit?: LegalStatuteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LegalStatuteInclude<ExtArgs> | null
    /**
     * The filter to search for the LegalStatute to update in case it exists.
     */
    where: LegalStatuteWhereUniqueInput
    /**
     * In case the LegalStatute found by the `where` argument doesn't exist, create a new LegalStatute with this data.
     */
    create: XOR<LegalStatuteCreateInput, LegalStatuteUncheckedCreateInput>
    /**
     * In case the LegalStatute was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LegalStatuteUpdateInput, LegalStatuteUncheckedUpdateInput>
  }

  /**
   * LegalStatute delete
   */
  export type LegalStatuteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LegalStatute
     */
    select?: LegalStatuteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LegalStatute
     */
    omit?: LegalStatuteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LegalStatuteInclude<ExtArgs> | null
    /**
     * Filter which LegalStatute to delete.
     */
    where: LegalStatuteWhereUniqueInput
  }

  /**
   * LegalStatute deleteMany
   */
  export type LegalStatuteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LegalStatutes to delete
     */
    where?: LegalStatuteWhereInput
    /**
     * Limit how many LegalStatutes to delete.
     */
    limit?: number
  }

  /**
   * LegalStatute.addedBy
   */
  export type LegalStatute$addedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * LegalStatute without action
   */
  export type LegalStatuteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LegalStatute
     */
    select?: LegalStatuteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LegalStatute
     */
    omit?: LegalStatuteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LegalStatuteInclude<ExtArgs> | null
  }


  /**
   * Model CourtDecision
   */

  export type AggregateCourtDecision = {
    _count: CourtDecisionCountAggregateOutputType | null
    _min: CourtDecisionMinAggregateOutputType | null
    _max: CourtDecisionMaxAggregateOutputType | null
  }

  export type CourtDecisionMinAggregateOutputType = {
    id: string | null
    title: string | null
    court: string | null
    caseNumber: string | null
    date: Date | null
    summary: string | null
    url: string | null
    relevance: string | null
    precedent: boolean | null
    outcome: string | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
    caseId: string | null
    addedById: string | null
  }

  export type CourtDecisionMaxAggregateOutputType = {
    id: string | null
    title: string | null
    court: string | null
    caseNumber: string | null
    date: Date | null
    summary: string | null
    url: string | null
    relevance: string | null
    precedent: boolean | null
    outcome: string | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
    caseId: string | null
    addedById: string | null
  }

  export type CourtDecisionCountAggregateOutputType = {
    id: number
    title: number
    court: number
    caseNumber: number
    date: number
    summary: number
    url: number
    relevance: number
    precedent: number
    outcome: number
    notes: number
    createdAt: number
    updatedAt: number
    caseId: number
    addedById: number
    _all: number
  }


  export type CourtDecisionMinAggregateInputType = {
    id?: true
    title?: true
    court?: true
    caseNumber?: true
    date?: true
    summary?: true
    url?: true
    relevance?: true
    precedent?: true
    outcome?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    caseId?: true
    addedById?: true
  }

  export type CourtDecisionMaxAggregateInputType = {
    id?: true
    title?: true
    court?: true
    caseNumber?: true
    date?: true
    summary?: true
    url?: true
    relevance?: true
    precedent?: true
    outcome?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    caseId?: true
    addedById?: true
  }

  export type CourtDecisionCountAggregateInputType = {
    id?: true
    title?: true
    court?: true
    caseNumber?: true
    date?: true
    summary?: true
    url?: true
    relevance?: true
    precedent?: true
    outcome?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    caseId?: true
    addedById?: true
    _all?: true
  }

  export type CourtDecisionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CourtDecision to aggregate.
     */
    where?: CourtDecisionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourtDecisions to fetch.
     */
    orderBy?: CourtDecisionOrderByWithRelationInput | CourtDecisionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CourtDecisionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourtDecisions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourtDecisions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CourtDecisions
    **/
    _count?: true | CourtDecisionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CourtDecisionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CourtDecisionMaxAggregateInputType
  }

  export type GetCourtDecisionAggregateType<T extends CourtDecisionAggregateArgs> = {
        [P in keyof T & keyof AggregateCourtDecision]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourtDecision[P]>
      : GetScalarType<T[P], AggregateCourtDecision[P]>
  }




  export type CourtDecisionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourtDecisionWhereInput
    orderBy?: CourtDecisionOrderByWithAggregationInput | CourtDecisionOrderByWithAggregationInput[]
    by: CourtDecisionScalarFieldEnum[] | CourtDecisionScalarFieldEnum
    having?: CourtDecisionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CourtDecisionCountAggregateInputType | true
    _min?: CourtDecisionMinAggregateInputType
    _max?: CourtDecisionMaxAggregateInputType
  }

  export type CourtDecisionGroupByOutputType = {
    id: string
    title: string
    court: string
    caseNumber: string | null
    date: Date | null
    summary: string | null
    url: string | null
    relevance: string | null
    precedent: boolean
    outcome: string | null
    notes: string | null
    createdAt: Date
    updatedAt: Date
    caseId: string
    addedById: string | null
    _count: CourtDecisionCountAggregateOutputType | null
    _min: CourtDecisionMinAggregateOutputType | null
    _max: CourtDecisionMaxAggregateOutputType | null
  }

  type GetCourtDecisionGroupByPayload<T extends CourtDecisionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CourtDecisionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CourtDecisionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CourtDecisionGroupByOutputType[P]>
            : GetScalarType<T[P], CourtDecisionGroupByOutputType[P]>
        }
      >
    >


  export type CourtDecisionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    court?: boolean
    caseNumber?: boolean
    date?: boolean
    summary?: boolean
    url?: boolean
    relevance?: boolean
    precedent?: boolean
    outcome?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    caseId?: boolean
    addedById?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
    addedBy?: boolean | CourtDecision$addedByArgs<ExtArgs>
  }, ExtArgs["result"]["courtDecision"]>

  export type CourtDecisionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    court?: boolean
    caseNumber?: boolean
    date?: boolean
    summary?: boolean
    url?: boolean
    relevance?: boolean
    precedent?: boolean
    outcome?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    caseId?: boolean
    addedById?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
    addedBy?: boolean | CourtDecision$addedByArgs<ExtArgs>
  }, ExtArgs["result"]["courtDecision"]>

  export type CourtDecisionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    court?: boolean
    caseNumber?: boolean
    date?: boolean
    summary?: boolean
    url?: boolean
    relevance?: boolean
    precedent?: boolean
    outcome?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    caseId?: boolean
    addedById?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
    addedBy?: boolean | CourtDecision$addedByArgs<ExtArgs>
  }, ExtArgs["result"]["courtDecision"]>

  export type CourtDecisionSelectScalar = {
    id?: boolean
    title?: boolean
    court?: boolean
    caseNumber?: boolean
    date?: boolean
    summary?: boolean
    url?: boolean
    relevance?: boolean
    precedent?: boolean
    outcome?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    caseId?: boolean
    addedById?: boolean
  }

  export type CourtDecisionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "court" | "caseNumber" | "date" | "summary" | "url" | "relevance" | "precedent" | "outcome" | "notes" | "createdAt" | "updatedAt" | "caseId" | "addedById", ExtArgs["result"]["courtDecision"]>
  export type CourtDecisionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
    addedBy?: boolean | CourtDecision$addedByArgs<ExtArgs>
  }
  export type CourtDecisionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
    addedBy?: boolean | CourtDecision$addedByArgs<ExtArgs>
  }
  export type CourtDecisionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
    addedBy?: boolean | CourtDecision$addedByArgs<ExtArgs>
  }

  export type $CourtDecisionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CourtDecision"
    objects: {
      case: Prisma.$CasePayload<ExtArgs>
      addedBy: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      court: string
      caseNumber: string | null
      date: Date | null
      summary: string | null
      url: string | null
      relevance: string | null
      precedent: boolean
      outcome: string | null
      notes: string | null
      createdAt: Date
      updatedAt: Date
      caseId: string
      addedById: string | null
    }, ExtArgs["result"]["courtDecision"]>
    composites: {}
  }

  type CourtDecisionGetPayload<S extends boolean | null | undefined | CourtDecisionDefaultArgs> = $Result.GetResult<Prisma.$CourtDecisionPayload, S>

  type CourtDecisionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CourtDecisionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CourtDecisionCountAggregateInputType | true
    }

  export interface CourtDecisionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CourtDecision'], meta: { name: 'CourtDecision' } }
    /**
     * Find zero or one CourtDecision that matches the filter.
     * @param {CourtDecisionFindUniqueArgs} args - Arguments to find a CourtDecision
     * @example
     * // Get one CourtDecision
     * const courtDecision = await prisma.courtDecision.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CourtDecisionFindUniqueArgs>(args: SelectSubset<T, CourtDecisionFindUniqueArgs<ExtArgs>>): Prisma__CourtDecisionClient<$Result.GetResult<Prisma.$CourtDecisionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CourtDecision that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CourtDecisionFindUniqueOrThrowArgs} args - Arguments to find a CourtDecision
     * @example
     * // Get one CourtDecision
     * const courtDecision = await prisma.courtDecision.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CourtDecisionFindUniqueOrThrowArgs>(args: SelectSubset<T, CourtDecisionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CourtDecisionClient<$Result.GetResult<Prisma.$CourtDecisionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CourtDecision that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourtDecisionFindFirstArgs} args - Arguments to find a CourtDecision
     * @example
     * // Get one CourtDecision
     * const courtDecision = await prisma.courtDecision.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CourtDecisionFindFirstArgs>(args?: SelectSubset<T, CourtDecisionFindFirstArgs<ExtArgs>>): Prisma__CourtDecisionClient<$Result.GetResult<Prisma.$CourtDecisionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CourtDecision that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourtDecisionFindFirstOrThrowArgs} args - Arguments to find a CourtDecision
     * @example
     * // Get one CourtDecision
     * const courtDecision = await prisma.courtDecision.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CourtDecisionFindFirstOrThrowArgs>(args?: SelectSubset<T, CourtDecisionFindFirstOrThrowArgs<ExtArgs>>): Prisma__CourtDecisionClient<$Result.GetResult<Prisma.$CourtDecisionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CourtDecisions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourtDecisionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CourtDecisions
     * const courtDecisions = await prisma.courtDecision.findMany()
     * 
     * // Get first 10 CourtDecisions
     * const courtDecisions = await prisma.courtDecision.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const courtDecisionWithIdOnly = await prisma.courtDecision.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CourtDecisionFindManyArgs>(args?: SelectSubset<T, CourtDecisionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourtDecisionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CourtDecision.
     * @param {CourtDecisionCreateArgs} args - Arguments to create a CourtDecision.
     * @example
     * // Create one CourtDecision
     * const CourtDecision = await prisma.courtDecision.create({
     *   data: {
     *     // ... data to create a CourtDecision
     *   }
     * })
     * 
     */
    create<T extends CourtDecisionCreateArgs>(args: SelectSubset<T, CourtDecisionCreateArgs<ExtArgs>>): Prisma__CourtDecisionClient<$Result.GetResult<Prisma.$CourtDecisionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CourtDecisions.
     * @param {CourtDecisionCreateManyArgs} args - Arguments to create many CourtDecisions.
     * @example
     * // Create many CourtDecisions
     * const courtDecision = await prisma.courtDecision.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CourtDecisionCreateManyArgs>(args?: SelectSubset<T, CourtDecisionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CourtDecisions and returns the data saved in the database.
     * @param {CourtDecisionCreateManyAndReturnArgs} args - Arguments to create many CourtDecisions.
     * @example
     * // Create many CourtDecisions
     * const courtDecision = await prisma.courtDecision.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CourtDecisions and only return the `id`
     * const courtDecisionWithIdOnly = await prisma.courtDecision.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CourtDecisionCreateManyAndReturnArgs>(args?: SelectSubset<T, CourtDecisionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourtDecisionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CourtDecision.
     * @param {CourtDecisionDeleteArgs} args - Arguments to delete one CourtDecision.
     * @example
     * // Delete one CourtDecision
     * const CourtDecision = await prisma.courtDecision.delete({
     *   where: {
     *     // ... filter to delete one CourtDecision
     *   }
     * })
     * 
     */
    delete<T extends CourtDecisionDeleteArgs>(args: SelectSubset<T, CourtDecisionDeleteArgs<ExtArgs>>): Prisma__CourtDecisionClient<$Result.GetResult<Prisma.$CourtDecisionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CourtDecision.
     * @param {CourtDecisionUpdateArgs} args - Arguments to update one CourtDecision.
     * @example
     * // Update one CourtDecision
     * const courtDecision = await prisma.courtDecision.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CourtDecisionUpdateArgs>(args: SelectSubset<T, CourtDecisionUpdateArgs<ExtArgs>>): Prisma__CourtDecisionClient<$Result.GetResult<Prisma.$CourtDecisionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CourtDecisions.
     * @param {CourtDecisionDeleteManyArgs} args - Arguments to filter CourtDecisions to delete.
     * @example
     * // Delete a few CourtDecisions
     * const { count } = await prisma.courtDecision.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CourtDecisionDeleteManyArgs>(args?: SelectSubset<T, CourtDecisionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CourtDecisions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourtDecisionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CourtDecisions
     * const courtDecision = await prisma.courtDecision.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CourtDecisionUpdateManyArgs>(args: SelectSubset<T, CourtDecisionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CourtDecisions and returns the data updated in the database.
     * @param {CourtDecisionUpdateManyAndReturnArgs} args - Arguments to update many CourtDecisions.
     * @example
     * // Update many CourtDecisions
     * const courtDecision = await prisma.courtDecision.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CourtDecisions and only return the `id`
     * const courtDecisionWithIdOnly = await prisma.courtDecision.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CourtDecisionUpdateManyAndReturnArgs>(args: SelectSubset<T, CourtDecisionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourtDecisionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CourtDecision.
     * @param {CourtDecisionUpsertArgs} args - Arguments to update or create a CourtDecision.
     * @example
     * // Update or create a CourtDecision
     * const courtDecision = await prisma.courtDecision.upsert({
     *   create: {
     *     // ... data to create a CourtDecision
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CourtDecision we want to update
     *   }
     * })
     */
    upsert<T extends CourtDecisionUpsertArgs>(args: SelectSubset<T, CourtDecisionUpsertArgs<ExtArgs>>): Prisma__CourtDecisionClient<$Result.GetResult<Prisma.$CourtDecisionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CourtDecisions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourtDecisionCountArgs} args - Arguments to filter CourtDecisions to count.
     * @example
     * // Count the number of CourtDecisions
     * const count = await prisma.courtDecision.count({
     *   where: {
     *     // ... the filter for the CourtDecisions we want to count
     *   }
     * })
    **/
    count<T extends CourtDecisionCountArgs>(
      args?: Subset<T, CourtDecisionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CourtDecisionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CourtDecision.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourtDecisionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CourtDecisionAggregateArgs>(args: Subset<T, CourtDecisionAggregateArgs>): Prisma.PrismaPromise<GetCourtDecisionAggregateType<T>>

    /**
     * Group by CourtDecision.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourtDecisionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CourtDecisionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CourtDecisionGroupByArgs['orderBy'] }
        : { orderBy?: CourtDecisionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CourtDecisionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourtDecisionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CourtDecision model
   */
  readonly fields: CourtDecisionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CourtDecision.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CourtDecisionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    case<T extends CaseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CaseDefaultArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    addedBy<T extends CourtDecision$addedByArgs<ExtArgs> = {}>(args?: Subset<T, CourtDecision$addedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CourtDecision model
   */
  interface CourtDecisionFieldRefs {
    readonly id: FieldRef<"CourtDecision", 'String'>
    readonly title: FieldRef<"CourtDecision", 'String'>
    readonly court: FieldRef<"CourtDecision", 'String'>
    readonly caseNumber: FieldRef<"CourtDecision", 'String'>
    readonly date: FieldRef<"CourtDecision", 'DateTime'>
    readonly summary: FieldRef<"CourtDecision", 'String'>
    readonly url: FieldRef<"CourtDecision", 'String'>
    readonly relevance: FieldRef<"CourtDecision", 'String'>
    readonly precedent: FieldRef<"CourtDecision", 'Boolean'>
    readonly outcome: FieldRef<"CourtDecision", 'String'>
    readonly notes: FieldRef<"CourtDecision", 'String'>
    readonly createdAt: FieldRef<"CourtDecision", 'DateTime'>
    readonly updatedAt: FieldRef<"CourtDecision", 'DateTime'>
    readonly caseId: FieldRef<"CourtDecision", 'String'>
    readonly addedById: FieldRef<"CourtDecision", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CourtDecision findUnique
   */
  export type CourtDecisionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourtDecision
     */
    select?: CourtDecisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourtDecision
     */
    omit?: CourtDecisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourtDecisionInclude<ExtArgs> | null
    /**
     * Filter, which CourtDecision to fetch.
     */
    where: CourtDecisionWhereUniqueInput
  }

  /**
   * CourtDecision findUniqueOrThrow
   */
  export type CourtDecisionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourtDecision
     */
    select?: CourtDecisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourtDecision
     */
    omit?: CourtDecisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourtDecisionInclude<ExtArgs> | null
    /**
     * Filter, which CourtDecision to fetch.
     */
    where: CourtDecisionWhereUniqueInput
  }

  /**
   * CourtDecision findFirst
   */
  export type CourtDecisionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourtDecision
     */
    select?: CourtDecisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourtDecision
     */
    omit?: CourtDecisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourtDecisionInclude<ExtArgs> | null
    /**
     * Filter, which CourtDecision to fetch.
     */
    where?: CourtDecisionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourtDecisions to fetch.
     */
    orderBy?: CourtDecisionOrderByWithRelationInput | CourtDecisionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CourtDecisions.
     */
    cursor?: CourtDecisionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourtDecisions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourtDecisions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CourtDecisions.
     */
    distinct?: CourtDecisionScalarFieldEnum | CourtDecisionScalarFieldEnum[]
  }

  /**
   * CourtDecision findFirstOrThrow
   */
  export type CourtDecisionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourtDecision
     */
    select?: CourtDecisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourtDecision
     */
    omit?: CourtDecisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourtDecisionInclude<ExtArgs> | null
    /**
     * Filter, which CourtDecision to fetch.
     */
    where?: CourtDecisionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourtDecisions to fetch.
     */
    orderBy?: CourtDecisionOrderByWithRelationInput | CourtDecisionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CourtDecisions.
     */
    cursor?: CourtDecisionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourtDecisions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourtDecisions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CourtDecisions.
     */
    distinct?: CourtDecisionScalarFieldEnum | CourtDecisionScalarFieldEnum[]
  }

  /**
   * CourtDecision findMany
   */
  export type CourtDecisionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourtDecision
     */
    select?: CourtDecisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourtDecision
     */
    omit?: CourtDecisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourtDecisionInclude<ExtArgs> | null
    /**
     * Filter, which CourtDecisions to fetch.
     */
    where?: CourtDecisionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourtDecisions to fetch.
     */
    orderBy?: CourtDecisionOrderByWithRelationInput | CourtDecisionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CourtDecisions.
     */
    cursor?: CourtDecisionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourtDecisions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourtDecisions.
     */
    skip?: number
    distinct?: CourtDecisionScalarFieldEnum | CourtDecisionScalarFieldEnum[]
  }

  /**
   * CourtDecision create
   */
  export type CourtDecisionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourtDecision
     */
    select?: CourtDecisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourtDecision
     */
    omit?: CourtDecisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourtDecisionInclude<ExtArgs> | null
    /**
     * The data needed to create a CourtDecision.
     */
    data: XOR<CourtDecisionCreateInput, CourtDecisionUncheckedCreateInput>
  }

  /**
   * CourtDecision createMany
   */
  export type CourtDecisionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CourtDecisions.
     */
    data: CourtDecisionCreateManyInput | CourtDecisionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CourtDecision createManyAndReturn
   */
  export type CourtDecisionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourtDecision
     */
    select?: CourtDecisionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CourtDecision
     */
    omit?: CourtDecisionOmit<ExtArgs> | null
    /**
     * The data used to create many CourtDecisions.
     */
    data: CourtDecisionCreateManyInput | CourtDecisionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourtDecisionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CourtDecision update
   */
  export type CourtDecisionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourtDecision
     */
    select?: CourtDecisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourtDecision
     */
    omit?: CourtDecisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourtDecisionInclude<ExtArgs> | null
    /**
     * The data needed to update a CourtDecision.
     */
    data: XOR<CourtDecisionUpdateInput, CourtDecisionUncheckedUpdateInput>
    /**
     * Choose, which CourtDecision to update.
     */
    where: CourtDecisionWhereUniqueInput
  }

  /**
   * CourtDecision updateMany
   */
  export type CourtDecisionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CourtDecisions.
     */
    data: XOR<CourtDecisionUpdateManyMutationInput, CourtDecisionUncheckedUpdateManyInput>
    /**
     * Filter which CourtDecisions to update
     */
    where?: CourtDecisionWhereInput
    /**
     * Limit how many CourtDecisions to update.
     */
    limit?: number
  }

  /**
   * CourtDecision updateManyAndReturn
   */
  export type CourtDecisionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourtDecision
     */
    select?: CourtDecisionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CourtDecision
     */
    omit?: CourtDecisionOmit<ExtArgs> | null
    /**
     * The data used to update CourtDecisions.
     */
    data: XOR<CourtDecisionUpdateManyMutationInput, CourtDecisionUncheckedUpdateManyInput>
    /**
     * Filter which CourtDecisions to update
     */
    where?: CourtDecisionWhereInput
    /**
     * Limit how many CourtDecisions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourtDecisionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CourtDecision upsert
   */
  export type CourtDecisionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourtDecision
     */
    select?: CourtDecisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourtDecision
     */
    omit?: CourtDecisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourtDecisionInclude<ExtArgs> | null
    /**
     * The filter to search for the CourtDecision to update in case it exists.
     */
    where: CourtDecisionWhereUniqueInput
    /**
     * In case the CourtDecision found by the `where` argument doesn't exist, create a new CourtDecision with this data.
     */
    create: XOR<CourtDecisionCreateInput, CourtDecisionUncheckedCreateInput>
    /**
     * In case the CourtDecision was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CourtDecisionUpdateInput, CourtDecisionUncheckedUpdateInput>
  }

  /**
   * CourtDecision delete
   */
  export type CourtDecisionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourtDecision
     */
    select?: CourtDecisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourtDecision
     */
    omit?: CourtDecisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourtDecisionInclude<ExtArgs> | null
    /**
     * Filter which CourtDecision to delete.
     */
    where: CourtDecisionWhereUniqueInput
  }

  /**
   * CourtDecision deleteMany
   */
  export type CourtDecisionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CourtDecisions to delete
     */
    where?: CourtDecisionWhereInput
    /**
     * Limit how many CourtDecisions to delete.
     */
    limit?: number
  }

  /**
   * CourtDecision.addedBy
   */
  export type CourtDecision$addedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * CourtDecision without action
   */
  export type CourtDecisionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourtDecision
     */
    select?: CourtDecisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourtDecision
     */
    omit?: CourtDecisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourtDecisionInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AccountScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    provider: 'provider',
    providerAccountId: 'providerAccountId',
    refresh_token: 'refresh_token',
    access_token: 'access_token',
    expires_at: 'expires_at',
    token_type: 'token_type',
    scope: 'scope',
    id_token: 'id_token',
    session_state: 'session_state'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    sessionToken: 'sessionToken',
    userId: 'userId',
    expires: 'expires'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const VerificationTokenScalarFieldEnum: {
    identifier: 'identifier',
    token: 'token',
    expires: 'expires'
  };

  export type VerificationTokenScalarFieldEnum = (typeof VerificationTokenScalarFieldEnum)[keyof typeof VerificationTokenScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    emailVerified: 'emailVerified',
    image: 'image',
    password: 'password',
    role: 'role',
    firstName: 'firstName',
    lastName: 'lastName',
    phone: 'phone',
    position: 'position',
    active: 'active',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CaseScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    status: 'status',
    priority: 'priority',
    clientName: 'clientName',
    clientEmail: 'clientEmail',
    clientPhone: 'clientPhone',
    dueDate: 'dueDate',
    tags: 'tags',
    notes: 'notes',
    progress: 'progress',
    estimatedHours: 'estimatedHours',
    actualHours: 'actualHours',
    hourlyRate: 'hourlyRate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    assignedToId: 'assignedToId',
    createdById: 'createdById'
  };

  export type CaseScalarFieldEnum = (typeof CaseScalarFieldEnum)[keyof typeof CaseScalarFieldEnum]


  export const FileScalarFieldEnum: {
    id: 'id',
    originalName: 'originalName',
    fileName: 'fileName',
    fileSize: 'fileSize',
    mimeType: 'mimeType',
    filePath: 'filePath',
    uploadedAt: 'uploadedAt',
    caseId: 'caseId',
    uploadedById: 'uploadedById'
  };

  export type FileScalarFieldEnum = (typeof FileScalarFieldEnum)[keyof typeof FileScalarFieldEnum]


  export const ActivityScalarFieldEnum: {
    id: 'id',
    type: 'type',
    description: 'description',
    metadata: 'metadata',
    createdAt: 'createdAt',
    userId: 'userId',
    caseId: 'caseId'
  };

  export type ActivityScalarFieldEnum = (typeof ActivityScalarFieldEnum)[keyof typeof ActivityScalarFieldEnum]


  export const MilestoneScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    dueDate: 'dueDate',
    completed: 'completed',
    completedAt: 'completedAt',
    order: 'order',
    estimatedHours: 'estimatedHours',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    caseId: 'caseId',
    completedById: 'completedById',
    assignedToId: 'assignedToId'
  };

  export type MilestoneScalarFieldEnum = (typeof MilestoneScalarFieldEnum)[keyof typeof MilestoneScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    content: 'content',
    isInternal: 'isInternal',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    caseId: 'caseId',
    authorId: 'authorId'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const TimeEntryScalarFieldEnum: {
    id: 'id',
    description: 'description',
    hours: 'hours',
    date: 'date',
    billable: 'billable',
    hourlyRate: 'hourlyRate',
    amount: 'amount',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    caseId: 'caseId',
    userId: 'userId'
  };

  export type TimeEntryScalarFieldEnum = (typeof TimeEntryScalarFieldEnum)[keyof typeof TimeEntryScalarFieldEnum]


  export const LegalReferenceScalarFieldEnum: {
    id: 'id',
    type: 'type',
    title: 'title',
    citation: 'citation',
    url: 'url',
    summary: 'summary',
    relevance: 'relevance',
    createdAt: 'createdAt',
    caseId: 'caseId',
    addedById: 'addedById'
  };

  export type LegalReferenceScalarFieldEnum = (typeof LegalReferenceScalarFieldEnum)[keyof typeof LegalReferenceScalarFieldEnum]


  export const WorkflowStepScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    order: 'order',
    completed: 'completed',
    completedAt: 'completedAt',
    dueDate: 'dueDate',
    assignedToId: 'assignedToId',
    dependencies: 'dependencies',
    estimatedHours: 'estimatedHours',
    actualHours: 'actualHours',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    caseId: 'caseId'
  };

  export type WorkflowStepScalarFieldEnum = (typeof WorkflowStepScalarFieldEnum)[keyof typeof WorkflowStepScalarFieldEnum]


  export const DocumentTypeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    icon: 'icon',
    required: 'required',
    category: 'category',
    template: 'template',
    order: 'order',
    createdAt: 'createdAt',
    caseId: 'caseId'
  };

  export type DocumentTypeScalarFieldEnum = (typeof DocumentTypeScalarFieldEnum)[keyof typeof DocumentTypeScalarFieldEnum]


  export const LegalStatuteScalarFieldEnum: {
    id: 'id',
    title: 'title',
    chapter: 'chapter',
    section: 'section',
    subsection: 'subsection',
    description: 'description',
    url: 'url',
    notes: 'notes',
    priority: 'priority',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    caseId: 'caseId',
    addedById: 'addedById'
  };

  export type LegalStatuteScalarFieldEnum = (typeof LegalStatuteScalarFieldEnum)[keyof typeof LegalStatuteScalarFieldEnum]


  export const CourtDecisionScalarFieldEnum: {
    id: 'id',
    title: 'title',
    court: 'court',
    caseNumber: 'caseNumber',
    date: 'date',
    summary: 'summary',
    url: 'url',
    relevance: 'relevance',
    precedent: 'precedent',
    outcome: 'outcome',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    caseId: 'caseId',
    addedById: 'addedById'
  };

  export type CourtDecisionScalarFieldEnum = (typeof CourtDecisionScalarFieldEnum)[keyof typeof CourtDecisionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'CaseStatus'
   */
  export type EnumCaseStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CaseStatus'>
    


  /**
   * Reference to a field of type 'CaseStatus[]'
   */
  export type ListEnumCaseStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CaseStatus[]'>
    


  /**
   * Reference to a field of type 'CasePriority'
   */
  export type EnumCasePriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CasePriority'>
    


  /**
   * Reference to a field of type 'CasePriority[]'
   */
  export type ListEnumCasePriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CasePriority[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    
  /**
   * Deep Input Types
   */


  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    provider_providerAccountId?: AccountProviderProviderAccountIdCompoundUniqueInput
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "provider_providerAccountId">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Account"> | string
    userId?: StringWithAggregatesFilter<"Account"> | string
    type?: StringWithAggregatesFilter<"Account"> | string
    provider?: StringWithAggregatesFilter<"Account"> | string
    providerAccountId?: StringWithAggregatesFilter<"Account"> | string
    refresh_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    access_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    expires_at?: IntNullableWithAggregatesFilter<"Account"> | number | null
    token_type?: StringNullableWithAggregatesFilter<"Account"> | string | null
    scope?: StringNullableWithAggregatesFilter<"Account"> | string | null
    id_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    session_state?: StringNullableWithAggregatesFilter<"Account"> | string | null
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    sessionToken?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sessionToken?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "sessionToken">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    sessionToken?: StringWithAggregatesFilter<"Session"> | string
    userId?: StringWithAggregatesFilter<"Session"> | string
    expires?: DateTimeWithAggregatesFilter<"Session"> | Date | string
  }

  export type VerificationTokenWhereInput = {
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    identifier?: StringFilter<"VerificationToken"> | string
    token?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
  }

  export type VerificationTokenOrderByWithRelationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenWhereUniqueInput = Prisma.AtLeast<{
    token?: string
    identifier_token?: VerificationTokenIdentifierTokenCompoundUniqueInput
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    identifier?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
  }, "token" | "identifier_token">

  export type VerificationTokenOrderByWithAggregationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    _count?: VerificationTokenCountOrderByAggregateInput
    _max?: VerificationTokenMaxOrderByAggregateInput
    _min?: VerificationTokenMinOrderByAggregateInput
  }

  export type VerificationTokenScalarWhereWithAggregatesInput = {
    AND?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    OR?: VerificationTokenScalarWhereWithAggregatesInput[]
    NOT?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    identifier?: StringWithAggregatesFilter<"VerificationToken"> | string
    token?: StringWithAggregatesFilter<"VerificationToken"> | string
    expires?: DateTimeWithAggregatesFilter<"VerificationToken"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    email?: StringFilter<"User"> | string
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    image?: StringNullableFilter<"User"> | string | null
    password?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    phone?: StringNullableFilter<"User"> | string | null
    position?: StringNullableFilter<"User"> | string | null
    active?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
    assignedCases?: CaseListRelationFilter
    createdCases?: CaseListRelationFilter
    activities?: ActivityListRelationFilter
    fileUploads?: FileListRelationFilter
    completedMilestones?: MilestoneListRelationFilter
    assignedMilestones?: MilestoneListRelationFilter
    comments?: CommentListRelationFilter
    timeEntries?: TimeEntryListRelationFilter
    legalRefs?: LegalReferenceListRelationFilter
    workflowSteps?: WorkflowStepListRelationFilter
    legalStatutes?: LegalStatuteListRelationFilter
    courtDecisions?: CourtDecisionListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrder
    emailVerified?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    role?: SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    position?: SortOrderInput | SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    accounts?: AccountOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
    assignedCases?: CaseOrderByRelationAggregateInput
    createdCases?: CaseOrderByRelationAggregateInput
    activities?: ActivityOrderByRelationAggregateInput
    fileUploads?: FileOrderByRelationAggregateInput
    completedMilestones?: MilestoneOrderByRelationAggregateInput
    assignedMilestones?: MilestoneOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
    timeEntries?: TimeEntryOrderByRelationAggregateInput
    legalRefs?: LegalReferenceOrderByRelationAggregateInput
    workflowSteps?: WorkflowStepOrderByRelationAggregateInput
    legalStatutes?: LegalStatuteOrderByRelationAggregateInput
    courtDecisions?: CourtDecisionOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    image?: StringNullableFilter<"User"> | string | null
    password?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    phone?: StringNullableFilter<"User"> | string | null
    position?: StringNullableFilter<"User"> | string | null
    active?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
    assignedCases?: CaseListRelationFilter
    createdCases?: CaseListRelationFilter
    activities?: ActivityListRelationFilter
    fileUploads?: FileListRelationFilter
    completedMilestones?: MilestoneListRelationFilter
    assignedMilestones?: MilestoneListRelationFilter
    comments?: CommentListRelationFilter
    timeEntries?: TimeEntryListRelationFilter
    legalRefs?: LegalReferenceListRelationFilter
    workflowSteps?: WorkflowStepListRelationFilter
    legalStatutes?: LegalStatuteListRelationFilter
    courtDecisions?: CourtDecisionListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrder
    emailVerified?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    role?: SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    position?: SortOrderInput | SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    email?: StringWithAggregatesFilter<"User"> | string
    emailVerified?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    firstName?: StringNullableWithAggregatesFilter<"User"> | string | null
    lastName?: StringNullableWithAggregatesFilter<"User"> | string | null
    phone?: StringNullableWithAggregatesFilter<"User"> | string | null
    position?: StringNullableWithAggregatesFilter<"User"> | string | null
    active?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type CaseWhereInput = {
    AND?: CaseWhereInput | CaseWhereInput[]
    OR?: CaseWhereInput[]
    NOT?: CaseWhereInput | CaseWhereInput[]
    id?: StringFilter<"Case"> | string
    title?: StringFilter<"Case"> | string
    description?: StringNullableFilter<"Case"> | string | null
    status?: EnumCaseStatusFilter<"Case"> | $Enums.CaseStatus
    priority?: EnumCasePriorityFilter<"Case"> | $Enums.CasePriority
    clientName?: StringNullableFilter<"Case"> | string | null
    clientEmail?: StringNullableFilter<"Case"> | string | null
    clientPhone?: StringNullableFilter<"Case"> | string | null
    dueDate?: DateTimeNullableFilter<"Case"> | Date | string | null
    tags?: StringNullableListFilter<"Case">
    notes?: StringNullableFilter<"Case"> | string | null
    progress?: IntFilter<"Case"> | number
    estimatedHours?: FloatNullableFilter<"Case"> | number | null
    actualHours?: FloatFilter<"Case"> | number
    hourlyRate?: FloatNullableFilter<"Case"> | number | null
    createdAt?: DateTimeFilter<"Case"> | Date | string
    updatedAt?: DateTimeFilter<"Case"> | Date | string
    assignedToId?: StringNullableFilter<"Case"> | string | null
    createdById?: StringNullableFilter<"Case"> | string | null
    assignedTo?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    files?: FileListRelationFilter
    activities?: ActivityListRelationFilter
    milestones?: MilestoneListRelationFilter
    comments?: CommentListRelationFilter
    timeEntries?: TimeEntryListRelationFilter
    legalRefs?: LegalReferenceListRelationFilter
    workflowSteps?: WorkflowStepListRelationFilter
    documentTypes?: DocumentTypeListRelationFilter
    legalStatutes?: LegalStatuteListRelationFilter
    courtDecisions?: CourtDecisionListRelationFilter
  }

  export type CaseOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    priority?: SortOrder
    clientName?: SortOrderInput | SortOrder
    clientEmail?: SortOrderInput | SortOrder
    clientPhone?: SortOrderInput | SortOrder
    dueDate?: SortOrderInput | SortOrder
    tags?: SortOrder
    notes?: SortOrderInput | SortOrder
    progress?: SortOrder
    estimatedHours?: SortOrderInput | SortOrder
    actualHours?: SortOrder
    hourlyRate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    assignedToId?: SortOrderInput | SortOrder
    createdById?: SortOrderInput | SortOrder
    assignedTo?: UserOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
    files?: FileOrderByRelationAggregateInput
    activities?: ActivityOrderByRelationAggregateInput
    milestones?: MilestoneOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
    timeEntries?: TimeEntryOrderByRelationAggregateInput
    legalRefs?: LegalReferenceOrderByRelationAggregateInput
    workflowSteps?: WorkflowStepOrderByRelationAggregateInput
    documentTypes?: DocumentTypeOrderByRelationAggregateInput
    legalStatutes?: LegalStatuteOrderByRelationAggregateInput
    courtDecisions?: CourtDecisionOrderByRelationAggregateInput
  }

  export type CaseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CaseWhereInput | CaseWhereInput[]
    OR?: CaseWhereInput[]
    NOT?: CaseWhereInput | CaseWhereInput[]
    title?: StringFilter<"Case"> | string
    description?: StringNullableFilter<"Case"> | string | null
    status?: EnumCaseStatusFilter<"Case"> | $Enums.CaseStatus
    priority?: EnumCasePriorityFilter<"Case"> | $Enums.CasePriority
    clientName?: StringNullableFilter<"Case"> | string | null
    clientEmail?: StringNullableFilter<"Case"> | string | null
    clientPhone?: StringNullableFilter<"Case"> | string | null
    dueDate?: DateTimeNullableFilter<"Case"> | Date | string | null
    tags?: StringNullableListFilter<"Case">
    notes?: StringNullableFilter<"Case"> | string | null
    progress?: IntFilter<"Case"> | number
    estimatedHours?: FloatNullableFilter<"Case"> | number | null
    actualHours?: FloatFilter<"Case"> | number
    hourlyRate?: FloatNullableFilter<"Case"> | number | null
    createdAt?: DateTimeFilter<"Case"> | Date | string
    updatedAt?: DateTimeFilter<"Case"> | Date | string
    assignedToId?: StringNullableFilter<"Case"> | string | null
    createdById?: StringNullableFilter<"Case"> | string | null
    assignedTo?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    files?: FileListRelationFilter
    activities?: ActivityListRelationFilter
    milestones?: MilestoneListRelationFilter
    comments?: CommentListRelationFilter
    timeEntries?: TimeEntryListRelationFilter
    legalRefs?: LegalReferenceListRelationFilter
    workflowSteps?: WorkflowStepListRelationFilter
    documentTypes?: DocumentTypeListRelationFilter
    legalStatutes?: LegalStatuteListRelationFilter
    courtDecisions?: CourtDecisionListRelationFilter
  }, "id">

  export type CaseOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    priority?: SortOrder
    clientName?: SortOrderInput | SortOrder
    clientEmail?: SortOrderInput | SortOrder
    clientPhone?: SortOrderInput | SortOrder
    dueDate?: SortOrderInput | SortOrder
    tags?: SortOrder
    notes?: SortOrderInput | SortOrder
    progress?: SortOrder
    estimatedHours?: SortOrderInput | SortOrder
    actualHours?: SortOrder
    hourlyRate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    assignedToId?: SortOrderInput | SortOrder
    createdById?: SortOrderInput | SortOrder
    _count?: CaseCountOrderByAggregateInput
    _avg?: CaseAvgOrderByAggregateInput
    _max?: CaseMaxOrderByAggregateInput
    _min?: CaseMinOrderByAggregateInput
    _sum?: CaseSumOrderByAggregateInput
  }

  export type CaseScalarWhereWithAggregatesInput = {
    AND?: CaseScalarWhereWithAggregatesInput | CaseScalarWhereWithAggregatesInput[]
    OR?: CaseScalarWhereWithAggregatesInput[]
    NOT?: CaseScalarWhereWithAggregatesInput | CaseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Case"> | string
    title?: StringWithAggregatesFilter<"Case"> | string
    description?: StringNullableWithAggregatesFilter<"Case"> | string | null
    status?: EnumCaseStatusWithAggregatesFilter<"Case"> | $Enums.CaseStatus
    priority?: EnumCasePriorityWithAggregatesFilter<"Case"> | $Enums.CasePriority
    clientName?: StringNullableWithAggregatesFilter<"Case"> | string | null
    clientEmail?: StringNullableWithAggregatesFilter<"Case"> | string | null
    clientPhone?: StringNullableWithAggregatesFilter<"Case"> | string | null
    dueDate?: DateTimeNullableWithAggregatesFilter<"Case"> | Date | string | null
    tags?: StringNullableListFilter<"Case">
    notes?: StringNullableWithAggregatesFilter<"Case"> | string | null
    progress?: IntWithAggregatesFilter<"Case"> | number
    estimatedHours?: FloatNullableWithAggregatesFilter<"Case"> | number | null
    actualHours?: FloatWithAggregatesFilter<"Case"> | number
    hourlyRate?: FloatNullableWithAggregatesFilter<"Case"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Case"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Case"> | Date | string
    assignedToId?: StringNullableWithAggregatesFilter<"Case"> | string | null
    createdById?: StringNullableWithAggregatesFilter<"Case"> | string | null
  }

  export type FileWhereInput = {
    AND?: FileWhereInput | FileWhereInput[]
    OR?: FileWhereInput[]
    NOT?: FileWhereInput | FileWhereInput[]
    id?: StringFilter<"File"> | string
    originalName?: StringFilter<"File"> | string
    fileName?: StringFilter<"File"> | string
    fileSize?: IntFilter<"File"> | number
    mimeType?: StringFilter<"File"> | string
    filePath?: StringFilter<"File"> | string
    uploadedAt?: DateTimeFilter<"File"> | Date | string
    caseId?: StringFilter<"File"> | string
    uploadedById?: StringFilter<"File"> | string
    case?: XOR<CaseScalarRelationFilter, CaseWhereInput>
    uploadedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type FileOrderByWithRelationInput = {
    id?: SortOrder
    originalName?: SortOrder
    fileName?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    filePath?: SortOrder
    uploadedAt?: SortOrder
    caseId?: SortOrder
    uploadedById?: SortOrder
    case?: CaseOrderByWithRelationInput
    uploadedBy?: UserOrderByWithRelationInput
  }

  export type FileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    fileName?: string
    AND?: FileWhereInput | FileWhereInput[]
    OR?: FileWhereInput[]
    NOT?: FileWhereInput | FileWhereInput[]
    originalName?: StringFilter<"File"> | string
    fileSize?: IntFilter<"File"> | number
    mimeType?: StringFilter<"File"> | string
    filePath?: StringFilter<"File"> | string
    uploadedAt?: DateTimeFilter<"File"> | Date | string
    caseId?: StringFilter<"File"> | string
    uploadedById?: StringFilter<"File"> | string
    case?: XOR<CaseScalarRelationFilter, CaseWhereInput>
    uploadedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "fileName">

  export type FileOrderByWithAggregationInput = {
    id?: SortOrder
    originalName?: SortOrder
    fileName?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    filePath?: SortOrder
    uploadedAt?: SortOrder
    caseId?: SortOrder
    uploadedById?: SortOrder
    _count?: FileCountOrderByAggregateInput
    _avg?: FileAvgOrderByAggregateInput
    _max?: FileMaxOrderByAggregateInput
    _min?: FileMinOrderByAggregateInput
    _sum?: FileSumOrderByAggregateInput
  }

  export type FileScalarWhereWithAggregatesInput = {
    AND?: FileScalarWhereWithAggregatesInput | FileScalarWhereWithAggregatesInput[]
    OR?: FileScalarWhereWithAggregatesInput[]
    NOT?: FileScalarWhereWithAggregatesInput | FileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"File"> | string
    originalName?: StringWithAggregatesFilter<"File"> | string
    fileName?: StringWithAggregatesFilter<"File"> | string
    fileSize?: IntWithAggregatesFilter<"File"> | number
    mimeType?: StringWithAggregatesFilter<"File"> | string
    filePath?: StringWithAggregatesFilter<"File"> | string
    uploadedAt?: DateTimeWithAggregatesFilter<"File"> | Date | string
    caseId?: StringWithAggregatesFilter<"File"> | string
    uploadedById?: StringWithAggregatesFilter<"File"> | string
  }

  export type ActivityWhereInput = {
    AND?: ActivityWhereInput | ActivityWhereInput[]
    OR?: ActivityWhereInput[]
    NOT?: ActivityWhereInput | ActivityWhereInput[]
    id?: StringFilter<"Activity"> | string
    type?: StringFilter<"Activity"> | string
    description?: StringFilter<"Activity"> | string
    metadata?: JsonNullableFilter<"Activity">
    createdAt?: DateTimeFilter<"Activity"> | Date | string
    userId?: StringNullableFilter<"Activity"> | string | null
    caseId?: StringNullableFilter<"Activity"> | string | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    case?: XOR<CaseNullableScalarRelationFilter, CaseWhereInput> | null
  }

  export type ActivityOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    description?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    userId?: SortOrderInput | SortOrder
    caseId?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    case?: CaseOrderByWithRelationInput
  }

  export type ActivityWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ActivityWhereInput | ActivityWhereInput[]
    OR?: ActivityWhereInput[]
    NOT?: ActivityWhereInput | ActivityWhereInput[]
    type?: StringFilter<"Activity"> | string
    description?: StringFilter<"Activity"> | string
    metadata?: JsonNullableFilter<"Activity">
    createdAt?: DateTimeFilter<"Activity"> | Date | string
    userId?: StringNullableFilter<"Activity"> | string | null
    caseId?: StringNullableFilter<"Activity"> | string | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    case?: XOR<CaseNullableScalarRelationFilter, CaseWhereInput> | null
  }, "id">

  export type ActivityOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    description?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    userId?: SortOrderInput | SortOrder
    caseId?: SortOrderInput | SortOrder
    _count?: ActivityCountOrderByAggregateInput
    _max?: ActivityMaxOrderByAggregateInput
    _min?: ActivityMinOrderByAggregateInput
  }

  export type ActivityScalarWhereWithAggregatesInput = {
    AND?: ActivityScalarWhereWithAggregatesInput | ActivityScalarWhereWithAggregatesInput[]
    OR?: ActivityScalarWhereWithAggregatesInput[]
    NOT?: ActivityScalarWhereWithAggregatesInput | ActivityScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Activity"> | string
    type?: StringWithAggregatesFilter<"Activity"> | string
    description?: StringWithAggregatesFilter<"Activity"> | string
    metadata?: JsonNullableWithAggregatesFilter<"Activity">
    createdAt?: DateTimeWithAggregatesFilter<"Activity"> | Date | string
    userId?: StringNullableWithAggregatesFilter<"Activity"> | string | null
    caseId?: StringNullableWithAggregatesFilter<"Activity"> | string | null
  }

  export type MilestoneWhereInput = {
    AND?: MilestoneWhereInput | MilestoneWhereInput[]
    OR?: MilestoneWhereInput[]
    NOT?: MilestoneWhereInput | MilestoneWhereInput[]
    id?: StringFilter<"Milestone"> | string
    title?: StringFilter<"Milestone"> | string
    description?: StringNullableFilter<"Milestone"> | string | null
    dueDate?: DateTimeNullableFilter<"Milestone"> | Date | string | null
    completed?: BoolFilter<"Milestone"> | boolean
    completedAt?: DateTimeNullableFilter<"Milestone"> | Date | string | null
    order?: IntFilter<"Milestone"> | number
    estimatedHours?: FloatNullableFilter<"Milestone"> | number | null
    createdAt?: DateTimeFilter<"Milestone"> | Date | string
    updatedAt?: DateTimeFilter<"Milestone"> | Date | string
    caseId?: StringFilter<"Milestone"> | string
    completedById?: StringNullableFilter<"Milestone"> | string | null
    assignedToId?: StringNullableFilter<"Milestone"> | string | null
    case?: XOR<CaseScalarRelationFilter, CaseWhereInput>
    completedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    assignedTo?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type MilestoneOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    dueDate?: SortOrderInput | SortOrder
    completed?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    order?: SortOrder
    estimatedHours?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    caseId?: SortOrder
    completedById?: SortOrderInput | SortOrder
    assignedToId?: SortOrderInput | SortOrder
    case?: CaseOrderByWithRelationInput
    completedBy?: UserOrderByWithRelationInput
    assignedTo?: UserOrderByWithRelationInput
  }

  export type MilestoneWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MilestoneWhereInput | MilestoneWhereInput[]
    OR?: MilestoneWhereInput[]
    NOT?: MilestoneWhereInput | MilestoneWhereInput[]
    title?: StringFilter<"Milestone"> | string
    description?: StringNullableFilter<"Milestone"> | string | null
    dueDate?: DateTimeNullableFilter<"Milestone"> | Date | string | null
    completed?: BoolFilter<"Milestone"> | boolean
    completedAt?: DateTimeNullableFilter<"Milestone"> | Date | string | null
    order?: IntFilter<"Milestone"> | number
    estimatedHours?: FloatNullableFilter<"Milestone"> | number | null
    createdAt?: DateTimeFilter<"Milestone"> | Date | string
    updatedAt?: DateTimeFilter<"Milestone"> | Date | string
    caseId?: StringFilter<"Milestone"> | string
    completedById?: StringNullableFilter<"Milestone"> | string | null
    assignedToId?: StringNullableFilter<"Milestone"> | string | null
    case?: XOR<CaseScalarRelationFilter, CaseWhereInput>
    completedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    assignedTo?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type MilestoneOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    dueDate?: SortOrderInput | SortOrder
    completed?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    order?: SortOrder
    estimatedHours?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    caseId?: SortOrder
    completedById?: SortOrderInput | SortOrder
    assignedToId?: SortOrderInput | SortOrder
    _count?: MilestoneCountOrderByAggregateInput
    _avg?: MilestoneAvgOrderByAggregateInput
    _max?: MilestoneMaxOrderByAggregateInput
    _min?: MilestoneMinOrderByAggregateInput
    _sum?: MilestoneSumOrderByAggregateInput
  }

  export type MilestoneScalarWhereWithAggregatesInput = {
    AND?: MilestoneScalarWhereWithAggregatesInput | MilestoneScalarWhereWithAggregatesInput[]
    OR?: MilestoneScalarWhereWithAggregatesInput[]
    NOT?: MilestoneScalarWhereWithAggregatesInput | MilestoneScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Milestone"> | string
    title?: StringWithAggregatesFilter<"Milestone"> | string
    description?: StringNullableWithAggregatesFilter<"Milestone"> | string | null
    dueDate?: DateTimeNullableWithAggregatesFilter<"Milestone"> | Date | string | null
    completed?: BoolWithAggregatesFilter<"Milestone"> | boolean
    completedAt?: DateTimeNullableWithAggregatesFilter<"Milestone"> | Date | string | null
    order?: IntWithAggregatesFilter<"Milestone"> | number
    estimatedHours?: FloatNullableWithAggregatesFilter<"Milestone"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Milestone"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Milestone"> | Date | string
    caseId?: StringWithAggregatesFilter<"Milestone"> | string
    completedById?: StringNullableWithAggregatesFilter<"Milestone"> | string | null
    assignedToId?: StringNullableWithAggregatesFilter<"Milestone"> | string | null
  }

  export type CommentWhereInput = {
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    id?: StringFilter<"Comment"> | string
    content?: StringFilter<"Comment"> | string
    isInternal?: BoolFilter<"Comment"> | boolean
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    caseId?: StringFilter<"Comment"> | string
    authorId?: StringFilter<"Comment"> | string
    case?: XOR<CaseScalarRelationFilter, CaseWhereInput>
    author?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type CommentOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    isInternal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    caseId?: SortOrder
    authorId?: SortOrder
    case?: CaseOrderByWithRelationInput
    author?: UserOrderByWithRelationInput
  }

  export type CommentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    content?: StringFilter<"Comment"> | string
    isInternal?: BoolFilter<"Comment"> | boolean
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    caseId?: StringFilter<"Comment"> | string
    authorId?: StringFilter<"Comment"> | string
    case?: XOR<CaseScalarRelationFilter, CaseWhereInput>
    author?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type CommentOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    isInternal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    caseId?: SortOrder
    authorId?: SortOrder
    _count?: CommentCountOrderByAggregateInput
    _max?: CommentMaxOrderByAggregateInput
    _min?: CommentMinOrderByAggregateInput
  }

  export type CommentScalarWhereWithAggregatesInput = {
    AND?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    OR?: CommentScalarWhereWithAggregatesInput[]
    NOT?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Comment"> | string
    content?: StringWithAggregatesFilter<"Comment"> | string
    isInternal?: BoolWithAggregatesFilter<"Comment"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
    caseId?: StringWithAggregatesFilter<"Comment"> | string
    authorId?: StringWithAggregatesFilter<"Comment"> | string
  }

  export type TimeEntryWhereInput = {
    AND?: TimeEntryWhereInput | TimeEntryWhereInput[]
    OR?: TimeEntryWhereInput[]
    NOT?: TimeEntryWhereInput | TimeEntryWhereInput[]
    id?: StringFilter<"TimeEntry"> | string
    description?: StringNullableFilter<"TimeEntry"> | string | null
    hours?: FloatFilter<"TimeEntry"> | number
    date?: DateTimeFilter<"TimeEntry"> | Date | string
    billable?: BoolFilter<"TimeEntry"> | boolean
    hourlyRate?: FloatNullableFilter<"TimeEntry"> | number | null
    amount?: FloatNullableFilter<"TimeEntry"> | number | null
    createdAt?: DateTimeFilter<"TimeEntry"> | Date | string
    updatedAt?: DateTimeFilter<"TimeEntry"> | Date | string
    caseId?: StringFilter<"TimeEntry"> | string
    userId?: StringFilter<"TimeEntry"> | string
    case?: XOR<CaseScalarRelationFilter, CaseWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type TimeEntryOrderByWithRelationInput = {
    id?: SortOrder
    description?: SortOrderInput | SortOrder
    hours?: SortOrder
    date?: SortOrder
    billable?: SortOrder
    hourlyRate?: SortOrderInput | SortOrder
    amount?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    caseId?: SortOrder
    userId?: SortOrder
    case?: CaseOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type TimeEntryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TimeEntryWhereInput | TimeEntryWhereInput[]
    OR?: TimeEntryWhereInput[]
    NOT?: TimeEntryWhereInput | TimeEntryWhereInput[]
    description?: StringNullableFilter<"TimeEntry"> | string | null
    hours?: FloatFilter<"TimeEntry"> | number
    date?: DateTimeFilter<"TimeEntry"> | Date | string
    billable?: BoolFilter<"TimeEntry"> | boolean
    hourlyRate?: FloatNullableFilter<"TimeEntry"> | number | null
    amount?: FloatNullableFilter<"TimeEntry"> | number | null
    createdAt?: DateTimeFilter<"TimeEntry"> | Date | string
    updatedAt?: DateTimeFilter<"TimeEntry"> | Date | string
    caseId?: StringFilter<"TimeEntry"> | string
    userId?: StringFilter<"TimeEntry"> | string
    case?: XOR<CaseScalarRelationFilter, CaseWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type TimeEntryOrderByWithAggregationInput = {
    id?: SortOrder
    description?: SortOrderInput | SortOrder
    hours?: SortOrder
    date?: SortOrder
    billable?: SortOrder
    hourlyRate?: SortOrderInput | SortOrder
    amount?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    caseId?: SortOrder
    userId?: SortOrder
    _count?: TimeEntryCountOrderByAggregateInput
    _avg?: TimeEntryAvgOrderByAggregateInput
    _max?: TimeEntryMaxOrderByAggregateInput
    _min?: TimeEntryMinOrderByAggregateInput
    _sum?: TimeEntrySumOrderByAggregateInput
  }

  export type TimeEntryScalarWhereWithAggregatesInput = {
    AND?: TimeEntryScalarWhereWithAggregatesInput | TimeEntryScalarWhereWithAggregatesInput[]
    OR?: TimeEntryScalarWhereWithAggregatesInput[]
    NOT?: TimeEntryScalarWhereWithAggregatesInput | TimeEntryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TimeEntry"> | string
    description?: StringNullableWithAggregatesFilter<"TimeEntry"> | string | null
    hours?: FloatWithAggregatesFilter<"TimeEntry"> | number
    date?: DateTimeWithAggregatesFilter<"TimeEntry"> | Date | string
    billable?: BoolWithAggregatesFilter<"TimeEntry"> | boolean
    hourlyRate?: FloatNullableWithAggregatesFilter<"TimeEntry"> | number | null
    amount?: FloatNullableWithAggregatesFilter<"TimeEntry"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"TimeEntry"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TimeEntry"> | Date | string
    caseId?: StringWithAggregatesFilter<"TimeEntry"> | string
    userId?: StringWithAggregatesFilter<"TimeEntry"> | string
  }

  export type LegalReferenceWhereInput = {
    AND?: LegalReferenceWhereInput | LegalReferenceWhereInput[]
    OR?: LegalReferenceWhereInput[]
    NOT?: LegalReferenceWhereInput | LegalReferenceWhereInput[]
    id?: StringFilter<"LegalReference"> | string
    type?: StringFilter<"LegalReference"> | string
    title?: StringFilter<"LegalReference"> | string
    citation?: StringFilter<"LegalReference"> | string
    url?: StringNullableFilter<"LegalReference"> | string | null
    summary?: StringNullableFilter<"LegalReference"> | string | null
    relevance?: StringNullableFilter<"LegalReference"> | string | null
    createdAt?: DateTimeFilter<"LegalReference"> | Date | string
    caseId?: StringFilter<"LegalReference"> | string
    addedById?: StringNullableFilter<"LegalReference"> | string | null
    case?: XOR<CaseScalarRelationFilter, CaseWhereInput>
    addedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type LegalReferenceOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    citation?: SortOrder
    url?: SortOrderInput | SortOrder
    summary?: SortOrderInput | SortOrder
    relevance?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    caseId?: SortOrder
    addedById?: SortOrderInput | SortOrder
    case?: CaseOrderByWithRelationInput
    addedBy?: UserOrderByWithRelationInput
  }

  export type LegalReferenceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LegalReferenceWhereInput | LegalReferenceWhereInput[]
    OR?: LegalReferenceWhereInput[]
    NOT?: LegalReferenceWhereInput | LegalReferenceWhereInput[]
    type?: StringFilter<"LegalReference"> | string
    title?: StringFilter<"LegalReference"> | string
    citation?: StringFilter<"LegalReference"> | string
    url?: StringNullableFilter<"LegalReference"> | string | null
    summary?: StringNullableFilter<"LegalReference"> | string | null
    relevance?: StringNullableFilter<"LegalReference"> | string | null
    createdAt?: DateTimeFilter<"LegalReference"> | Date | string
    caseId?: StringFilter<"LegalReference"> | string
    addedById?: StringNullableFilter<"LegalReference"> | string | null
    case?: XOR<CaseScalarRelationFilter, CaseWhereInput>
    addedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type LegalReferenceOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    citation?: SortOrder
    url?: SortOrderInput | SortOrder
    summary?: SortOrderInput | SortOrder
    relevance?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    caseId?: SortOrder
    addedById?: SortOrderInput | SortOrder
    _count?: LegalReferenceCountOrderByAggregateInput
    _max?: LegalReferenceMaxOrderByAggregateInput
    _min?: LegalReferenceMinOrderByAggregateInput
  }

  export type LegalReferenceScalarWhereWithAggregatesInput = {
    AND?: LegalReferenceScalarWhereWithAggregatesInput | LegalReferenceScalarWhereWithAggregatesInput[]
    OR?: LegalReferenceScalarWhereWithAggregatesInput[]
    NOT?: LegalReferenceScalarWhereWithAggregatesInput | LegalReferenceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LegalReference"> | string
    type?: StringWithAggregatesFilter<"LegalReference"> | string
    title?: StringWithAggregatesFilter<"LegalReference"> | string
    citation?: StringWithAggregatesFilter<"LegalReference"> | string
    url?: StringNullableWithAggregatesFilter<"LegalReference"> | string | null
    summary?: StringNullableWithAggregatesFilter<"LegalReference"> | string | null
    relevance?: StringNullableWithAggregatesFilter<"LegalReference"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"LegalReference"> | Date | string
    caseId?: StringWithAggregatesFilter<"LegalReference"> | string
    addedById?: StringNullableWithAggregatesFilter<"LegalReference"> | string | null
  }

  export type WorkflowStepWhereInput = {
    AND?: WorkflowStepWhereInput | WorkflowStepWhereInput[]
    OR?: WorkflowStepWhereInput[]
    NOT?: WorkflowStepWhereInput | WorkflowStepWhereInput[]
    id?: StringFilter<"WorkflowStep"> | string
    title?: StringFilter<"WorkflowStep"> | string
    description?: StringNullableFilter<"WorkflowStep"> | string | null
    order?: IntFilter<"WorkflowStep"> | number
    completed?: BoolFilter<"WorkflowStep"> | boolean
    completedAt?: DateTimeNullableFilter<"WorkflowStep"> | Date | string | null
    dueDate?: DateTimeNullableFilter<"WorkflowStep"> | Date | string | null
    assignedToId?: StringNullableFilter<"WorkflowStep"> | string | null
    dependencies?: StringNullableListFilter<"WorkflowStep">
    estimatedHours?: FloatNullableFilter<"WorkflowStep"> | number | null
    actualHours?: FloatFilter<"WorkflowStep"> | number
    createdAt?: DateTimeFilter<"WorkflowStep"> | Date | string
    updatedAt?: DateTimeFilter<"WorkflowStep"> | Date | string
    caseId?: StringFilter<"WorkflowStep"> | string
    assignedTo?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    case?: XOR<CaseScalarRelationFilter, CaseWhereInput>
  }

  export type WorkflowStepOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    order?: SortOrder
    completed?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    dueDate?: SortOrderInput | SortOrder
    assignedToId?: SortOrderInput | SortOrder
    dependencies?: SortOrder
    estimatedHours?: SortOrderInput | SortOrder
    actualHours?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    caseId?: SortOrder
    assignedTo?: UserOrderByWithRelationInput
    case?: CaseOrderByWithRelationInput
  }

  export type WorkflowStepWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WorkflowStepWhereInput | WorkflowStepWhereInput[]
    OR?: WorkflowStepWhereInput[]
    NOT?: WorkflowStepWhereInput | WorkflowStepWhereInput[]
    title?: StringFilter<"WorkflowStep"> | string
    description?: StringNullableFilter<"WorkflowStep"> | string | null
    order?: IntFilter<"WorkflowStep"> | number
    completed?: BoolFilter<"WorkflowStep"> | boolean
    completedAt?: DateTimeNullableFilter<"WorkflowStep"> | Date | string | null
    dueDate?: DateTimeNullableFilter<"WorkflowStep"> | Date | string | null
    assignedToId?: StringNullableFilter<"WorkflowStep"> | string | null
    dependencies?: StringNullableListFilter<"WorkflowStep">
    estimatedHours?: FloatNullableFilter<"WorkflowStep"> | number | null
    actualHours?: FloatFilter<"WorkflowStep"> | number
    createdAt?: DateTimeFilter<"WorkflowStep"> | Date | string
    updatedAt?: DateTimeFilter<"WorkflowStep"> | Date | string
    caseId?: StringFilter<"WorkflowStep"> | string
    assignedTo?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    case?: XOR<CaseScalarRelationFilter, CaseWhereInput>
  }, "id">

  export type WorkflowStepOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    order?: SortOrder
    completed?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    dueDate?: SortOrderInput | SortOrder
    assignedToId?: SortOrderInput | SortOrder
    dependencies?: SortOrder
    estimatedHours?: SortOrderInput | SortOrder
    actualHours?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    caseId?: SortOrder
    _count?: WorkflowStepCountOrderByAggregateInput
    _avg?: WorkflowStepAvgOrderByAggregateInput
    _max?: WorkflowStepMaxOrderByAggregateInput
    _min?: WorkflowStepMinOrderByAggregateInput
    _sum?: WorkflowStepSumOrderByAggregateInput
  }

  export type WorkflowStepScalarWhereWithAggregatesInput = {
    AND?: WorkflowStepScalarWhereWithAggregatesInput | WorkflowStepScalarWhereWithAggregatesInput[]
    OR?: WorkflowStepScalarWhereWithAggregatesInput[]
    NOT?: WorkflowStepScalarWhereWithAggregatesInput | WorkflowStepScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WorkflowStep"> | string
    title?: StringWithAggregatesFilter<"WorkflowStep"> | string
    description?: StringNullableWithAggregatesFilter<"WorkflowStep"> | string | null
    order?: IntWithAggregatesFilter<"WorkflowStep"> | number
    completed?: BoolWithAggregatesFilter<"WorkflowStep"> | boolean
    completedAt?: DateTimeNullableWithAggregatesFilter<"WorkflowStep"> | Date | string | null
    dueDate?: DateTimeNullableWithAggregatesFilter<"WorkflowStep"> | Date | string | null
    assignedToId?: StringNullableWithAggregatesFilter<"WorkflowStep"> | string | null
    dependencies?: StringNullableListFilter<"WorkflowStep">
    estimatedHours?: FloatNullableWithAggregatesFilter<"WorkflowStep"> | number | null
    actualHours?: FloatWithAggregatesFilter<"WorkflowStep"> | number
    createdAt?: DateTimeWithAggregatesFilter<"WorkflowStep"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"WorkflowStep"> | Date | string
    caseId?: StringWithAggregatesFilter<"WorkflowStep"> | string
  }

  export type DocumentTypeWhereInput = {
    AND?: DocumentTypeWhereInput | DocumentTypeWhereInput[]
    OR?: DocumentTypeWhereInput[]
    NOT?: DocumentTypeWhereInput | DocumentTypeWhereInput[]
    id?: StringFilter<"DocumentType"> | string
    name?: StringFilter<"DocumentType"> | string
    description?: StringNullableFilter<"DocumentType"> | string | null
    icon?: StringNullableFilter<"DocumentType"> | string | null
    required?: BoolFilter<"DocumentType"> | boolean
    category?: StringNullableFilter<"DocumentType"> | string | null
    template?: StringNullableFilter<"DocumentType"> | string | null
    order?: IntFilter<"DocumentType"> | number
    createdAt?: DateTimeFilter<"DocumentType"> | Date | string
    caseId?: StringFilter<"DocumentType"> | string
    case?: XOR<CaseScalarRelationFilter, CaseWhereInput>
  }

  export type DocumentTypeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    icon?: SortOrderInput | SortOrder
    required?: SortOrder
    category?: SortOrderInput | SortOrder
    template?: SortOrderInput | SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    caseId?: SortOrder
    case?: CaseOrderByWithRelationInput
  }

  export type DocumentTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DocumentTypeWhereInput | DocumentTypeWhereInput[]
    OR?: DocumentTypeWhereInput[]
    NOT?: DocumentTypeWhereInput | DocumentTypeWhereInput[]
    name?: StringFilter<"DocumentType"> | string
    description?: StringNullableFilter<"DocumentType"> | string | null
    icon?: StringNullableFilter<"DocumentType"> | string | null
    required?: BoolFilter<"DocumentType"> | boolean
    category?: StringNullableFilter<"DocumentType"> | string | null
    template?: StringNullableFilter<"DocumentType"> | string | null
    order?: IntFilter<"DocumentType"> | number
    createdAt?: DateTimeFilter<"DocumentType"> | Date | string
    caseId?: StringFilter<"DocumentType"> | string
    case?: XOR<CaseScalarRelationFilter, CaseWhereInput>
  }, "id">

  export type DocumentTypeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    icon?: SortOrderInput | SortOrder
    required?: SortOrder
    category?: SortOrderInput | SortOrder
    template?: SortOrderInput | SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    caseId?: SortOrder
    _count?: DocumentTypeCountOrderByAggregateInput
    _avg?: DocumentTypeAvgOrderByAggregateInput
    _max?: DocumentTypeMaxOrderByAggregateInput
    _min?: DocumentTypeMinOrderByAggregateInput
    _sum?: DocumentTypeSumOrderByAggregateInput
  }

  export type DocumentTypeScalarWhereWithAggregatesInput = {
    AND?: DocumentTypeScalarWhereWithAggregatesInput | DocumentTypeScalarWhereWithAggregatesInput[]
    OR?: DocumentTypeScalarWhereWithAggregatesInput[]
    NOT?: DocumentTypeScalarWhereWithAggregatesInput | DocumentTypeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DocumentType"> | string
    name?: StringWithAggregatesFilter<"DocumentType"> | string
    description?: StringNullableWithAggregatesFilter<"DocumentType"> | string | null
    icon?: StringNullableWithAggregatesFilter<"DocumentType"> | string | null
    required?: BoolWithAggregatesFilter<"DocumentType"> | boolean
    category?: StringNullableWithAggregatesFilter<"DocumentType"> | string | null
    template?: StringNullableWithAggregatesFilter<"DocumentType"> | string | null
    order?: IntWithAggregatesFilter<"DocumentType"> | number
    createdAt?: DateTimeWithAggregatesFilter<"DocumentType"> | Date | string
    caseId?: StringWithAggregatesFilter<"DocumentType"> | string
  }

  export type LegalStatuteWhereInput = {
    AND?: LegalStatuteWhereInput | LegalStatuteWhereInput[]
    OR?: LegalStatuteWhereInput[]
    NOT?: LegalStatuteWhereInput | LegalStatuteWhereInput[]
    id?: StringFilter<"LegalStatute"> | string
    title?: StringFilter<"LegalStatute"> | string
    chapter?: StringNullableFilter<"LegalStatute"> | string | null
    section?: StringNullableFilter<"LegalStatute"> | string | null
    subsection?: StringNullableFilter<"LegalStatute"> | string | null
    description?: StringNullableFilter<"LegalStatute"> | string | null
    url?: StringNullableFilter<"LegalStatute"> | string | null
    notes?: StringNullableFilter<"LegalStatute"> | string | null
    priority?: StringFilter<"LegalStatute"> | string
    status?: StringFilter<"LegalStatute"> | string
    createdAt?: DateTimeFilter<"LegalStatute"> | Date | string
    updatedAt?: DateTimeFilter<"LegalStatute"> | Date | string
    caseId?: StringFilter<"LegalStatute"> | string
    addedById?: StringNullableFilter<"LegalStatute"> | string | null
    case?: XOR<CaseScalarRelationFilter, CaseWhereInput>
    addedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type LegalStatuteOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    chapter?: SortOrderInput | SortOrder
    section?: SortOrderInput | SortOrder
    subsection?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    url?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    priority?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    caseId?: SortOrder
    addedById?: SortOrderInput | SortOrder
    case?: CaseOrderByWithRelationInput
    addedBy?: UserOrderByWithRelationInput
  }

  export type LegalStatuteWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LegalStatuteWhereInput | LegalStatuteWhereInput[]
    OR?: LegalStatuteWhereInput[]
    NOT?: LegalStatuteWhereInput | LegalStatuteWhereInput[]
    title?: StringFilter<"LegalStatute"> | string
    chapter?: StringNullableFilter<"LegalStatute"> | string | null
    section?: StringNullableFilter<"LegalStatute"> | string | null
    subsection?: StringNullableFilter<"LegalStatute"> | string | null
    description?: StringNullableFilter<"LegalStatute"> | string | null
    url?: StringNullableFilter<"LegalStatute"> | string | null
    notes?: StringNullableFilter<"LegalStatute"> | string | null
    priority?: StringFilter<"LegalStatute"> | string
    status?: StringFilter<"LegalStatute"> | string
    createdAt?: DateTimeFilter<"LegalStatute"> | Date | string
    updatedAt?: DateTimeFilter<"LegalStatute"> | Date | string
    caseId?: StringFilter<"LegalStatute"> | string
    addedById?: StringNullableFilter<"LegalStatute"> | string | null
    case?: XOR<CaseScalarRelationFilter, CaseWhereInput>
    addedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type LegalStatuteOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    chapter?: SortOrderInput | SortOrder
    section?: SortOrderInput | SortOrder
    subsection?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    url?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    priority?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    caseId?: SortOrder
    addedById?: SortOrderInput | SortOrder
    _count?: LegalStatuteCountOrderByAggregateInput
    _max?: LegalStatuteMaxOrderByAggregateInput
    _min?: LegalStatuteMinOrderByAggregateInput
  }

  export type LegalStatuteScalarWhereWithAggregatesInput = {
    AND?: LegalStatuteScalarWhereWithAggregatesInput | LegalStatuteScalarWhereWithAggregatesInput[]
    OR?: LegalStatuteScalarWhereWithAggregatesInput[]
    NOT?: LegalStatuteScalarWhereWithAggregatesInput | LegalStatuteScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LegalStatute"> | string
    title?: StringWithAggregatesFilter<"LegalStatute"> | string
    chapter?: StringNullableWithAggregatesFilter<"LegalStatute"> | string | null
    section?: StringNullableWithAggregatesFilter<"LegalStatute"> | string | null
    subsection?: StringNullableWithAggregatesFilter<"LegalStatute"> | string | null
    description?: StringNullableWithAggregatesFilter<"LegalStatute"> | string | null
    url?: StringNullableWithAggregatesFilter<"LegalStatute"> | string | null
    notes?: StringNullableWithAggregatesFilter<"LegalStatute"> | string | null
    priority?: StringWithAggregatesFilter<"LegalStatute"> | string
    status?: StringWithAggregatesFilter<"LegalStatute"> | string
    createdAt?: DateTimeWithAggregatesFilter<"LegalStatute"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"LegalStatute"> | Date | string
    caseId?: StringWithAggregatesFilter<"LegalStatute"> | string
    addedById?: StringNullableWithAggregatesFilter<"LegalStatute"> | string | null
  }

  export type CourtDecisionWhereInput = {
    AND?: CourtDecisionWhereInput | CourtDecisionWhereInput[]
    OR?: CourtDecisionWhereInput[]
    NOT?: CourtDecisionWhereInput | CourtDecisionWhereInput[]
    id?: StringFilter<"CourtDecision"> | string
    title?: StringFilter<"CourtDecision"> | string
    court?: StringFilter<"CourtDecision"> | string
    caseNumber?: StringNullableFilter<"CourtDecision"> | string | null
    date?: DateTimeNullableFilter<"CourtDecision"> | Date | string | null
    summary?: StringNullableFilter<"CourtDecision"> | string | null
    url?: StringNullableFilter<"CourtDecision"> | string | null
    relevance?: StringNullableFilter<"CourtDecision"> | string | null
    precedent?: BoolFilter<"CourtDecision"> | boolean
    outcome?: StringNullableFilter<"CourtDecision"> | string | null
    notes?: StringNullableFilter<"CourtDecision"> | string | null
    createdAt?: DateTimeFilter<"CourtDecision"> | Date | string
    updatedAt?: DateTimeFilter<"CourtDecision"> | Date | string
    caseId?: StringFilter<"CourtDecision"> | string
    addedById?: StringNullableFilter<"CourtDecision"> | string | null
    case?: XOR<CaseScalarRelationFilter, CaseWhereInput>
    addedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type CourtDecisionOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    court?: SortOrder
    caseNumber?: SortOrderInput | SortOrder
    date?: SortOrderInput | SortOrder
    summary?: SortOrderInput | SortOrder
    url?: SortOrderInput | SortOrder
    relevance?: SortOrderInput | SortOrder
    precedent?: SortOrder
    outcome?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    caseId?: SortOrder
    addedById?: SortOrderInput | SortOrder
    case?: CaseOrderByWithRelationInput
    addedBy?: UserOrderByWithRelationInput
  }

  export type CourtDecisionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CourtDecisionWhereInput | CourtDecisionWhereInput[]
    OR?: CourtDecisionWhereInput[]
    NOT?: CourtDecisionWhereInput | CourtDecisionWhereInput[]
    title?: StringFilter<"CourtDecision"> | string
    court?: StringFilter<"CourtDecision"> | string
    caseNumber?: StringNullableFilter<"CourtDecision"> | string | null
    date?: DateTimeNullableFilter<"CourtDecision"> | Date | string | null
    summary?: StringNullableFilter<"CourtDecision"> | string | null
    url?: StringNullableFilter<"CourtDecision"> | string | null
    relevance?: StringNullableFilter<"CourtDecision"> | string | null
    precedent?: BoolFilter<"CourtDecision"> | boolean
    outcome?: StringNullableFilter<"CourtDecision"> | string | null
    notes?: StringNullableFilter<"CourtDecision"> | string | null
    createdAt?: DateTimeFilter<"CourtDecision"> | Date | string
    updatedAt?: DateTimeFilter<"CourtDecision"> | Date | string
    caseId?: StringFilter<"CourtDecision"> | string
    addedById?: StringNullableFilter<"CourtDecision"> | string | null
    case?: XOR<CaseScalarRelationFilter, CaseWhereInput>
    addedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type CourtDecisionOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    court?: SortOrder
    caseNumber?: SortOrderInput | SortOrder
    date?: SortOrderInput | SortOrder
    summary?: SortOrderInput | SortOrder
    url?: SortOrderInput | SortOrder
    relevance?: SortOrderInput | SortOrder
    precedent?: SortOrder
    outcome?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    caseId?: SortOrder
    addedById?: SortOrderInput | SortOrder
    _count?: CourtDecisionCountOrderByAggregateInput
    _max?: CourtDecisionMaxOrderByAggregateInput
    _min?: CourtDecisionMinOrderByAggregateInput
  }

  export type CourtDecisionScalarWhereWithAggregatesInput = {
    AND?: CourtDecisionScalarWhereWithAggregatesInput | CourtDecisionScalarWhereWithAggregatesInput[]
    OR?: CourtDecisionScalarWhereWithAggregatesInput[]
    NOT?: CourtDecisionScalarWhereWithAggregatesInput | CourtDecisionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CourtDecision"> | string
    title?: StringWithAggregatesFilter<"CourtDecision"> | string
    court?: StringWithAggregatesFilter<"CourtDecision"> | string
    caseNumber?: StringNullableWithAggregatesFilter<"CourtDecision"> | string | null
    date?: DateTimeNullableWithAggregatesFilter<"CourtDecision"> | Date | string | null
    summary?: StringNullableWithAggregatesFilter<"CourtDecision"> | string | null
    url?: StringNullableWithAggregatesFilter<"CourtDecision"> | string | null
    relevance?: StringNullableWithAggregatesFilter<"CourtDecision"> | string | null
    precedent?: BoolWithAggregatesFilter<"CourtDecision"> | boolean
    outcome?: StringNullableWithAggregatesFilter<"CourtDecision"> | string | null
    notes?: StringNullableWithAggregatesFilter<"CourtDecision"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"CourtDecision"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CourtDecision"> | Date | string
    caseId?: StringWithAggregatesFilter<"CourtDecision"> | string
    addedById?: StringNullableWithAggregatesFilter<"CourtDecision"> | string | null
  }

  export type AccountCreateInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    user: UserCreateNestedOneWithoutAccountsInput
  }

  export type AccountUncheckedCreateInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountCreateManyInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionCreateInput = {
    id?: string
    sessionToken: string
    expires: Date | string
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUncheckedCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateManyInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateManyMutationInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateManyInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    firstName?: string | null
    lastName?: string | null
    phone?: string | null
    position?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    assignedCases?: CaseCreateNestedManyWithoutAssignedToInput
    createdCases?: CaseCreateNestedManyWithoutCreatedByInput
    activities?: ActivityCreateNestedManyWithoutUserInput
    fileUploads?: FileCreateNestedManyWithoutUploadedByInput
    completedMilestones?: MilestoneCreateNestedManyWithoutCompletedByInput
    assignedMilestones?: MilestoneCreateNestedManyWithoutAssignedToInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    timeEntries?: TimeEntryCreateNestedManyWithoutUserInput
    legalRefs?: LegalReferenceCreateNestedManyWithoutAddedByInput
    workflowSteps?: WorkflowStepCreateNestedManyWithoutAssignedToInput
    legalStatutes?: LegalStatuteCreateNestedManyWithoutAddedByInput
    courtDecisions?: CourtDecisionCreateNestedManyWithoutAddedByInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    firstName?: string | null
    lastName?: string | null
    phone?: string | null
    position?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    assignedCases?: CaseUncheckedCreateNestedManyWithoutAssignedToInput
    createdCases?: CaseUncheckedCreateNestedManyWithoutCreatedByInput
    activities?: ActivityUncheckedCreateNestedManyWithoutUserInput
    fileUploads?: FileUncheckedCreateNestedManyWithoutUploadedByInput
    completedMilestones?: MilestoneUncheckedCreateNestedManyWithoutCompletedByInput
    assignedMilestones?: MilestoneUncheckedCreateNestedManyWithoutAssignedToInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    timeEntries?: TimeEntryUncheckedCreateNestedManyWithoutUserInput
    legalRefs?: LegalReferenceUncheckedCreateNestedManyWithoutAddedByInput
    workflowSteps?: WorkflowStepUncheckedCreateNestedManyWithoutAssignedToInput
    legalStatutes?: LegalStatuteUncheckedCreateNestedManyWithoutAddedByInput
    courtDecisions?: CourtDecisionUncheckedCreateNestedManyWithoutAddedByInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    assignedCases?: CaseUpdateManyWithoutAssignedToNestedInput
    createdCases?: CaseUpdateManyWithoutCreatedByNestedInput
    activities?: ActivityUpdateManyWithoutUserNestedInput
    fileUploads?: FileUpdateManyWithoutUploadedByNestedInput
    completedMilestones?: MilestoneUpdateManyWithoutCompletedByNestedInput
    assignedMilestones?: MilestoneUpdateManyWithoutAssignedToNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    timeEntries?: TimeEntryUpdateManyWithoutUserNestedInput
    legalRefs?: LegalReferenceUpdateManyWithoutAddedByNestedInput
    workflowSteps?: WorkflowStepUpdateManyWithoutAssignedToNestedInput
    legalStatutes?: LegalStatuteUpdateManyWithoutAddedByNestedInput
    courtDecisions?: CourtDecisionUpdateManyWithoutAddedByNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    assignedCases?: CaseUncheckedUpdateManyWithoutAssignedToNestedInput
    createdCases?: CaseUncheckedUpdateManyWithoutCreatedByNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    fileUploads?: FileUncheckedUpdateManyWithoutUploadedByNestedInput
    completedMilestones?: MilestoneUncheckedUpdateManyWithoutCompletedByNestedInput
    assignedMilestones?: MilestoneUncheckedUpdateManyWithoutAssignedToNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    timeEntries?: TimeEntryUncheckedUpdateManyWithoutUserNestedInput
    legalRefs?: LegalReferenceUncheckedUpdateManyWithoutAddedByNestedInput
    workflowSteps?: WorkflowStepUncheckedUpdateManyWithoutAssignedToNestedInput
    legalStatutes?: LegalStatuteUncheckedUpdateManyWithoutAddedByNestedInput
    courtDecisions?: CourtDecisionUncheckedUpdateManyWithoutAddedByNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    firstName?: string | null
    lastName?: string | null
    phone?: string | null
    position?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseCreateInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    priority?: $Enums.CasePriority
    clientName?: string | null
    clientEmail?: string | null
    clientPhone?: string | null
    dueDate?: Date | string | null
    tags?: CaseCreatetagsInput | string[]
    notes?: string | null
    progress?: number
    estimatedHours?: number | null
    actualHours?: number
    hourlyRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedTo?: UserCreateNestedOneWithoutAssignedCasesInput
    createdBy?: UserCreateNestedOneWithoutCreatedCasesInput
    files?: FileCreateNestedManyWithoutCaseInput
    activities?: ActivityCreateNestedManyWithoutCaseInput
    milestones?: MilestoneCreateNestedManyWithoutCaseInput
    comments?: CommentCreateNestedManyWithoutCaseInput
    timeEntries?: TimeEntryCreateNestedManyWithoutCaseInput
    legalRefs?: LegalReferenceCreateNestedManyWithoutCaseInput
    workflowSteps?: WorkflowStepCreateNestedManyWithoutCaseInput
    documentTypes?: DocumentTypeCreateNestedManyWithoutCaseInput
    legalStatutes?: LegalStatuteCreateNestedManyWithoutCaseInput
    courtDecisions?: CourtDecisionCreateNestedManyWithoutCaseInput
  }

  export type CaseUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    priority?: $Enums.CasePriority
    clientName?: string | null
    clientEmail?: string | null
    clientPhone?: string | null
    dueDate?: Date | string | null
    tags?: CaseCreatetagsInput | string[]
    notes?: string | null
    progress?: number
    estimatedHours?: number | null
    actualHours?: number
    hourlyRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedToId?: string | null
    createdById?: string | null
    files?: FileUncheckedCreateNestedManyWithoutCaseInput
    activities?: ActivityUncheckedCreateNestedManyWithoutCaseInput
    milestones?: MilestoneUncheckedCreateNestedManyWithoutCaseInput
    comments?: CommentUncheckedCreateNestedManyWithoutCaseInput
    timeEntries?: TimeEntryUncheckedCreateNestedManyWithoutCaseInput
    legalRefs?: LegalReferenceUncheckedCreateNestedManyWithoutCaseInput
    workflowSteps?: WorkflowStepUncheckedCreateNestedManyWithoutCaseInput
    documentTypes?: DocumentTypeUncheckedCreateNestedManyWithoutCaseInput
    legalStatutes?: LegalStatuteUncheckedCreateNestedManyWithoutCaseInput
    courtDecisions?: CourtDecisionUncheckedCreateNestedManyWithoutCaseInput
  }

  export type CaseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    priority?: EnumCasePriorityFieldUpdateOperationsInput | $Enums.CasePriority
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    clientEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientPhone?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tags?: CaseUpdatetagsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: IntFieldUpdateOperationsInput | number
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: FloatFieldUpdateOperationsInput | number
    hourlyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedTo?: UserUpdateOneWithoutAssignedCasesNestedInput
    createdBy?: UserUpdateOneWithoutCreatedCasesNestedInput
    files?: FileUpdateManyWithoutCaseNestedInput
    activities?: ActivityUpdateManyWithoutCaseNestedInput
    milestones?: MilestoneUpdateManyWithoutCaseNestedInput
    comments?: CommentUpdateManyWithoutCaseNestedInput
    timeEntries?: TimeEntryUpdateManyWithoutCaseNestedInput
    legalRefs?: LegalReferenceUpdateManyWithoutCaseNestedInput
    workflowSteps?: WorkflowStepUpdateManyWithoutCaseNestedInput
    documentTypes?: DocumentTypeUpdateManyWithoutCaseNestedInput
    legalStatutes?: LegalStatuteUpdateManyWithoutCaseNestedInput
    courtDecisions?: CourtDecisionUpdateManyWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    priority?: EnumCasePriorityFieldUpdateOperationsInput | $Enums.CasePriority
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    clientEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientPhone?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tags?: CaseUpdatetagsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: IntFieldUpdateOperationsInput | number
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: FloatFieldUpdateOperationsInput | number
    hourlyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    files?: FileUncheckedUpdateManyWithoutCaseNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutCaseNestedInput
    milestones?: MilestoneUncheckedUpdateManyWithoutCaseNestedInput
    comments?: CommentUncheckedUpdateManyWithoutCaseNestedInput
    timeEntries?: TimeEntryUncheckedUpdateManyWithoutCaseNestedInput
    legalRefs?: LegalReferenceUncheckedUpdateManyWithoutCaseNestedInput
    workflowSteps?: WorkflowStepUncheckedUpdateManyWithoutCaseNestedInput
    documentTypes?: DocumentTypeUncheckedUpdateManyWithoutCaseNestedInput
    legalStatutes?: LegalStatuteUncheckedUpdateManyWithoutCaseNestedInput
    courtDecisions?: CourtDecisionUncheckedUpdateManyWithoutCaseNestedInput
  }

  export type CaseCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    priority?: $Enums.CasePriority
    clientName?: string | null
    clientEmail?: string | null
    clientPhone?: string | null
    dueDate?: Date | string | null
    tags?: CaseCreatetagsInput | string[]
    notes?: string | null
    progress?: number
    estimatedHours?: number | null
    actualHours?: number
    hourlyRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedToId?: string | null
    createdById?: string | null
  }

  export type CaseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    priority?: EnumCasePriorityFieldUpdateOperationsInput | $Enums.CasePriority
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    clientEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientPhone?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tags?: CaseUpdatetagsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: IntFieldUpdateOperationsInput | number
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: FloatFieldUpdateOperationsInput | number
    hourlyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    priority?: EnumCasePriorityFieldUpdateOperationsInput | $Enums.CasePriority
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    clientEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientPhone?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tags?: CaseUpdatetagsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: IntFieldUpdateOperationsInput | number
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: FloatFieldUpdateOperationsInput | number
    hourlyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FileCreateInput = {
    id?: string
    originalName: string
    fileName: string
    fileSize: number
    mimeType: string
    filePath: string
    uploadedAt?: Date | string
    case: CaseCreateNestedOneWithoutFilesInput
    uploadedBy: UserCreateNestedOneWithoutFileUploadsInput
  }

  export type FileUncheckedCreateInput = {
    id?: string
    originalName: string
    fileName: string
    fileSize: number
    mimeType: string
    filePath: string
    uploadedAt?: Date | string
    caseId: string
    uploadedById: string
  }

  export type FileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: CaseUpdateOneRequiredWithoutFilesNestedInput
    uploadedBy?: UserUpdateOneRequiredWithoutFileUploadsNestedInput
  }

  export type FileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
    uploadedById?: StringFieldUpdateOperationsInput | string
  }

  export type FileCreateManyInput = {
    id?: string
    originalName: string
    fileName: string
    fileSize: number
    mimeType: string
    filePath: string
    uploadedAt?: Date | string
    caseId: string
    uploadedById: string
  }

  export type FileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
    uploadedById?: StringFieldUpdateOperationsInput | string
  }

  export type ActivityCreateInput = {
    id?: string
    type: string
    description: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutActivitiesInput
    case?: CaseCreateNestedOneWithoutActivitiesInput
  }

  export type ActivityUncheckedCreateInput = {
    id?: string
    type: string
    description: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    userId?: string | null
    caseId?: string | null
  }

  export type ActivityUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutActivitiesNestedInput
    case?: CaseUpdateOneWithoutActivitiesNestedInput
  }

  export type ActivityUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    caseId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ActivityCreateManyInput = {
    id?: string
    type: string
    description: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    userId?: string | null
    caseId?: string | null
  }

  export type ActivityUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    caseId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MilestoneCreateInput = {
    id?: string
    title: string
    description?: string | null
    dueDate?: Date | string | null
    completed?: boolean
    completedAt?: Date | string | null
    order?: number
    estimatedHours?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    case: CaseCreateNestedOneWithoutMilestonesInput
    completedBy?: UserCreateNestedOneWithoutCompletedMilestonesInput
    assignedTo?: UserCreateNestedOneWithoutAssignedMilestonesInput
  }

  export type MilestoneUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    dueDate?: Date | string | null
    completed?: boolean
    completedAt?: Date | string | null
    order?: number
    estimatedHours?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    caseId: string
    completedById?: string | null
    assignedToId?: string | null
  }

  export type MilestoneUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    order?: IntFieldUpdateOperationsInput | number
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: CaseUpdateOneRequiredWithoutMilestonesNestedInput
    completedBy?: UserUpdateOneWithoutCompletedMilestonesNestedInput
    assignedTo?: UserUpdateOneWithoutAssignedMilestonesNestedInput
  }

  export type MilestoneUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    order?: IntFieldUpdateOperationsInput | number
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
    completedById?: NullableStringFieldUpdateOperationsInput | string | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MilestoneCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    dueDate?: Date | string | null
    completed?: boolean
    completedAt?: Date | string | null
    order?: number
    estimatedHours?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    caseId: string
    completedById?: string | null
    assignedToId?: string | null
  }

  export type MilestoneUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    order?: IntFieldUpdateOperationsInput | number
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MilestoneUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    order?: IntFieldUpdateOperationsInput | number
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
    completedById?: NullableStringFieldUpdateOperationsInput | string | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommentCreateInput = {
    id?: string
    content: string
    isInternal?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    case: CaseCreateNestedOneWithoutCommentsInput
    author: UserCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateInput = {
    id?: string
    content: string
    isInternal?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    caseId: string
    authorId: string
  }

  export type CommentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isInternal?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: CaseUpdateOneRequiredWithoutCommentsNestedInput
    author?: UserUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isInternal?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentCreateManyInput = {
    id?: string
    content: string
    isInternal?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    caseId: string
    authorId: string
  }

  export type CommentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isInternal?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isInternal?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
  }

  export type TimeEntryCreateInput = {
    id?: string
    description?: string | null
    hours: number
    date: Date | string
    billable?: boolean
    hourlyRate?: number | null
    amount?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    case: CaseCreateNestedOneWithoutTimeEntriesInput
    user: UserCreateNestedOneWithoutTimeEntriesInput
  }

  export type TimeEntryUncheckedCreateInput = {
    id?: string
    description?: string | null
    hours: number
    date: Date | string
    billable?: boolean
    hourlyRate?: number | null
    amount?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    caseId: string
    userId: string
  }

  export type TimeEntryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    hours?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    billable?: BoolFieldUpdateOperationsInput | boolean
    hourlyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: CaseUpdateOneRequiredWithoutTimeEntriesNestedInput
    user?: UserUpdateOneRequiredWithoutTimeEntriesNestedInput
  }

  export type TimeEntryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    hours?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    billable?: BoolFieldUpdateOperationsInput | boolean
    hourlyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type TimeEntryCreateManyInput = {
    id?: string
    description?: string | null
    hours: number
    date: Date | string
    billable?: boolean
    hourlyRate?: number | null
    amount?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    caseId: string
    userId: string
  }

  export type TimeEntryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    hours?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    billable?: BoolFieldUpdateOperationsInput | boolean
    hourlyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TimeEntryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    hours?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    billable?: BoolFieldUpdateOperationsInput | boolean
    hourlyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type LegalReferenceCreateInput = {
    id?: string
    type: string
    title: string
    citation: string
    url?: string | null
    summary?: string | null
    relevance?: string | null
    createdAt?: Date | string
    case: CaseCreateNestedOneWithoutLegalRefsInput
    addedBy?: UserCreateNestedOneWithoutLegalRefsInput
  }

  export type LegalReferenceUncheckedCreateInput = {
    id?: string
    type: string
    title: string
    citation: string
    url?: string | null
    summary?: string | null
    relevance?: string | null
    createdAt?: Date | string
    caseId: string
    addedById?: string | null
  }

  export type LegalReferenceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    citation?: StringFieldUpdateOperationsInput | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    relevance?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: CaseUpdateOneRequiredWithoutLegalRefsNestedInput
    addedBy?: UserUpdateOneWithoutLegalRefsNestedInput
  }

  export type LegalReferenceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    citation?: StringFieldUpdateOperationsInput | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    relevance?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
    addedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LegalReferenceCreateManyInput = {
    id?: string
    type: string
    title: string
    citation: string
    url?: string | null
    summary?: string | null
    relevance?: string | null
    createdAt?: Date | string
    caseId: string
    addedById?: string | null
  }

  export type LegalReferenceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    citation?: StringFieldUpdateOperationsInput | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    relevance?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LegalReferenceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    citation?: StringFieldUpdateOperationsInput | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    relevance?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
    addedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WorkflowStepCreateInput = {
    id?: string
    title: string
    description?: string | null
    order: number
    completed?: boolean
    completedAt?: Date | string | null
    dueDate?: Date | string | null
    dependencies?: WorkflowStepCreatedependenciesInput | string[]
    estimatedHours?: number | null
    actualHours?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedTo?: UserCreateNestedOneWithoutWorkflowStepsInput
    case: CaseCreateNestedOneWithoutWorkflowStepsInput
  }

  export type WorkflowStepUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    order: number
    completed?: boolean
    completedAt?: Date | string | null
    dueDate?: Date | string | null
    assignedToId?: string | null
    dependencies?: WorkflowStepCreatedependenciesInput | string[]
    estimatedHours?: number | null
    actualHours?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    caseId: string
  }

  export type WorkflowStepUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    completed?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dependencies?: WorkflowStepUpdatedependenciesInput | string[]
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedTo?: UserUpdateOneWithoutWorkflowStepsNestedInput
    case?: CaseUpdateOneRequiredWithoutWorkflowStepsNestedInput
  }

  export type WorkflowStepUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    completed?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    dependencies?: WorkflowStepUpdatedependenciesInput | string[]
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
  }

  export type WorkflowStepCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    order: number
    completed?: boolean
    completedAt?: Date | string | null
    dueDate?: Date | string | null
    assignedToId?: string | null
    dependencies?: WorkflowStepCreatedependenciesInput | string[]
    estimatedHours?: number | null
    actualHours?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    caseId: string
  }

  export type WorkflowStepUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    completed?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dependencies?: WorkflowStepUpdatedependenciesInput | string[]
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkflowStepUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    completed?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    dependencies?: WorkflowStepUpdatedependenciesInput | string[]
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentTypeCreateInput = {
    id?: string
    name: string
    description?: string | null
    icon?: string | null
    required?: boolean
    category?: string | null
    template?: string | null
    order?: number
    createdAt?: Date | string
    case: CaseCreateNestedOneWithoutDocumentTypesInput
  }

  export type DocumentTypeUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    icon?: string | null
    required?: boolean
    category?: string | null
    template?: string | null
    order?: number
    createdAt?: Date | string
    caseId: string
  }

  export type DocumentTypeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    required?: BoolFieldUpdateOperationsInput | boolean
    category?: NullableStringFieldUpdateOperationsInput | string | null
    template?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: CaseUpdateOneRequiredWithoutDocumentTypesNestedInput
  }

  export type DocumentTypeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    required?: BoolFieldUpdateOperationsInput | boolean
    category?: NullableStringFieldUpdateOperationsInput | string | null
    template?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentTypeCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    icon?: string | null
    required?: boolean
    category?: string | null
    template?: string | null
    order?: number
    createdAt?: Date | string
    caseId: string
  }

  export type DocumentTypeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    required?: BoolFieldUpdateOperationsInput | boolean
    category?: NullableStringFieldUpdateOperationsInput | string | null
    template?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentTypeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    required?: BoolFieldUpdateOperationsInput | boolean
    category?: NullableStringFieldUpdateOperationsInput | string | null
    template?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
  }

  export type LegalStatuteCreateInput = {
    id?: string
    title: string
    chapter?: string | null
    section?: string | null
    subsection?: string | null
    description?: string | null
    url?: string | null
    notes?: string | null
    priority?: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    case: CaseCreateNestedOneWithoutLegalStatutesInput
    addedBy?: UserCreateNestedOneWithoutLegalStatutesInput
  }

  export type LegalStatuteUncheckedCreateInput = {
    id?: string
    title: string
    chapter?: string | null
    section?: string | null
    subsection?: string | null
    description?: string | null
    url?: string | null
    notes?: string | null
    priority?: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    caseId: string
    addedById?: string | null
  }

  export type LegalStatuteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    chapter?: NullableStringFieldUpdateOperationsInput | string | null
    section?: NullableStringFieldUpdateOperationsInput | string | null
    subsection?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: CaseUpdateOneRequiredWithoutLegalStatutesNestedInput
    addedBy?: UserUpdateOneWithoutLegalStatutesNestedInput
  }

  export type LegalStatuteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    chapter?: NullableStringFieldUpdateOperationsInput | string | null
    section?: NullableStringFieldUpdateOperationsInput | string | null
    subsection?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
    addedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LegalStatuteCreateManyInput = {
    id?: string
    title: string
    chapter?: string | null
    section?: string | null
    subsection?: string | null
    description?: string | null
    url?: string | null
    notes?: string | null
    priority?: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    caseId: string
    addedById?: string | null
  }

  export type LegalStatuteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    chapter?: NullableStringFieldUpdateOperationsInput | string | null
    section?: NullableStringFieldUpdateOperationsInput | string | null
    subsection?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LegalStatuteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    chapter?: NullableStringFieldUpdateOperationsInput | string | null
    section?: NullableStringFieldUpdateOperationsInput | string | null
    subsection?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
    addedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CourtDecisionCreateInput = {
    id?: string
    title: string
    court: string
    caseNumber?: string | null
    date?: Date | string | null
    summary?: string | null
    url?: string | null
    relevance?: string | null
    precedent?: boolean
    outcome?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    case: CaseCreateNestedOneWithoutCourtDecisionsInput
    addedBy?: UserCreateNestedOneWithoutCourtDecisionsInput
  }

  export type CourtDecisionUncheckedCreateInput = {
    id?: string
    title: string
    court: string
    caseNumber?: string | null
    date?: Date | string | null
    summary?: string | null
    url?: string | null
    relevance?: string | null
    precedent?: boolean
    outcome?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    caseId: string
    addedById?: string | null
  }

  export type CourtDecisionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    court?: StringFieldUpdateOperationsInput | string
    caseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    relevance?: NullableStringFieldUpdateOperationsInput | string | null
    precedent?: BoolFieldUpdateOperationsInput | boolean
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: CaseUpdateOneRequiredWithoutCourtDecisionsNestedInput
    addedBy?: UserUpdateOneWithoutCourtDecisionsNestedInput
  }

  export type CourtDecisionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    court?: StringFieldUpdateOperationsInput | string
    caseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    relevance?: NullableStringFieldUpdateOperationsInput | string | null
    precedent?: BoolFieldUpdateOperationsInput | boolean
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
    addedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CourtDecisionCreateManyInput = {
    id?: string
    title: string
    court: string
    caseNumber?: string | null
    date?: Date | string | null
    summary?: string | null
    url?: string | null
    relevance?: string | null
    precedent?: boolean
    outcome?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    caseId: string
    addedById?: string | null
  }

  export type CourtDecisionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    court?: StringFieldUpdateOperationsInput | string
    caseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    relevance?: NullableStringFieldUpdateOperationsInput | string | null
    precedent?: BoolFieldUpdateOperationsInput | boolean
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourtDecisionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    court?: StringFieldUpdateOperationsInput | string
    caseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    relevance?: NullableStringFieldUpdateOperationsInput | string | null
    precedent?: BoolFieldUpdateOperationsInput | boolean
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
    addedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AccountProviderProviderAccountIdCompoundUniqueInput = {
    provider: string
    providerAccountId: string
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type VerificationTokenIdentifierTokenCompoundUniqueInput = {
    identifier: string
    token: string
  }

  export type VerificationTokenCountOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMaxOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMinOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type CaseListRelationFilter = {
    every?: CaseWhereInput
    some?: CaseWhereInput
    none?: CaseWhereInput
  }

  export type ActivityListRelationFilter = {
    every?: ActivityWhereInput
    some?: ActivityWhereInput
    none?: ActivityWhereInput
  }

  export type FileListRelationFilter = {
    every?: FileWhereInput
    some?: FileWhereInput
    none?: FileWhereInput
  }

  export type MilestoneListRelationFilter = {
    every?: MilestoneWhereInput
    some?: MilestoneWhereInput
    none?: MilestoneWhereInput
  }

  export type CommentListRelationFilter = {
    every?: CommentWhereInput
    some?: CommentWhereInput
    none?: CommentWhereInput
  }

  export type TimeEntryListRelationFilter = {
    every?: TimeEntryWhereInput
    some?: TimeEntryWhereInput
    none?: TimeEntryWhereInput
  }

  export type LegalReferenceListRelationFilter = {
    every?: LegalReferenceWhereInput
    some?: LegalReferenceWhereInput
    none?: LegalReferenceWhereInput
  }

  export type WorkflowStepListRelationFilter = {
    every?: WorkflowStepWhereInput
    some?: WorkflowStepWhereInput
    none?: WorkflowStepWhereInput
  }

  export type LegalStatuteListRelationFilter = {
    every?: LegalStatuteWhereInput
    some?: LegalStatuteWhereInput
    none?: LegalStatuteWhereInput
  }

  export type CourtDecisionListRelationFilter = {
    every?: CourtDecisionWhereInput
    some?: CourtDecisionWhereInput
    none?: CourtDecisionWhereInput
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CaseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ActivityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MilestoneOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TimeEntryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LegalReferenceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkflowStepOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LegalStatuteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CourtDecisionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    password?: SortOrder
    role?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    position?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    password?: SortOrder
    role?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    position?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    password?: SortOrder
    role?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    position?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumCaseStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CaseStatus | EnumCaseStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CaseStatus[] | ListEnumCaseStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CaseStatus[] | ListEnumCaseStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCaseStatusFilter<$PrismaModel> | $Enums.CaseStatus
  }

  export type EnumCasePriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.CasePriority | EnumCasePriorityFieldRefInput<$PrismaModel>
    in?: $Enums.CasePriority[] | ListEnumCasePriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.CasePriority[] | ListEnumCasePriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumCasePriorityFilter<$PrismaModel> | $Enums.CasePriority
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type DocumentTypeListRelationFilter = {
    every?: DocumentTypeWhereInput
    some?: DocumentTypeWhereInput
    none?: DocumentTypeWhereInput
  }

  export type DocumentTypeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CaseCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    clientName?: SortOrder
    clientEmail?: SortOrder
    clientPhone?: SortOrder
    dueDate?: SortOrder
    tags?: SortOrder
    notes?: SortOrder
    progress?: SortOrder
    estimatedHours?: SortOrder
    actualHours?: SortOrder
    hourlyRate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    assignedToId?: SortOrder
    createdById?: SortOrder
  }

  export type CaseAvgOrderByAggregateInput = {
    progress?: SortOrder
    estimatedHours?: SortOrder
    actualHours?: SortOrder
    hourlyRate?: SortOrder
  }

  export type CaseMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    clientName?: SortOrder
    clientEmail?: SortOrder
    clientPhone?: SortOrder
    dueDate?: SortOrder
    notes?: SortOrder
    progress?: SortOrder
    estimatedHours?: SortOrder
    actualHours?: SortOrder
    hourlyRate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    assignedToId?: SortOrder
    createdById?: SortOrder
  }

  export type CaseMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    clientName?: SortOrder
    clientEmail?: SortOrder
    clientPhone?: SortOrder
    dueDate?: SortOrder
    notes?: SortOrder
    progress?: SortOrder
    estimatedHours?: SortOrder
    actualHours?: SortOrder
    hourlyRate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    assignedToId?: SortOrder
    createdById?: SortOrder
  }

  export type CaseSumOrderByAggregateInput = {
    progress?: SortOrder
    estimatedHours?: SortOrder
    actualHours?: SortOrder
    hourlyRate?: SortOrder
  }

  export type EnumCaseStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CaseStatus | EnumCaseStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CaseStatus[] | ListEnumCaseStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CaseStatus[] | ListEnumCaseStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCaseStatusWithAggregatesFilter<$PrismaModel> | $Enums.CaseStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCaseStatusFilter<$PrismaModel>
    _max?: NestedEnumCaseStatusFilter<$PrismaModel>
  }

  export type EnumCasePriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CasePriority | EnumCasePriorityFieldRefInput<$PrismaModel>
    in?: $Enums.CasePriority[] | ListEnumCasePriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.CasePriority[] | ListEnumCasePriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumCasePriorityWithAggregatesFilter<$PrismaModel> | $Enums.CasePriority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCasePriorityFilter<$PrismaModel>
    _max?: NestedEnumCasePriorityFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type CaseScalarRelationFilter = {
    is?: CaseWhereInput
    isNot?: CaseWhereInput
  }

  export type FileCountOrderByAggregateInput = {
    id?: SortOrder
    originalName?: SortOrder
    fileName?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    filePath?: SortOrder
    uploadedAt?: SortOrder
    caseId?: SortOrder
    uploadedById?: SortOrder
  }

  export type FileAvgOrderByAggregateInput = {
    fileSize?: SortOrder
  }

  export type FileMaxOrderByAggregateInput = {
    id?: SortOrder
    originalName?: SortOrder
    fileName?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    filePath?: SortOrder
    uploadedAt?: SortOrder
    caseId?: SortOrder
    uploadedById?: SortOrder
  }

  export type FileMinOrderByAggregateInput = {
    id?: SortOrder
    originalName?: SortOrder
    fileName?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    filePath?: SortOrder
    uploadedAt?: SortOrder
    caseId?: SortOrder
    uploadedById?: SortOrder
  }

  export type FileSumOrderByAggregateInput = {
    fileSize?: SortOrder
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type CaseNullableScalarRelationFilter = {
    is?: CaseWhereInput | null
    isNot?: CaseWhereInput | null
  }

  export type ActivityCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    description?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    caseId?: SortOrder
  }

  export type ActivityMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    caseId?: SortOrder
  }

  export type ActivityMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    caseId?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type MilestoneCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    dueDate?: SortOrder
    completed?: SortOrder
    completedAt?: SortOrder
    order?: SortOrder
    estimatedHours?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    caseId?: SortOrder
    completedById?: SortOrder
    assignedToId?: SortOrder
  }

  export type MilestoneAvgOrderByAggregateInput = {
    order?: SortOrder
    estimatedHours?: SortOrder
  }

  export type MilestoneMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    dueDate?: SortOrder
    completed?: SortOrder
    completedAt?: SortOrder
    order?: SortOrder
    estimatedHours?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    caseId?: SortOrder
    completedById?: SortOrder
    assignedToId?: SortOrder
  }

  export type MilestoneMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    dueDate?: SortOrder
    completed?: SortOrder
    completedAt?: SortOrder
    order?: SortOrder
    estimatedHours?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    caseId?: SortOrder
    completedById?: SortOrder
    assignedToId?: SortOrder
  }

  export type MilestoneSumOrderByAggregateInput = {
    order?: SortOrder
    estimatedHours?: SortOrder
  }

  export type CommentCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    isInternal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    caseId?: SortOrder
    authorId?: SortOrder
  }

  export type CommentMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    isInternal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    caseId?: SortOrder
    authorId?: SortOrder
  }

  export type CommentMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    isInternal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    caseId?: SortOrder
    authorId?: SortOrder
  }

  export type TimeEntryCountOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    hours?: SortOrder
    date?: SortOrder
    billable?: SortOrder
    hourlyRate?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    caseId?: SortOrder
    userId?: SortOrder
  }

  export type TimeEntryAvgOrderByAggregateInput = {
    hours?: SortOrder
    hourlyRate?: SortOrder
    amount?: SortOrder
  }

  export type TimeEntryMaxOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    hours?: SortOrder
    date?: SortOrder
    billable?: SortOrder
    hourlyRate?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    caseId?: SortOrder
    userId?: SortOrder
  }

  export type TimeEntryMinOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    hours?: SortOrder
    date?: SortOrder
    billable?: SortOrder
    hourlyRate?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    caseId?: SortOrder
    userId?: SortOrder
  }

  export type TimeEntrySumOrderByAggregateInput = {
    hours?: SortOrder
    hourlyRate?: SortOrder
    amount?: SortOrder
  }

  export type LegalReferenceCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    citation?: SortOrder
    url?: SortOrder
    summary?: SortOrder
    relevance?: SortOrder
    createdAt?: SortOrder
    caseId?: SortOrder
    addedById?: SortOrder
  }

  export type LegalReferenceMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    citation?: SortOrder
    url?: SortOrder
    summary?: SortOrder
    relevance?: SortOrder
    createdAt?: SortOrder
    caseId?: SortOrder
    addedById?: SortOrder
  }

  export type LegalReferenceMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    citation?: SortOrder
    url?: SortOrder
    summary?: SortOrder
    relevance?: SortOrder
    createdAt?: SortOrder
    caseId?: SortOrder
    addedById?: SortOrder
  }

  export type WorkflowStepCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    order?: SortOrder
    completed?: SortOrder
    completedAt?: SortOrder
    dueDate?: SortOrder
    assignedToId?: SortOrder
    dependencies?: SortOrder
    estimatedHours?: SortOrder
    actualHours?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    caseId?: SortOrder
  }

  export type WorkflowStepAvgOrderByAggregateInput = {
    order?: SortOrder
    estimatedHours?: SortOrder
    actualHours?: SortOrder
  }

  export type WorkflowStepMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    order?: SortOrder
    completed?: SortOrder
    completedAt?: SortOrder
    dueDate?: SortOrder
    assignedToId?: SortOrder
    estimatedHours?: SortOrder
    actualHours?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    caseId?: SortOrder
  }

  export type WorkflowStepMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    order?: SortOrder
    completed?: SortOrder
    completedAt?: SortOrder
    dueDate?: SortOrder
    assignedToId?: SortOrder
    estimatedHours?: SortOrder
    actualHours?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    caseId?: SortOrder
  }

  export type WorkflowStepSumOrderByAggregateInput = {
    order?: SortOrder
    estimatedHours?: SortOrder
    actualHours?: SortOrder
  }

  export type DocumentTypeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    required?: SortOrder
    category?: SortOrder
    template?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    caseId?: SortOrder
  }

  export type DocumentTypeAvgOrderByAggregateInput = {
    order?: SortOrder
  }

  export type DocumentTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    required?: SortOrder
    category?: SortOrder
    template?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    caseId?: SortOrder
  }

  export type DocumentTypeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    required?: SortOrder
    category?: SortOrder
    template?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    caseId?: SortOrder
  }

  export type DocumentTypeSumOrderByAggregateInput = {
    order?: SortOrder
  }

  export type LegalStatuteCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    chapter?: SortOrder
    section?: SortOrder
    subsection?: SortOrder
    description?: SortOrder
    url?: SortOrder
    notes?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    caseId?: SortOrder
    addedById?: SortOrder
  }

  export type LegalStatuteMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    chapter?: SortOrder
    section?: SortOrder
    subsection?: SortOrder
    description?: SortOrder
    url?: SortOrder
    notes?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    caseId?: SortOrder
    addedById?: SortOrder
  }

  export type LegalStatuteMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    chapter?: SortOrder
    section?: SortOrder
    subsection?: SortOrder
    description?: SortOrder
    url?: SortOrder
    notes?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    caseId?: SortOrder
    addedById?: SortOrder
  }

  export type CourtDecisionCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    court?: SortOrder
    caseNumber?: SortOrder
    date?: SortOrder
    summary?: SortOrder
    url?: SortOrder
    relevance?: SortOrder
    precedent?: SortOrder
    outcome?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    caseId?: SortOrder
    addedById?: SortOrder
  }

  export type CourtDecisionMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    court?: SortOrder
    caseNumber?: SortOrder
    date?: SortOrder
    summary?: SortOrder
    url?: SortOrder
    relevance?: SortOrder
    precedent?: SortOrder
    outcome?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    caseId?: SortOrder
    addedById?: SortOrder
  }

  export type CourtDecisionMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    court?: SortOrder
    caseNumber?: SortOrder
    date?: SortOrder
    summary?: SortOrder
    url?: SortOrder
    relevance?: SortOrder
    precedent?: SortOrder
    outcome?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    caseId?: SortOrder
    addedById?: SortOrder
  }

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    upsert?: UserUpsertWithoutAccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountsInput, UserUpdateWithoutAccountsInput>, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type CaseCreateNestedManyWithoutAssignedToInput = {
    create?: XOR<CaseCreateWithoutAssignedToInput, CaseUncheckedCreateWithoutAssignedToInput> | CaseCreateWithoutAssignedToInput[] | CaseUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: CaseCreateOrConnectWithoutAssignedToInput | CaseCreateOrConnectWithoutAssignedToInput[]
    createMany?: CaseCreateManyAssignedToInputEnvelope
    connect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
  }

  export type CaseCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<CaseCreateWithoutCreatedByInput, CaseUncheckedCreateWithoutCreatedByInput> | CaseCreateWithoutCreatedByInput[] | CaseUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: CaseCreateOrConnectWithoutCreatedByInput | CaseCreateOrConnectWithoutCreatedByInput[]
    createMany?: CaseCreateManyCreatedByInputEnvelope
    connect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
  }

  export type ActivityCreateNestedManyWithoutUserInput = {
    create?: XOR<ActivityCreateWithoutUserInput, ActivityUncheckedCreateWithoutUserInput> | ActivityCreateWithoutUserInput[] | ActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutUserInput | ActivityCreateOrConnectWithoutUserInput[]
    createMany?: ActivityCreateManyUserInputEnvelope
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
  }

  export type FileCreateNestedManyWithoutUploadedByInput = {
    create?: XOR<FileCreateWithoutUploadedByInput, FileUncheckedCreateWithoutUploadedByInput> | FileCreateWithoutUploadedByInput[] | FileUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: FileCreateOrConnectWithoutUploadedByInput | FileCreateOrConnectWithoutUploadedByInput[]
    createMany?: FileCreateManyUploadedByInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type MilestoneCreateNestedManyWithoutCompletedByInput = {
    create?: XOR<MilestoneCreateWithoutCompletedByInput, MilestoneUncheckedCreateWithoutCompletedByInput> | MilestoneCreateWithoutCompletedByInput[] | MilestoneUncheckedCreateWithoutCompletedByInput[]
    connectOrCreate?: MilestoneCreateOrConnectWithoutCompletedByInput | MilestoneCreateOrConnectWithoutCompletedByInput[]
    createMany?: MilestoneCreateManyCompletedByInputEnvelope
    connect?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[]
  }

  export type MilestoneCreateNestedManyWithoutAssignedToInput = {
    create?: XOR<MilestoneCreateWithoutAssignedToInput, MilestoneUncheckedCreateWithoutAssignedToInput> | MilestoneCreateWithoutAssignedToInput[] | MilestoneUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: MilestoneCreateOrConnectWithoutAssignedToInput | MilestoneCreateOrConnectWithoutAssignedToInput[]
    createMany?: MilestoneCreateManyAssignedToInputEnvelope
    connect?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutAuthorInput = {
    create?: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput> | CommentCreateWithoutAuthorInput[] | CommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutAuthorInput | CommentCreateOrConnectWithoutAuthorInput[]
    createMany?: CommentCreateManyAuthorInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type TimeEntryCreateNestedManyWithoutUserInput = {
    create?: XOR<TimeEntryCreateWithoutUserInput, TimeEntryUncheckedCreateWithoutUserInput> | TimeEntryCreateWithoutUserInput[] | TimeEntryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TimeEntryCreateOrConnectWithoutUserInput | TimeEntryCreateOrConnectWithoutUserInput[]
    createMany?: TimeEntryCreateManyUserInputEnvelope
    connect?: TimeEntryWhereUniqueInput | TimeEntryWhereUniqueInput[]
  }

  export type LegalReferenceCreateNestedManyWithoutAddedByInput = {
    create?: XOR<LegalReferenceCreateWithoutAddedByInput, LegalReferenceUncheckedCreateWithoutAddedByInput> | LegalReferenceCreateWithoutAddedByInput[] | LegalReferenceUncheckedCreateWithoutAddedByInput[]
    connectOrCreate?: LegalReferenceCreateOrConnectWithoutAddedByInput | LegalReferenceCreateOrConnectWithoutAddedByInput[]
    createMany?: LegalReferenceCreateManyAddedByInputEnvelope
    connect?: LegalReferenceWhereUniqueInput | LegalReferenceWhereUniqueInput[]
  }

  export type WorkflowStepCreateNestedManyWithoutAssignedToInput = {
    create?: XOR<WorkflowStepCreateWithoutAssignedToInput, WorkflowStepUncheckedCreateWithoutAssignedToInput> | WorkflowStepCreateWithoutAssignedToInput[] | WorkflowStepUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: WorkflowStepCreateOrConnectWithoutAssignedToInput | WorkflowStepCreateOrConnectWithoutAssignedToInput[]
    createMany?: WorkflowStepCreateManyAssignedToInputEnvelope
    connect?: WorkflowStepWhereUniqueInput | WorkflowStepWhereUniqueInput[]
  }

  export type LegalStatuteCreateNestedManyWithoutAddedByInput = {
    create?: XOR<LegalStatuteCreateWithoutAddedByInput, LegalStatuteUncheckedCreateWithoutAddedByInput> | LegalStatuteCreateWithoutAddedByInput[] | LegalStatuteUncheckedCreateWithoutAddedByInput[]
    connectOrCreate?: LegalStatuteCreateOrConnectWithoutAddedByInput | LegalStatuteCreateOrConnectWithoutAddedByInput[]
    createMany?: LegalStatuteCreateManyAddedByInputEnvelope
    connect?: LegalStatuteWhereUniqueInput | LegalStatuteWhereUniqueInput[]
  }

  export type CourtDecisionCreateNestedManyWithoutAddedByInput = {
    create?: XOR<CourtDecisionCreateWithoutAddedByInput, CourtDecisionUncheckedCreateWithoutAddedByInput> | CourtDecisionCreateWithoutAddedByInput[] | CourtDecisionUncheckedCreateWithoutAddedByInput[]
    connectOrCreate?: CourtDecisionCreateOrConnectWithoutAddedByInput | CourtDecisionCreateOrConnectWithoutAddedByInput[]
    createMany?: CourtDecisionCreateManyAddedByInputEnvelope
    connect?: CourtDecisionWhereUniqueInput | CourtDecisionWhereUniqueInput[]
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type CaseUncheckedCreateNestedManyWithoutAssignedToInput = {
    create?: XOR<CaseCreateWithoutAssignedToInput, CaseUncheckedCreateWithoutAssignedToInput> | CaseCreateWithoutAssignedToInput[] | CaseUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: CaseCreateOrConnectWithoutAssignedToInput | CaseCreateOrConnectWithoutAssignedToInput[]
    createMany?: CaseCreateManyAssignedToInputEnvelope
    connect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
  }

  export type CaseUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<CaseCreateWithoutCreatedByInput, CaseUncheckedCreateWithoutCreatedByInput> | CaseCreateWithoutCreatedByInput[] | CaseUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: CaseCreateOrConnectWithoutCreatedByInput | CaseCreateOrConnectWithoutCreatedByInput[]
    createMany?: CaseCreateManyCreatedByInputEnvelope
    connect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
  }

  export type ActivityUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ActivityCreateWithoutUserInput, ActivityUncheckedCreateWithoutUserInput> | ActivityCreateWithoutUserInput[] | ActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutUserInput | ActivityCreateOrConnectWithoutUserInput[]
    createMany?: ActivityCreateManyUserInputEnvelope
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
  }

  export type FileUncheckedCreateNestedManyWithoutUploadedByInput = {
    create?: XOR<FileCreateWithoutUploadedByInput, FileUncheckedCreateWithoutUploadedByInput> | FileCreateWithoutUploadedByInput[] | FileUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: FileCreateOrConnectWithoutUploadedByInput | FileCreateOrConnectWithoutUploadedByInput[]
    createMany?: FileCreateManyUploadedByInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type MilestoneUncheckedCreateNestedManyWithoutCompletedByInput = {
    create?: XOR<MilestoneCreateWithoutCompletedByInput, MilestoneUncheckedCreateWithoutCompletedByInput> | MilestoneCreateWithoutCompletedByInput[] | MilestoneUncheckedCreateWithoutCompletedByInput[]
    connectOrCreate?: MilestoneCreateOrConnectWithoutCompletedByInput | MilestoneCreateOrConnectWithoutCompletedByInput[]
    createMany?: MilestoneCreateManyCompletedByInputEnvelope
    connect?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[]
  }

  export type MilestoneUncheckedCreateNestedManyWithoutAssignedToInput = {
    create?: XOR<MilestoneCreateWithoutAssignedToInput, MilestoneUncheckedCreateWithoutAssignedToInput> | MilestoneCreateWithoutAssignedToInput[] | MilestoneUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: MilestoneCreateOrConnectWithoutAssignedToInput | MilestoneCreateOrConnectWithoutAssignedToInput[]
    createMany?: MilestoneCreateManyAssignedToInputEnvelope
    connect?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput> | CommentCreateWithoutAuthorInput[] | CommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutAuthorInput | CommentCreateOrConnectWithoutAuthorInput[]
    createMany?: CommentCreateManyAuthorInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type TimeEntryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TimeEntryCreateWithoutUserInput, TimeEntryUncheckedCreateWithoutUserInput> | TimeEntryCreateWithoutUserInput[] | TimeEntryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TimeEntryCreateOrConnectWithoutUserInput | TimeEntryCreateOrConnectWithoutUserInput[]
    createMany?: TimeEntryCreateManyUserInputEnvelope
    connect?: TimeEntryWhereUniqueInput | TimeEntryWhereUniqueInput[]
  }

  export type LegalReferenceUncheckedCreateNestedManyWithoutAddedByInput = {
    create?: XOR<LegalReferenceCreateWithoutAddedByInput, LegalReferenceUncheckedCreateWithoutAddedByInput> | LegalReferenceCreateWithoutAddedByInput[] | LegalReferenceUncheckedCreateWithoutAddedByInput[]
    connectOrCreate?: LegalReferenceCreateOrConnectWithoutAddedByInput | LegalReferenceCreateOrConnectWithoutAddedByInput[]
    createMany?: LegalReferenceCreateManyAddedByInputEnvelope
    connect?: LegalReferenceWhereUniqueInput | LegalReferenceWhereUniqueInput[]
  }

  export type WorkflowStepUncheckedCreateNestedManyWithoutAssignedToInput = {
    create?: XOR<WorkflowStepCreateWithoutAssignedToInput, WorkflowStepUncheckedCreateWithoutAssignedToInput> | WorkflowStepCreateWithoutAssignedToInput[] | WorkflowStepUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: WorkflowStepCreateOrConnectWithoutAssignedToInput | WorkflowStepCreateOrConnectWithoutAssignedToInput[]
    createMany?: WorkflowStepCreateManyAssignedToInputEnvelope
    connect?: WorkflowStepWhereUniqueInput | WorkflowStepWhereUniqueInput[]
  }

  export type LegalStatuteUncheckedCreateNestedManyWithoutAddedByInput = {
    create?: XOR<LegalStatuteCreateWithoutAddedByInput, LegalStatuteUncheckedCreateWithoutAddedByInput> | LegalStatuteCreateWithoutAddedByInput[] | LegalStatuteUncheckedCreateWithoutAddedByInput[]
    connectOrCreate?: LegalStatuteCreateOrConnectWithoutAddedByInput | LegalStatuteCreateOrConnectWithoutAddedByInput[]
    createMany?: LegalStatuteCreateManyAddedByInputEnvelope
    connect?: LegalStatuteWhereUniqueInput | LegalStatuteWhereUniqueInput[]
  }

  export type CourtDecisionUncheckedCreateNestedManyWithoutAddedByInput = {
    create?: XOR<CourtDecisionCreateWithoutAddedByInput, CourtDecisionUncheckedCreateWithoutAddedByInput> | CourtDecisionCreateWithoutAddedByInput[] | CourtDecisionUncheckedCreateWithoutAddedByInput[]
    connectOrCreate?: CourtDecisionCreateOrConnectWithoutAddedByInput | CourtDecisionCreateOrConnectWithoutAddedByInput[]
    createMany?: CourtDecisionCreateManyAddedByInputEnvelope
    connect?: CourtDecisionWhereUniqueInput | CourtDecisionWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type CaseUpdateManyWithoutAssignedToNestedInput = {
    create?: XOR<CaseCreateWithoutAssignedToInput, CaseUncheckedCreateWithoutAssignedToInput> | CaseCreateWithoutAssignedToInput[] | CaseUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: CaseCreateOrConnectWithoutAssignedToInput | CaseCreateOrConnectWithoutAssignedToInput[]
    upsert?: CaseUpsertWithWhereUniqueWithoutAssignedToInput | CaseUpsertWithWhereUniqueWithoutAssignedToInput[]
    createMany?: CaseCreateManyAssignedToInputEnvelope
    set?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    disconnect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    delete?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    connect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    update?: CaseUpdateWithWhereUniqueWithoutAssignedToInput | CaseUpdateWithWhereUniqueWithoutAssignedToInput[]
    updateMany?: CaseUpdateManyWithWhereWithoutAssignedToInput | CaseUpdateManyWithWhereWithoutAssignedToInput[]
    deleteMany?: CaseScalarWhereInput | CaseScalarWhereInput[]
  }

  export type CaseUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<CaseCreateWithoutCreatedByInput, CaseUncheckedCreateWithoutCreatedByInput> | CaseCreateWithoutCreatedByInput[] | CaseUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: CaseCreateOrConnectWithoutCreatedByInput | CaseCreateOrConnectWithoutCreatedByInput[]
    upsert?: CaseUpsertWithWhereUniqueWithoutCreatedByInput | CaseUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: CaseCreateManyCreatedByInputEnvelope
    set?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    disconnect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    delete?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    connect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    update?: CaseUpdateWithWhereUniqueWithoutCreatedByInput | CaseUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: CaseUpdateManyWithWhereWithoutCreatedByInput | CaseUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: CaseScalarWhereInput | CaseScalarWhereInput[]
  }

  export type ActivityUpdateManyWithoutUserNestedInput = {
    create?: XOR<ActivityCreateWithoutUserInput, ActivityUncheckedCreateWithoutUserInput> | ActivityCreateWithoutUserInput[] | ActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutUserInput | ActivityCreateOrConnectWithoutUserInput[]
    upsert?: ActivityUpsertWithWhereUniqueWithoutUserInput | ActivityUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ActivityCreateManyUserInputEnvelope
    set?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    disconnect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    delete?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    update?: ActivityUpdateWithWhereUniqueWithoutUserInput | ActivityUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ActivityUpdateManyWithWhereWithoutUserInput | ActivityUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
  }

  export type FileUpdateManyWithoutUploadedByNestedInput = {
    create?: XOR<FileCreateWithoutUploadedByInput, FileUncheckedCreateWithoutUploadedByInput> | FileCreateWithoutUploadedByInput[] | FileUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: FileCreateOrConnectWithoutUploadedByInput | FileCreateOrConnectWithoutUploadedByInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutUploadedByInput | FileUpsertWithWhereUniqueWithoutUploadedByInput[]
    createMany?: FileCreateManyUploadedByInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutUploadedByInput | FileUpdateWithWhereUniqueWithoutUploadedByInput[]
    updateMany?: FileUpdateManyWithWhereWithoutUploadedByInput | FileUpdateManyWithWhereWithoutUploadedByInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type MilestoneUpdateManyWithoutCompletedByNestedInput = {
    create?: XOR<MilestoneCreateWithoutCompletedByInput, MilestoneUncheckedCreateWithoutCompletedByInput> | MilestoneCreateWithoutCompletedByInput[] | MilestoneUncheckedCreateWithoutCompletedByInput[]
    connectOrCreate?: MilestoneCreateOrConnectWithoutCompletedByInput | MilestoneCreateOrConnectWithoutCompletedByInput[]
    upsert?: MilestoneUpsertWithWhereUniqueWithoutCompletedByInput | MilestoneUpsertWithWhereUniqueWithoutCompletedByInput[]
    createMany?: MilestoneCreateManyCompletedByInputEnvelope
    set?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[]
    disconnect?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[]
    delete?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[]
    connect?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[]
    update?: MilestoneUpdateWithWhereUniqueWithoutCompletedByInput | MilestoneUpdateWithWhereUniqueWithoutCompletedByInput[]
    updateMany?: MilestoneUpdateManyWithWhereWithoutCompletedByInput | MilestoneUpdateManyWithWhereWithoutCompletedByInput[]
    deleteMany?: MilestoneScalarWhereInput | MilestoneScalarWhereInput[]
  }

  export type MilestoneUpdateManyWithoutAssignedToNestedInput = {
    create?: XOR<MilestoneCreateWithoutAssignedToInput, MilestoneUncheckedCreateWithoutAssignedToInput> | MilestoneCreateWithoutAssignedToInput[] | MilestoneUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: MilestoneCreateOrConnectWithoutAssignedToInput | MilestoneCreateOrConnectWithoutAssignedToInput[]
    upsert?: MilestoneUpsertWithWhereUniqueWithoutAssignedToInput | MilestoneUpsertWithWhereUniqueWithoutAssignedToInput[]
    createMany?: MilestoneCreateManyAssignedToInputEnvelope
    set?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[]
    disconnect?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[]
    delete?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[]
    connect?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[]
    update?: MilestoneUpdateWithWhereUniqueWithoutAssignedToInput | MilestoneUpdateWithWhereUniqueWithoutAssignedToInput[]
    updateMany?: MilestoneUpdateManyWithWhereWithoutAssignedToInput | MilestoneUpdateManyWithWhereWithoutAssignedToInput[]
    deleteMany?: MilestoneScalarWhereInput | MilestoneScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput> | CommentCreateWithoutAuthorInput[] | CommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutAuthorInput | CommentCreateOrConnectWithoutAuthorInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutAuthorInput | CommentUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: CommentCreateManyAuthorInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutAuthorInput | CommentUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutAuthorInput | CommentUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type TimeEntryUpdateManyWithoutUserNestedInput = {
    create?: XOR<TimeEntryCreateWithoutUserInput, TimeEntryUncheckedCreateWithoutUserInput> | TimeEntryCreateWithoutUserInput[] | TimeEntryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TimeEntryCreateOrConnectWithoutUserInput | TimeEntryCreateOrConnectWithoutUserInput[]
    upsert?: TimeEntryUpsertWithWhereUniqueWithoutUserInput | TimeEntryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TimeEntryCreateManyUserInputEnvelope
    set?: TimeEntryWhereUniqueInput | TimeEntryWhereUniqueInput[]
    disconnect?: TimeEntryWhereUniqueInput | TimeEntryWhereUniqueInput[]
    delete?: TimeEntryWhereUniqueInput | TimeEntryWhereUniqueInput[]
    connect?: TimeEntryWhereUniqueInput | TimeEntryWhereUniqueInput[]
    update?: TimeEntryUpdateWithWhereUniqueWithoutUserInput | TimeEntryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TimeEntryUpdateManyWithWhereWithoutUserInput | TimeEntryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TimeEntryScalarWhereInput | TimeEntryScalarWhereInput[]
  }

  export type LegalReferenceUpdateManyWithoutAddedByNestedInput = {
    create?: XOR<LegalReferenceCreateWithoutAddedByInput, LegalReferenceUncheckedCreateWithoutAddedByInput> | LegalReferenceCreateWithoutAddedByInput[] | LegalReferenceUncheckedCreateWithoutAddedByInput[]
    connectOrCreate?: LegalReferenceCreateOrConnectWithoutAddedByInput | LegalReferenceCreateOrConnectWithoutAddedByInput[]
    upsert?: LegalReferenceUpsertWithWhereUniqueWithoutAddedByInput | LegalReferenceUpsertWithWhereUniqueWithoutAddedByInput[]
    createMany?: LegalReferenceCreateManyAddedByInputEnvelope
    set?: LegalReferenceWhereUniqueInput | LegalReferenceWhereUniqueInput[]
    disconnect?: LegalReferenceWhereUniqueInput | LegalReferenceWhereUniqueInput[]
    delete?: LegalReferenceWhereUniqueInput | LegalReferenceWhereUniqueInput[]
    connect?: LegalReferenceWhereUniqueInput | LegalReferenceWhereUniqueInput[]
    update?: LegalReferenceUpdateWithWhereUniqueWithoutAddedByInput | LegalReferenceUpdateWithWhereUniqueWithoutAddedByInput[]
    updateMany?: LegalReferenceUpdateManyWithWhereWithoutAddedByInput | LegalReferenceUpdateManyWithWhereWithoutAddedByInput[]
    deleteMany?: LegalReferenceScalarWhereInput | LegalReferenceScalarWhereInput[]
  }

  export type WorkflowStepUpdateManyWithoutAssignedToNestedInput = {
    create?: XOR<WorkflowStepCreateWithoutAssignedToInput, WorkflowStepUncheckedCreateWithoutAssignedToInput> | WorkflowStepCreateWithoutAssignedToInput[] | WorkflowStepUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: WorkflowStepCreateOrConnectWithoutAssignedToInput | WorkflowStepCreateOrConnectWithoutAssignedToInput[]
    upsert?: WorkflowStepUpsertWithWhereUniqueWithoutAssignedToInput | WorkflowStepUpsertWithWhereUniqueWithoutAssignedToInput[]
    createMany?: WorkflowStepCreateManyAssignedToInputEnvelope
    set?: WorkflowStepWhereUniqueInput | WorkflowStepWhereUniqueInput[]
    disconnect?: WorkflowStepWhereUniqueInput | WorkflowStepWhereUniqueInput[]
    delete?: WorkflowStepWhereUniqueInput | WorkflowStepWhereUniqueInput[]
    connect?: WorkflowStepWhereUniqueInput | WorkflowStepWhereUniqueInput[]
    update?: WorkflowStepUpdateWithWhereUniqueWithoutAssignedToInput | WorkflowStepUpdateWithWhereUniqueWithoutAssignedToInput[]
    updateMany?: WorkflowStepUpdateManyWithWhereWithoutAssignedToInput | WorkflowStepUpdateManyWithWhereWithoutAssignedToInput[]
    deleteMany?: WorkflowStepScalarWhereInput | WorkflowStepScalarWhereInput[]
  }

  export type LegalStatuteUpdateManyWithoutAddedByNestedInput = {
    create?: XOR<LegalStatuteCreateWithoutAddedByInput, LegalStatuteUncheckedCreateWithoutAddedByInput> | LegalStatuteCreateWithoutAddedByInput[] | LegalStatuteUncheckedCreateWithoutAddedByInput[]
    connectOrCreate?: LegalStatuteCreateOrConnectWithoutAddedByInput | LegalStatuteCreateOrConnectWithoutAddedByInput[]
    upsert?: LegalStatuteUpsertWithWhereUniqueWithoutAddedByInput | LegalStatuteUpsertWithWhereUniqueWithoutAddedByInput[]
    createMany?: LegalStatuteCreateManyAddedByInputEnvelope
    set?: LegalStatuteWhereUniqueInput | LegalStatuteWhereUniqueInput[]
    disconnect?: LegalStatuteWhereUniqueInput | LegalStatuteWhereUniqueInput[]
    delete?: LegalStatuteWhereUniqueInput | LegalStatuteWhereUniqueInput[]
    connect?: LegalStatuteWhereUniqueInput | LegalStatuteWhereUniqueInput[]
    update?: LegalStatuteUpdateWithWhereUniqueWithoutAddedByInput | LegalStatuteUpdateWithWhereUniqueWithoutAddedByInput[]
    updateMany?: LegalStatuteUpdateManyWithWhereWithoutAddedByInput | LegalStatuteUpdateManyWithWhereWithoutAddedByInput[]
    deleteMany?: LegalStatuteScalarWhereInput | LegalStatuteScalarWhereInput[]
  }

  export type CourtDecisionUpdateManyWithoutAddedByNestedInput = {
    create?: XOR<CourtDecisionCreateWithoutAddedByInput, CourtDecisionUncheckedCreateWithoutAddedByInput> | CourtDecisionCreateWithoutAddedByInput[] | CourtDecisionUncheckedCreateWithoutAddedByInput[]
    connectOrCreate?: CourtDecisionCreateOrConnectWithoutAddedByInput | CourtDecisionCreateOrConnectWithoutAddedByInput[]
    upsert?: CourtDecisionUpsertWithWhereUniqueWithoutAddedByInput | CourtDecisionUpsertWithWhereUniqueWithoutAddedByInput[]
    createMany?: CourtDecisionCreateManyAddedByInputEnvelope
    set?: CourtDecisionWhereUniqueInput | CourtDecisionWhereUniqueInput[]
    disconnect?: CourtDecisionWhereUniqueInput | CourtDecisionWhereUniqueInput[]
    delete?: CourtDecisionWhereUniqueInput | CourtDecisionWhereUniqueInput[]
    connect?: CourtDecisionWhereUniqueInput | CourtDecisionWhereUniqueInput[]
    update?: CourtDecisionUpdateWithWhereUniqueWithoutAddedByInput | CourtDecisionUpdateWithWhereUniqueWithoutAddedByInput[]
    updateMany?: CourtDecisionUpdateManyWithWhereWithoutAddedByInput | CourtDecisionUpdateManyWithWhereWithoutAddedByInput[]
    deleteMany?: CourtDecisionScalarWhereInput | CourtDecisionScalarWhereInput[]
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type CaseUncheckedUpdateManyWithoutAssignedToNestedInput = {
    create?: XOR<CaseCreateWithoutAssignedToInput, CaseUncheckedCreateWithoutAssignedToInput> | CaseCreateWithoutAssignedToInput[] | CaseUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: CaseCreateOrConnectWithoutAssignedToInput | CaseCreateOrConnectWithoutAssignedToInput[]
    upsert?: CaseUpsertWithWhereUniqueWithoutAssignedToInput | CaseUpsertWithWhereUniqueWithoutAssignedToInput[]
    createMany?: CaseCreateManyAssignedToInputEnvelope
    set?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    disconnect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    delete?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    connect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    update?: CaseUpdateWithWhereUniqueWithoutAssignedToInput | CaseUpdateWithWhereUniqueWithoutAssignedToInput[]
    updateMany?: CaseUpdateManyWithWhereWithoutAssignedToInput | CaseUpdateManyWithWhereWithoutAssignedToInput[]
    deleteMany?: CaseScalarWhereInput | CaseScalarWhereInput[]
  }

  export type CaseUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<CaseCreateWithoutCreatedByInput, CaseUncheckedCreateWithoutCreatedByInput> | CaseCreateWithoutCreatedByInput[] | CaseUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: CaseCreateOrConnectWithoutCreatedByInput | CaseCreateOrConnectWithoutCreatedByInput[]
    upsert?: CaseUpsertWithWhereUniqueWithoutCreatedByInput | CaseUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: CaseCreateManyCreatedByInputEnvelope
    set?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    disconnect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    delete?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    connect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    update?: CaseUpdateWithWhereUniqueWithoutCreatedByInput | CaseUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: CaseUpdateManyWithWhereWithoutCreatedByInput | CaseUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: CaseScalarWhereInput | CaseScalarWhereInput[]
  }

  export type ActivityUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ActivityCreateWithoutUserInput, ActivityUncheckedCreateWithoutUserInput> | ActivityCreateWithoutUserInput[] | ActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutUserInput | ActivityCreateOrConnectWithoutUserInput[]
    upsert?: ActivityUpsertWithWhereUniqueWithoutUserInput | ActivityUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ActivityCreateManyUserInputEnvelope
    set?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    disconnect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    delete?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    update?: ActivityUpdateWithWhereUniqueWithoutUserInput | ActivityUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ActivityUpdateManyWithWhereWithoutUserInput | ActivityUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
  }

  export type FileUncheckedUpdateManyWithoutUploadedByNestedInput = {
    create?: XOR<FileCreateWithoutUploadedByInput, FileUncheckedCreateWithoutUploadedByInput> | FileCreateWithoutUploadedByInput[] | FileUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: FileCreateOrConnectWithoutUploadedByInput | FileCreateOrConnectWithoutUploadedByInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutUploadedByInput | FileUpsertWithWhereUniqueWithoutUploadedByInput[]
    createMany?: FileCreateManyUploadedByInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutUploadedByInput | FileUpdateWithWhereUniqueWithoutUploadedByInput[]
    updateMany?: FileUpdateManyWithWhereWithoutUploadedByInput | FileUpdateManyWithWhereWithoutUploadedByInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type MilestoneUncheckedUpdateManyWithoutCompletedByNestedInput = {
    create?: XOR<MilestoneCreateWithoutCompletedByInput, MilestoneUncheckedCreateWithoutCompletedByInput> | MilestoneCreateWithoutCompletedByInput[] | MilestoneUncheckedCreateWithoutCompletedByInput[]
    connectOrCreate?: MilestoneCreateOrConnectWithoutCompletedByInput | MilestoneCreateOrConnectWithoutCompletedByInput[]
    upsert?: MilestoneUpsertWithWhereUniqueWithoutCompletedByInput | MilestoneUpsertWithWhereUniqueWithoutCompletedByInput[]
    createMany?: MilestoneCreateManyCompletedByInputEnvelope
    set?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[]
    disconnect?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[]
    delete?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[]
    connect?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[]
    update?: MilestoneUpdateWithWhereUniqueWithoutCompletedByInput | MilestoneUpdateWithWhereUniqueWithoutCompletedByInput[]
    updateMany?: MilestoneUpdateManyWithWhereWithoutCompletedByInput | MilestoneUpdateManyWithWhereWithoutCompletedByInput[]
    deleteMany?: MilestoneScalarWhereInput | MilestoneScalarWhereInput[]
  }

  export type MilestoneUncheckedUpdateManyWithoutAssignedToNestedInput = {
    create?: XOR<MilestoneCreateWithoutAssignedToInput, MilestoneUncheckedCreateWithoutAssignedToInput> | MilestoneCreateWithoutAssignedToInput[] | MilestoneUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: MilestoneCreateOrConnectWithoutAssignedToInput | MilestoneCreateOrConnectWithoutAssignedToInput[]
    upsert?: MilestoneUpsertWithWhereUniqueWithoutAssignedToInput | MilestoneUpsertWithWhereUniqueWithoutAssignedToInput[]
    createMany?: MilestoneCreateManyAssignedToInputEnvelope
    set?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[]
    disconnect?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[]
    delete?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[]
    connect?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[]
    update?: MilestoneUpdateWithWhereUniqueWithoutAssignedToInput | MilestoneUpdateWithWhereUniqueWithoutAssignedToInput[]
    updateMany?: MilestoneUpdateManyWithWhereWithoutAssignedToInput | MilestoneUpdateManyWithWhereWithoutAssignedToInput[]
    deleteMany?: MilestoneScalarWhereInput | MilestoneScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput> | CommentCreateWithoutAuthorInput[] | CommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutAuthorInput | CommentCreateOrConnectWithoutAuthorInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutAuthorInput | CommentUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: CommentCreateManyAuthorInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutAuthorInput | CommentUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutAuthorInput | CommentUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type TimeEntryUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TimeEntryCreateWithoutUserInput, TimeEntryUncheckedCreateWithoutUserInput> | TimeEntryCreateWithoutUserInput[] | TimeEntryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TimeEntryCreateOrConnectWithoutUserInput | TimeEntryCreateOrConnectWithoutUserInput[]
    upsert?: TimeEntryUpsertWithWhereUniqueWithoutUserInput | TimeEntryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TimeEntryCreateManyUserInputEnvelope
    set?: TimeEntryWhereUniqueInput | TimeEntryWhereUniqueInput[]
    disconnect?: TimeEntryWhereUniqueInput | TimeEntryWhereUniqueInput[]
    delete?: TimeEntryWhereUniqueInput | TimeEntryWhereUniqueInput[]
    connect?: TimeEntryWhereUniqueInput | TimeEntryWhereUniqueInput[]
    update?: TimeEntryUpdateWithWhereUniqueWithoutUserInput | TimeEntryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TimeEntryUpdateManyWithWhereWithoutUserInput | TimeEntryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TimeEntryScalarWhereInput | TimeEntryScalarWhereInput[]
  }

  export type LegalReferenceUncheckedUpdateManyWithoutAddedByNestedInput = {
    create?: XOR<LegalReferenceCreateWithoutAddedByInput, LegalReferenceUncheckedCreateWithoutAddedByInput> | LegalReferenceCreateWithoutAddedByInput[] | LegalReferenceUncheckedCreateWithoutAddedByInput[]
    connectOrCreate?: LegalReferenceCreateOrConnectWithoutAddedByInput | LegalReferenceCreateOrConnectWithoutAddedByInput[]
    upsert?: LegalReferenceUpsertWithWhereUniqueWithoutAddedByInput | LegalReferenceUpsertWithWhereUniqueWithoutAddedByInput[]
    createMany?: LegalReferenceCreateManyAddedByInputEnvelope
    set?: LegalReferenceWhereUniqueInput | LegalReferenceWhereUniqueInput[]
    disconnect?: LegalReferenceWhereUniqueInput | LegalReferenceWhereUniqueInput[]
    delete?: LegalReferenceWhereUniqueInput | LegalReferenceWhereUniqueInput[]
    connect?: LegalReferenceWhereUniqueInput | LegalReferenceWhereUniqueInput[]
    update?: LegalReferenceUpdateWithWhereUniqueWithoutAddedByInput | LegalReferenceUpdateWithWhereUniqueWithoutAddedByInput[]
    updateMany?: LegalReferenceUpdateManyWithWhereWithoutAddedByInput | LegalReferenceUpdateManyWithWhereWithoutAddedByInput[]
    deleteMany?: LegalReferenceScalarWhereInput | LegalReferenceScalarWhereInput[]
  }

  export type WorkflowStepUncheckedUpdateManyWithoutAssignedToNestedInput = {
    create?: XOR<WorkflowStepCreateWithoutAssignedToInput, WorkflowStepUncheckedCreateWithoutAssignedToInput> | WorkflowStepCreateWithoutAssignedToInput[] | WorkflowStepUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: WorkflowStepCreateOrConnectWithoutAssignedToInput | WorkflowStepCreateOrConnectWithoutAssignedToInput[]
    upsert?: WorkflowStepUpsertWithWhereUniqueWithoutAssignedToInput | WorkflowStepUpsertWithWhereUniqueWithoutAssignedToInput[]
    createMany?: WorkflowStepCreateManyAssignedToInputEnvelope
    set?: WorkflowStepWhereUniqueInput | WorkflowStepWhereUniqueInput[]
    disconnect?: WorkflowStepWhereUniqueInput | WorkflowStepWhereUniqueInput[]
    delete?: WorkflowStepWhereUniqueInput | WorkflowStepWhereUniqueInput[]
    connect?: WorkflowStepWhereUniqueInput | WorkflowStepWhereUniqueInput[]
    update?: WorkflowStepUpdateWithWhereUniqueWithoutAssignedToInput | WorkflowStepUpdateWithWhereUniqueWithoutAssignedToInput[]
    updateMany?: WorkflowStepUpdateManyWithWhereWithoutAssignedToInput | WorkflowStepUpdateManyWithWhereWithoutAssignedToInput[]
    deleteMany?: WorkflowStepScalarWhereInput | WorkflowStepScalarWhereInput[]
  }

  export type LegalStatuteUncheckedUpdateManyWithoutAddedByNestedInput = {
    create?: XOR<LegalStatuteCreateWithoutAddedByInput, LegalStatuteUncheckedCreateWithoutAddedByInput> | LegalStatuteCreateWithoutAddedByInput[] | LegalStatuteUncheckedCreateWithoutAddedByInput[]
    connectOrCreate?: LegalStatuteCreateOrConnectWithoutAddedByInput | LegalStatuteCreateOrConnectWithoutAddedByInput[]
    upsert?: LegalStatuteUpsertWithWhereUniqueWithoutAddedByInput | LegalStatuteUpsertWithWhereUniqueWithoutAddedByInput[]
    createMany?: LegalStatuteCreateManyAddedByInputEnvelope
    set?: LegalStatuteWhereUniqueInput | LegalStatuteWhereUniqueInput[]
    disconnect?: LegalStatuteWhereUniqueInput | LegalStatuteWhereUniqueInput[]
    delete?: LegalStatuteWhereUniqueInput | LegalStatuteWhereUniqueInput[]
    connect?: LegalStatuteWhereUniqueInput | LegalStatuteWhereUniqueInput[]
    update?: LegalStatuteUpdateWithWhereUniqueWithoutAddedByInput | LegalStatuteUpdateWithWhereUniqueWithoutAddedByInput[]
    updateMany?: LegalStatuteUpdateManyWithWhereWithoutAddedByInput | LegalStatuteUpdateManyWithWhereWithoutAddedByInput[]
    deleteMany?: LegalStatuteScalarWhereInput | LegalStatuteScalarWhereInput[]
  }

  export type CourtDecisionUncheckedUpdateManyWithoutAddedByNestedInput = {
    create?: XOR<CourtDecisionCreateWithoutAddedByInput, CourtDecisionUncheckedCreateWithoutAddedByInput> | CourtDecisionCreateWithoutAddedByInput[] | CourtDecisionUncheckedCreateWithoutAddedByInput[]
    connectOrCreate?: CourtDecisionCreateOrConnectWithoutAddedByInput | CourtDecisionCreateOrConnectWithoutAddedByInput[]
    upsert?: CourtDecisionUpsertWithWhereUniqueWithoutAddedByInput | CourtDecisionUpsertWithWhereUniqueWithoutAddedByInput[]
    createMany?: CourtDecisionCreateManyAddedByInputEnvelope
    set?: CourtDecisionWhereUniqueInput | CourtDecisionWhereUniqueInput[]
    disconnect?: CourtDecisionWhereUniqueInput | CourtDecisionWhereUniqueInput[]
    delete?: CourtDecisionWhereUniqueInput | CourtDecisionWhereUniqueInput[]
    connect?: CourtDecisionWhereUniqueInput | CourtDecisionWhereUniqueInput[]
    update?: CourtDecisionUpdateWithWhereUniqueWithoutAddedByInput | CourtDecisionUpdateWithWhereUniqueWithoutAddedByInput[]
    updateMany?: CourtDecisionUpdateManyWithWhereWithoutAddedByInput | CourtDecisionUpdateManyWithWhereWithoutAddedByInput[]
    deleteMany?: CourtDecisionScalarWhereInput | CourtDecisionScalarWhereInput[]
  }

  export type CaseCreatetagsInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutAssignedCasesInput = {
    create?: XOR<UserCreateWithoutAssignedCasesInput, UserUncheckedCreateWithoutAssignedCasesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedCasesInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedCasesInput = {
    create?: XOR<UserCreateWithoutCreatedCasesInput, UserUncheckedCreateWithoutCreatedCasesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedCasesInput
    connect?: UserWhereUniqueInput
  }

  export type FileCreateNestedManyWithoutCaseInput = {
    create?: XOR<FileCreateWithoutCaseInput, FileUncheckedCreateWithoutCaseInput> | FileCreateWithoutCaseInput[] | FileUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: FileCreateOrConnectWithoutCaseInput | FileCreateOrConnectWithoutCaseInput[]
    createMany?: FileCreateManyCaseInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type ActivityCreateNestedManyWithoutCaseInput = {
    create?: XOR<ActivityCreateWithoutCaseInput, ActivityUncheckedCreateWithoutCaseInput> | ActivityCreateWithoutCaseInput[] | ActivityUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutCaseInput | ActivityCreateOrConnectWithoutCaseInput[]
    createMany?: ActivityCreateManyCaseInputEnvelope
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
  }

  export type MilestoneCreateNestedManyWithoutCaseInput = {
    create?: XOR<MilestoneCreateWithoutCaseInput, MilestoneUncheckedCreateWithoutCaseInput> | MilestoneCreateWithoutCaseInput[] | MilestoneUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: MilestoneCreateOrConnectWithoutCaseInput | MilestoneCreateOrConnectWithoutCaseInput[]
    createMany?: MilestoneCreateManyCaseInputEnvelope
    connect?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutCaseInput = {
    create?: XOR<CommentCreateWithoutCaseInput, CommentUncheckedCreateWithoutCaseInput> | CommentCreateWithoutCaseInput[] | CommentUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutCaseInput | CommentCreateOrConnectWithoutCaseInput[]
    createMany?: CommentCreateManyCaseInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type TimeEntryCreateNestedManyWithoutCaseInput = {
    create?: XOR<TimeEntryCreateWithoutCaseInput, TimeEntryUncheckedCreateWithoutCaseInput> | TimeEntryCreateWithoutCaseInput[] | TimeEntryUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: TimeEntryCreateOrConnectWithoutCaseInput | TimeEntryCreateOrConnectWithoutCaseInput[]
    createMany?: TimeEntryCreateManyCaseInputEnvelope
    connect?: TimeEntryWhereUniqueInput | TimeEntryWhereUniqueInput[]
  }

  export type LegalReferenceCreateNestedManyWithoutCaseInput = {
    create?: XOR<LegalReferenceCreateWithoutCaseInput, LegalReferenceUncheckedCreateWithoutCaseInput> | LegalReferenceCreateWithoutCaseInput[] | LegalReferenceUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: LegalReferenceCreateOrConnectWithoutCaseInput | LegalReferenceCreateOrConnectWithoutCaseInput[]
    createMany?: LegalReferenceCreateManyCaseInputEnvelope
    connect?: LegalReferenceWhereUniqueInput | LegalReferenceWhereUniqueInput[]
  }

  export type WorkflowStepCreateNestedManyWithoutCaseInput = {
    create?: XOR<WorkflowStepCreateWithoutCaseInput, WorkflowStepUncheckedCreateWithoutCaseInput> | WorkflowStepCreateWithoutCaseInput[] | WorkflowStepUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: WorkflowStepCreateOrConnectWithoutCaseInput | WorkflowStepCreateOrConnectWithoutCaseInput[]
    createMany?: WorkflowStepCreateManyCaseInputEnvelope
    connect?: WorkflowStepWhereUniqueInput | WorkflowStepWhereUniqueInput[]
  }

  export type DocumentTypeCreateNestedManyWithoutCaseInput = {
    create?: XOR<DocumentTypeCreateWithoutCaseInput, DocumentTypeUncheckedCreateWithoutCaseInput> | DocumentTypeCreateWithoutCaseInput[] | DocumentTypeUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: DocumentTypeCreateOrConnectWithoutCaseInput | DocumentTypeCreateOrConnectWithoutCaseInput[]
    createMany?: DocumentTypeCreateManyCaseInputEnvelope
    connect?: DocumentTypeWhereUniqueInput | DocumentTypeWhereUniqueInput[]
  }

  export type LegalStatuteCreateNestedManyWithoutCaseInput = {
    create?: XOR<LegalStatuteCreateWithoutCaseInput, LegalStatuteUncheckedCreateWithoutCaseInput> | LegalStatuteCreateWithoutCaseInput[] | LegalStatuteUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: LegalStatuteCreateOrConnectWithoutCaseInput | LegalStatuteCreateOrConnectWithoutCaseInput[]
    createMany?: LegalStatuteCreateManyCaseInputEnvelope
    connect?: LegalStatuteWhereUniqueInput | LegalStatuteWhereUniqueInput[]
  }

  export type CourtDecisionCreateNestedManyWithoutCaseInput = {
    create?: XOR<CourtDecisionCreateWithoutCaseInput, CourtDecisionUncheckedCreateWithoutCaseInput> | CourtDecisionCreateWithoutCaseInput[] | CourtDecisionUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CourtDecisionCreateOrConnectWithoutCaseInput | CourtDecisionCreateOrConnectWithoutCaseInput[]
    createMany?: CourtDecisionCreateManyCaseInputEnvelope
    connect?: CourtDecisionWhereUniqueInput | CourtDecisionWhereUniqueInput[]
  }

  export type FileUncheckedCreateNestedManyWithoutCaseInput = {
    create?: XOR<FileCreateWithoutCaseInput, FileUncheckedCreateWithoutCaseInput> | FileCreateWithoutCaseInput[] | FileUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: FileCreateOrConnectWithoutCaseInput | FileCreateOrConnectWithoutCaseInput[]
    createMany?: FileCreateManyCaseInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type ActivityUncheckedCreateNestedManyWithoutCaseInput = {
    create?: XOR<ActivityCreateWithoutCaseInput, ActivityUncheckedCreateWithoutCaseInput> | ActivityCreateWithoutCaseInput[] | ActivityUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutCaseInput | ActivityCreateOrConnectWithoutCaseInput[]
    createMany?: ActivityCreateManyCaseInputEnvelope
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
  }

  export type MilestoneUncheckedCreateNestedManyWithoutCaseInput = {
    create?: XOR<MilestoneCreateWithoutCaseInput, MilestoneUncheckedCreateWithoutCaseInput> | MilestoneCreateWithoutCaseInput[] | MilestoneUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: MilestoneCreateOrConnectWithoutCaseInput | MilestoneCreateOrConnectWithoutCaseInput[]
    createMany?: MilestoneCreateManyCaseInputEnvelope
    connect?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutCaseInput = {
    create?: XOR<CommentCreateWithoutCaseInput, CommentUncheckedCreateWithoutCaseInput> | CommentCreateWithoutCaseInput[] | CommentUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutCaseInput | CommentCreateOrConnectWithoutCaseInput[]
    createMany?: CommentCreateManyCaseInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type TimeEntryUncheckedCreateNestedManyWithoutCaseInput = {
    create?: XOR<TimeEntryCreateWithoutCaseInput, TimeEntryUncheckedCreateWithoutCaseInput> | TimeEntryCreateWithoutCaseInput[] | TimeEntryUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: TimeEntryCreateOrConnectWithoutCaseInput | TimeEntryCreateOrConnectWithoutCaseInput[]
    createMany?: TimeEntryCreateManyCaseInputEnvelope
    connect?: TimeEntryWhereUniqueInput | TimeEntryWhereUniqueInput[]
  }

  export type LegalReferenceUncheckedCreateNestedManyWithoutCaseInput = {
    create?: XOR<LegalReferenceCreateWithoutCaseInput, LegalReferenceUncheckedCreateWithoutCaseInput> | LegalReferenceCreateWithoutCaseInput[] | LegalReferenceUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: LegalReferenceCreateOrConnectWithoutCaseInput | LegalReferenceCreateOrConnectWithoutCaseInput[]
    createMany?: LegalReferenceCreateManyCaseInputEnvelope
    connect?: LegalReferenceWhereUniqueInput | LegalReferenceWhereUniqueInput[]
  }

  export type WorkflowStepUncheckedCreateNestedManyWithoutCaseInput = {
    create?: XOR<WorkflowStepCreateWithoutCaseInput, WorkflowStepUncheckedCreateWithoutCaseInput> | WorkflowStepCreateWithoutCaseInput[] | WorkflowStepUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: WorkflowStepCreateOrConnectWithoutCaseInput | WorkflowStepCreateOrConnectWithoutCaseInput[]
    createMany?: WorkflowStepCreateManyCaseInputEnvelope
    connect?: WorkflowStepWhereUniqueInput | WorkflowStepWhereUniqueInput[]
  }

  export type DocumentTypeUncheckedCreateNestedManyWithoutCaseInput = {
    create?: XOR<DocumentTypeCreateWithoutCaseInput, DocumentTypeUncheckedCreateWithoutCaseInput> | DocumentTypeCreateWithoutCaseInput[] | DocumentTypeUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: DocumentTypeCreateOrConnectWithoutCaseInput | DocumentTypeCreateOrConnectWithoutCaseInput[]
    createMany?: DocumentTypeCreateManyCaseInputEnvelope
    connect?: DocumentTypeWhereUniqueInput | DocumentTypeWhereUniqueInput[]
  }

  export type LegalStatuteUncheckedCreateNestedManyWithoutCaseInput = {
    create?: XOR<LegalStatuteCreateWithoutCaseInput, LegalStatuteUncheckedCreateWithoutCaseInput> | LegalStatuteCreateWithoutCaseInput[] | LegalStatuteUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: LegalStatuteCreateOrConnectWithoutCaseInput | LegalStatuteCreateOrConnectWithoutCaseInput[]
    createMany?: LegalStatuteCreateManyCaseInputEnvelope
    connect?: LegalStatuteWhereUniqueInput | LegalStatuteWhereUniqueInput[]
  }

  export type CourtDecisionUncheckedCreateNestedManyWithoutCaseInput = {
    create?: XOR<CourtDecisionCreateWithoutCaseInput, CourtDecisionUncheckedCreateWithoutCaseInput> | CourtDecisionCreateWithoutCaseInput[] | CourtDecisionUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CourtDecisionCreateOrConnectWithoutCaseInput | CourtDecisionCreateOrConnectWithoutCaseInput[]
    createMany?: CourtDecisionCreateManyCaseInputEnvelope
    connect?: CourtDecisionWhereUniqueInput | CourtDecisionWhereUniqueInput[]
  }

  export type EnumCaseStatusFieldUpdateOperationsInput = {
    set?: $Enums.CaseStatus
  }

  export type EnumCasePriorityFieldUpdateOperationsInput = {
    set?: $Enums.CasePriority
  }

  export type CaseUpdatetagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneWithoutAssignedCasesNestedInput = {
    create?: XOR<UserCreateWithoutAssignedCasesInput, UserUncheckedCreateWithoutAssignedCasesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedCasesInput
    upsert?: UserUpsertWithoutAssignedCasesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssignedCasesInput, UserUpdateWithoutAssignedCasesInput>, UserUncheckedUpdateWithoutAssignedCasesInput>
  }

  export type UserUpdateOneWithoutCreatedCasesNestedInput = {
    create?: XOR<UserCreateWithoutCreatedCasesInput, UserUncheckedCreateWithoutCreatedCasesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedCasesInput
    upsert?: UserUpsertWithoutCreatedCasesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedCasesInput, UserUpdateWithoutCreatedCasesInput>, UserUncheckedUpdateWithoutCreatedCasesInput>
  }

  export type FileUpdateManyWithoutCaseNestedInput = {
    create?: XOR<FileCreateWithoutCaseInput, FileUncheckedCreateWithoutCaseInput> | FileCreateWithoutCaseInput[] | FileUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: FileCreateOrConnectWithoutCaseInput | FileCreateOrConnectWithoutCaseInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutCaseInput | FileUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: FileCreateManyCaseInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutCaseInput | FileUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: FileUpdateManyWithWhereWithoutCaseInput | FileUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type ActivityUpdateManyWithoutCaseNestedInput = {
    create?: XOR<ActivityCreateWithoutCaseInput, ActivityUncheckedCreateWithoutCaseInput> | ActivityCreateWithoutCaseInput[] | ActivityUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutCaseInput | ActivityCreateOrConnectWithoutCaseInput[]
    upsert?: ActivityUpsertWithWhereUniqueWithoutCaseInput | ActivityUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: ActivityCreateManyCaseInputEnvelope
    set?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    disconnect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    delete?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    update?: ActivityUpdateWithWhereUniqueWithoutCaseInput | ActivityUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: ActivityUpdateManyWithWhereWithoutCaseInput | ActivityUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
  }

  export type MilestoneUpdateManyWithoutCaseNestedInput = {
    create?: XOR<MilestoneCreateWithoutCaseInput, MilestoneUncheckedCreateWithoutCaseInput> | MilestoneCreateWithoutCaseInput[] | MilestoneUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: MilestoneCreateOrConnectWithoutCaseInput | MilestoneCreateOrConnectWithoutCaseInput[]
    upsert?: MilestoneUpsertWithWhereUniqueWithoutCaseInput | MilestoneUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: MilestoneCreateManyCaseInputEnvelope
    set?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[]
    disconnect?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[]
    delete?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[]
    connect?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[]
    update?: MilestoneUpdateWithWhereUniqueWithoutCaseInput | MilestoneUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: MilestoneUpdateManyWithWhereWithoutCaseInput | MilestoneUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: MilestoneScalarWhereInput | MilestoneScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutCaseNestedInput = {
    create?: XOR<CommentCreateWithoutCaseInput, CommentUncheckedCreateWithoutCaseInput> | CommentCreateWithoutCaseInput[] | CommentUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutCaseInput | CommentCreateOrConnectWithoutCaseInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutCaseInput | CommentUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: CommentCreateManyCaseInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutCaseInput | CommentUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutCaseInput | CommentUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type TimeEntryUpdateManyWithoutCaseNestedInput = {
    create?: XOR<TimeEntryCreateWithoutCaseInput, TimeEntryUncheckedCreateWithoutCaseInput> | TimeEntryCreateWithoutCaseInput[] | TimeEntryUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: TimeEntryCreateOrConnectWithoutCaseInput | TimeEntryCreateOrConnectWithoutCaseInput[]
    upsert?: TimeEntryUpsertWithWhereUniqueWithoutCaseInput | TimeEntryUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: TimeEntryCreateManyCaseInputEnvelope
    set?: TimeEntryWhereUniqueInput | TimeEntryWhereUniqueInput[]
    disconnect?: TimeEntryWhereUniqueInput | TimeEntryWhereUniqueInput[]
    delete?: TimeEntryWhereUniqueInput | TimeEntryWhereUniqueInput[]
    connect?: TimeEntryWhereUniqueInput | TimeEntryWhereUniqueInput[]
    update?: TimeEntryUpdateWithWhereUniqueWithoutCaseInput | TimeEntryUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: TimeEntryUpdateManyWithWhereWithoutCaseInput | TimeEntryUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: TimeEntryScalarWhereInput | TimeEntryScalarWhereInput[]
  }

  export type LegalReferenceUpdateManyWithoutCaseNestedInput = {
    create?: XOR<LegalReferenceCreateWithoutCaseInput, LegalReferenceUncheckedCreateWithoutCaseInput> | LegalReferenceCreateWithoutCaseInput[] | LegalReferenceUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: LegalReferenceCreateOrConnectWithoutCaseInput | LegalReferenceCreateOrConnectWithoutCaseInput[]
    upsert?: LegalReferenceUpsertWithWhereUniqueWithoutCaseInput | LegalReferenceUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: LegalReferenceCreateManyCaseInputEnvelope
    set?: LegalReferenceWhereUniqueInput | LegalReferenceWhereUniqueInput[]
    disconnect?: LegalReferenceWhereUniqueInput | LegalReferenceWhereUniqueInput[]
    delete?: LegalReferenceWhereUniqueInput | LegalReferenceWhereUniqueInput[]
    connect?: LegalReferenceWhereUniqueInput | LegalReferenceWhereUniqueInput[]
    update?: LegalReferenceUpdateWithWhereUniqueWithoutCaseInput | LegalReferenceUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: LegalReferenceUpdateManyWithWhereWithoutCaseInput | LegalReferenceUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: LegalReferenceScalarWhereInput | LegalReferenceScalarWhereInput[]
  }

  export type WorkflowStepUpdateManyWithoutCaseNestedInput = {
    create?: XOR<WorkflowStepCreateWithoutCaseInput, WorkflowStepUncheckedCreateWithoutCaseInput> | WorkflowStepCreateWithoutCaseInput[] | WorkflowStepUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: WorkflowStepCreateOrConnectWithoutCaseInput | WorkflowStepCreateOrConnectWithoutCaseInput[]
    upsert?: WorkflowStepUpsertWithWhereUniqueWithoutCaseInput | WorkflowStepUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: WorkflowStepCreateManyCaseInputEnvelope
    set?: WorkflowStepWhereUniqueInput | WorkflowStepWhereUniqueInput[]
    disconnect?: WorkflowStepWhereUniqueInput | WorkflowStepWhereUniqueInput[]
    delete?: WorkflowStepWhereUniqueInput | WorkflowStepWhereUniqueInput[]
    connect?: WorkflowStepWhereUniqueInput | WorkflowStepWhereUniqueInput[]
    update?: WorkflowStepUpdateWithWhereUniqueWithoutCaseInput | WorkflowStepUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: WorkflowStepUpdateManyWithWhereWithoutCaseInput | WorkflowStepUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: WorkflowStepScalarWhereInput | WorkflowStepScalarWhereInput[]
  }

  export type DocumentTypeUpdateManyWithoutCaseNestedInput = {
    create?: XOR<DocumentTypeCreateWithoutCaseInput, DocumentTypeUncheckedCreateWithoutCaseInput> | DocumentTypeCreateWithoutCaseInput[] | DocumentTypeUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: DocumentTypeCreateOrConnectWithoutCaseInput | DocumentTypeCreateOrConnectWithoutCaseInput[]
    upsert?: DocumentTypeUpsertWithWhereUniqueWithoutCaseInput | DocumentTypeUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: DocumentTypeCreateManyCaseInputEnvelope
    set?: DocumentTypeWhereUniqueInput | DocumentTypeWhereUniqueInput[]
    disconnect?: DocumentTypeWhereUniqueInput | DocumentTypeWhereUniqueInput[]
    delete?: DocumentTypeWhereUniqueInput | DocumentTypeWhereUniqueInput[]
    connect?: DocumentTypeWhereUniqueInput | DocumentTypeWhereUniqueInput[]
    update?: DocumentTypeUpdateWithWhereUniqueWithoutCaseInput | DocumentTypeUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: DocumentTypeUpdateManyWithWhereWithoutCaseInput | DocumentTypeUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: DocumentTypeScalarWhereInput | DocumentTypeScalarWhereInput[]
  }

  export type LegalStatuteUpdateManyWithoutCaseNestedInput = {
    create?: XOR<LegalStatuteCreateWithoutCaseInput, LegalStatuteUncheckedCreateWithoutCaseInput> | LegalStatuteCreateWithoutCaseInput[] | LegalStatuteUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: LegalStatuteCreateOrConnectWithoutCaseInput | LegalStatuteCreateOrConnectWithoutCaseInput[]
    upsert?: LegalStatuteUpsertWithWhereUniqueWithoutCaseInput | LegalStatuteUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: LegalStatuteCreateManyCaseInputEnvelope
    set?: LegalStatuteWhereUniqueInput | LegalStatuteWhereUniqueInput[]
    disconnect?: LegalStatuteWhereUniqueInput | LegalStatuteWhereUniqueInput[]
    delete?: LegalStatuteWhereUniqueInput | LegalStatuteWhereUniqueInput[]
    connect?: LegalStatuteWhereUniqueInput | LegalStatuteWhereUniqueInput[]
    update?: LegalStatuteUpdateWithWhereUniqueWithoutCaseInput | LegalStatuteUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: LegalStatuteUpdateManyWithWhereWithoutCaseInput | LegalStatuteUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: LegalStatuteScalarWhereInput | LegalStatuteScalarWhereInput[]
  }

  export type CourtDecisionUpdateManyWithoutCaseNestedInput = {
    create?: XOR<CourtDecisionCreateWithoutCaseInput, CourtDecisionUncheckedCreateWithoutCaseInput> | CourtDecisionCreateWithoutCaseInput[] | CourtDecisionUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CourtDecisionCreateOrConnectWithoutCaseInput | CourtDecisionCreateOrConnectWithoutCaseInput[]
    upsert?: CourtDecisionUpsertWithWhereUniqueWithoutCaseInput | CourtDecisionUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: CourtDecisionCreateManyCaseInputEnvelope
    set?: CourtDecisionWhereUniqueInput | CourtDecisionWhereUniqueInput[]
    disconnect?: CourtDecisionWhereUniqueInput | CourtDecisionWhereUniqueInput[]
    delete?: CourtDecisionWhereUniqueInput | CourtDecisionWhereUniqueInput[]
    connect?: CourtDecisionWhereUniqueInput | CourtDecisionWhereUniqueInput[]
    update?: CourtDecisionUpdateWithWhereUniqueWithoutCaseInput | CourtDecisionUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: CourtDecisionUpdateManyWithWhereWithoutCaseInput | CourtDecisionUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: CourtDecisionScalarWhereInput | CourtDecisionScalarWhereInput[]
  }

  export type FileUncheckedUpdateManyWithoutCaseNestedInput = {
    create?: XOR<FileCreateWithoutCaseInput, FileUncheckedCreateWithoutCaseInput> | FileCreateWithoutCaseInput[] | FileUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: FileCreateOrConnectWithoutCaseInput | FileCreateOrConnectWithoutCaseInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutCaseInput | FileUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: FileCreateManyCaseInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutCaseInput | FileUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: FileUpdateManyWithWhereWithoutCaseInput | FileUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type ActivityUncheckedUpdateManyWithoutCaseNestedInput = {
    create?: XOR<ActivityCreateWithoutCaseInput, ActivityUncheckedCreateWithoutCaseInput> | ActivityCreateWithoutCaseInput[] | ActivityUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutCaseInput | ActivityCreateOrConnectWithoutCaseInput[]
    upsert?: ActivityUpsertWithWhereUniqueWithoutCaseInput | ActivityUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: ActivityCreateManyCaseInputEnvelope
    set?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    disconnect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    delete?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    update?: ActivityUpdateWithWhereUniqueWithoutCaseInput | ActivityUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: ActivityUpdateManyWithWhereWithoutCaseInput | ActivityUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
  }

  export type MilestoneUncheckedUpdateManyWithoutCaseNestedInput = {
    create?: XOR<MilestoneCreateWithoutCaseInput, MilestoneUncheckedCreateWithoutCaseInput> | MilestoneCreateWithoutCaseInput[] | MilestoneUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: MilestoneCreateOrConnectWithoutCaseInput | MilestoneCreateOrConnectWithoutCaseInput[]
    upsert?: MilestoneUpsertWithWhereUniqueWithoutCaseInput | MilestoneUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: MilestoneCreateManyCaseInputEnvelope
    set?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[]
    disconnect?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[]
    delete?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[]
    connect?: MilestoneWhereUniqueInput | MilestoneWhereUniqueInput[]
    update?: MilestoneUpdateWithWhereUniqueWithoutCaseInput | MilestoneUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: MilestoneUpdateManyWithWhereWithoutCaseInput | MilestoneUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: MilestoneScalarWhereInput | MilestoneScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutCaseNestedInput = {
    create?: XOR<CommentCreateWithoutCaseInput, CommentUncheckedCreateWithoutCaseInput> | CommentCreateWithoutCaseInput[] | CommentUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutCaseInput | CommentCreateOrConnectWithoutCaseInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutCaseInput | CommentUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: CommentCreateManyCaseInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutCaseInput | CommentUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutCaseInput | CommentUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type TimeEntryUncheckedUpdateManyWithoutCaseNestedInput = {
    create?: XOR<TimeEntryCreateWithoutCaseInput, TimeEntryUncheckedCreateWithoutCaseInput> | TimeEntryCreateWithoutCaseInput[] | TimeEntryUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: TimeEntryCreateOrConnectWithoutCaseInput | TimeEntryCreateOrConnectWithoutCaseInput[]
    upsert?: TimeEntryUpsertWithWhereUniqueWithoutCaseInput | TimeEntryUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: TimeEntryCreateManyCaseInputEnvelope
    set?: TimeEntryWhereUniqueInput | TimeEntryWhereUniqueInput[]
    disconnect?: TimeEntryWhereUniqueInput | TimeEntryWhereUniqueInput[]
    delete?: TimeEntryWhereUniqueInput | TimeEntryWhereUniqueInput[]
    connect?: TimeEntryWhereUniqueInput | TimeEntryWhereUniqueInput[]
    update?: TimeEntryUpdateWithWhereUniqueWithoutCaseInput | TimeEntryUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: TimeEntryUpdateManyWithWhereWithoutCaseInput | TimeEntryUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: TimeEntryScalarWhereInput | TimeEntryScalarWhereInput[]
  }

  export type LegalReferenceUncheckedUpdateManyWithoutCaseNestedInput = {
    create?: XOR<LegalReferenceCreateWithoutCaseInput, LegalReferenceUncheckedCreateWithoutCaseInput> | LegalReferenceCreateWithoutCaseInput[] | LegalReferenceUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: LegalReferenceCreateOrConnectWithoutCaseInput | LegalReferenceCreateOrConnectWithoutCaseInput[]
    upsert?: LegalReferenceUpsertWithWhereUniqueWithoutCaseInput | LegalReferenceUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: LegalReferenceCreateManyCaseInputEnvelope
    set?: LegalReferenceWhereUniqueInput | LegalReferenceWhereUniqueInput[]
    disconnect?: LegalReferenceWhereUniqueInput | LegalReferenceWhereUniqueInput[]
    delete?: LegalReferenceWhereUniqueInput | LegalReferenceWhereUniqueInput[]
    connect?: LegalReferenceWhereUniqueInput | LegalReferenceWhereUniqueInput[]
    update?: LegalReferenceUpdateWithWhereUniqueWithoutCaseInput | LegalReferenceUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: LegalReferenceUpdateManyWithWhereWithoutCaseInput | LegalReferenceUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: LegalReferenceScalarWhereInput | LegalReferenceScalarWhereInput[]
  }

  export type WorkflowStepUncheckedUpdateManyWithoutCaseNestedInput = {
    create?: XOR<WorkflowStepCreateWithoutCaseInput, WorkflowStepUncheckedCreateWithoutCaseInput> | WorkflowStepCreateWithoutCaseInput[] | WorkflowStepUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: WorkflowStepCreateOrConnectWithoutCaseInput | WorkflowStepCreateOrConnectWithoutCaseInput[]
    upsert?: WorkflowStepUpsertWithWhereUniqueWithoutCaseInput | WorkflowStepUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: WorkflowStepCreateManyCaseInputEnvelope
    set?: WorkflowStepWhereUniqueInput | WorkflowStepWhereUniqueInput[]
    disconnect?: WorkflowStepWhereUniqueInput | WorkflowStepWhereUniqueInput[]
    delete?: WorkflowStepWhereUniqueInput | WorkflowStepWhereUniqueInput[]
    connect?: WorkflowStepWhereUniqueInput | WorkflowStepWhereUniqueInput[]
    update?: WorkflowStepUpdateWithWhereUniqueWithoutCaseInput | WorkflowStepUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: WorkflowStepUpdateManyWithWhereWithoutCaseInput | WorkflowStepUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: WorkflowStepScalarWhereInput | WorkflowStepScalarWhereInput[]
  }

  export type DocumentTypeUncheckedUpdateManyWithoutCaseNestedInput = {
    create?: XOR<DocumentTypeCreateWithoutCaseInput, DocumentTypeUncheckedCreateWithoutCaseInput> | DocumentTypeCreateWithoutCaseInput[] | DocumentTypeUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: DocumentTypeCreateOrConnectWithoutCaseInput | DocumentTypeCreateOrConnectWithoutCaseInput[]
    upsert?: DocumentTypeUpsertWithWhereUniqueWithoutCaseInput | DocumentTypeUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: DocumentTypeCreateManyCaseInputEnvelope
    set?: DocumentTypeWhereUniqueInput | DocumentTypeWhereUniqueInput[]
    disconnect?: DocumentTypeWhereUniqueInput | DocumentTypeWhereUniqueInput[]
    delete?: DocumentTypeWhereUniqueInput | DocumentTypeWhereUniqueInput[]
    connect?: DocumentTypeWhereUniqueInput | DocumentTypeWhereUniqueInput[]
    update?: DocumentTypeUpdateWithWhereUniqueWithoutCaseInput | DocumentTypeUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: DocumentTypeUpdateManyWithWhereWithoutCaseInput | DocumentTypeUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: DocumentTypeScalarWhereInput | DocumentTypeScalarWhereInput[]
  }

  export type LegalStatuteUncheckedUpdateManyWithoutCaseNestedInput = {
    create?: XOR<LegalStatuteCreateWithoutCaseInput, LegalStatuteUncheckedCreateWithoutCaseInput> | LegalStatuteCreateWithoutCaseInput[] | LegalStatuteUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: LegalStatuteCreateOrConnectWithoutCaseInput | LegalStatuteCreateOrConnectWithoutCaseInput[]
    upsert?: LegalStatuteUpsertWithWhereUniqueWithoutCaseInput | LegalStatuteUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: LegalStatuteCreateManyCaseInputEnvelope
    set?: LegalStatuteWhereUniqueInput | LegalStatuteWhereUniqueInput[]
    disconnect?: LegalStatuteWhereUniqueInput | LegalStatuteWhereUniqueInput[]
    delete?: LegalStatuteWhereUniqueInput | LegalStatuteWhereUniqueInput[]
    connect?: LegalStatuteWhereUniqueInput | LegalStatuteWhereUniqueInput[]
    update?: LegalStatuteUpdateWithWhereUniqueWithoutCaseInput | LegalStatuteUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: LegalStatuteUpdateManyWithWhereWithoutCaseInput | LegalStatuteUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: LegalStatuteScalarWhereInput | LegalStatuteScalarWhereInput[]
  }

  export type CourtDecisionUncheckedUpdateManyWithoutCaseNestedInput = {
    create?: XOR<CourtDecisionCreateWithoutCaseInput, CourtDecisionUncheckedCreateWithoutCaseInput> | CourtDecisionCreateWithoutCaseInput[] | CourtDecisionUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CourtDecisionCreateOrConnectWithoutCaseInput | CourtDecisionCreateOrConnectWithoutCaseInput[]
    upsert?: CourtDecisionUpsertWithWhereUniqueWithoutCaseInput | CourtDecisionUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: CourtDecisionCreateManyCaseInputEnvelope
    set?: CourtDecisionWhereUniqueInput | CourtDecisionWhereUniqueInput[]
    disconnect?: CourtDecisionWhereUniqueInput | CourtDecisionWhereUniqueInput[]
    delete?: CourtDecisionWhereUniqueInput | CourtDecisionWhereUniqueInput[]
    connect?: CourtDecisionWhereUniqueInput | CourtDecisionWhereUniqueInput[]
    update?: CourtDecisionUpdateWithWhereUniqueWithoutCaseInput | CourtDecisionUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: CourtDecisionUpdateManyWithWhereWithoutCaseInput | CourtDecisionUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: CourtDecisionScalarWhereInput | CourtDecisionScalarWhereInput[]
  }

  export type CaseCreateNestedOneWithoutFilesInput = {
    create?: XOR<CaseCreateWithoutFilesInput, CaseUncheckedCreateWithoutFilesInput>
    connectOrCreate?: CaseCreateOrConnectWithoutFilesInput
    connect?: CaseWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutFileUploadsInput = {
    create?: XOR<UserCreateWithoutFileUploadsInput, UserUncheckedCreateWithoutFileUploadsInput>
    connectOrCreate?: UserCreateOrConnectWithoutFileUploadsInput
    connect?: UserWhereUniqueInput
  }

  export type CaseUpdateOneRequiredWithoutFilesNestedInput = {
    create?: XOR<CaseCreateWithoutFilesInput, CaseUncheckedCreateWithoutFilesInput>
    connectOrCreate?: CaseCreateOrConnectWithoutFilesInput
    upsert?: CaseUpsertWithoutFilesInput
    connect?: CaseWhereUniqueInput
    update?: XOR<XOR<CaseUpdateToOneWithWhereWithoutFilesInput, CaseUpdateWithoutFilesInput>, CaseUncheckedUpdateWithoutFilesInput>
  }

  export type UserUpdateOneRequiredWithoutFileUploadsNestedInput = {
    create?: XOR<UserCreateWithoutFileUploadsInput, UserUncheckedCreateWithoutFileUploadsInput>
    connectOrCreate?: UserCreateOrConnectWithoutFileUploadsInput
    upsert?: UserUpsertWithoutFileUploadsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFileUploadsInput, UserUpdateWithoutFileUploadsInput>, UserUncheckedUpdateWithoutFileUploadsInput>
  }

  export type UserCreateNestedOneWithoutActivitiesInput = {
    create?: XOR<UserCreateWithoutActivitiesInput, UserUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutActivitiesInput
    connect?: UserWhereUniqueInput
  }

  export type CaseCreateNestedOneWithoutActivitiesInput = {
    create?: XOR<CaseCreateWithoutActivitiesInput, CaseUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: CaseCreateOrConnectWithoutActivitiesInput
    connect?: CaseWhereUniqueInput
  }

  export type UserUpdateOneWithoutActivitiesNestedInput = {
    create?: XOR<UserCreateWithoutActivitiesInput, UserUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutActivitiesInput
    upsert?: UserUpsertWithoutActivitiesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutActivitiesInput, UserUpdateWithoutActivitiesInput>, UserUncheckedUpdateWithoutActivitiesInput>
  }

  export type CaseUpdateOneWithoutActivitiesNestedInput = {
    create?: XOR<CaseCreateWithoutActivitiesInput, CaseUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: CaseCreateOrConnectWithoutActivitiesInput
    upsert?: CaseUpsertWithoutActivitiesInput
    disconnect?: CaseWhereInput | boolean
    delete?: CaseWhereInput | boolean
    connect?: CaseWhereUniqueInput
    update?: XOR<XOR<CaseUpdateToOneWithWhereWithoutActivitiesInput, CaseUpdateWithoutActivitiesInput>, CaseUncheckedUpdateWithoutActivitiesInput>
  }

  export type CaseCreateNestedOneWithoutMilestonesInput = {
    create?: XOR<CaseCreateWithoutMilestonesInput, CaseUncheckedCreateWithoutMilestonesInput>
    connectOrCreate?: CaseCreateOrConnectWithoutMilestonesInput
    connect?: CaseWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCompletedMilestonesInput = {
    create?: XOR<UserCreateWithoutCompletedMilestonesInput, UserUncheckedCreateWithoutCompletedMilestonesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCompletedMilestonesInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAssignedMilestonesInput = {
    create?: XOR<UserCreateWithoutAssignedMilestonesInput, UserUncheckedCreateWithoutAssignedMilestonesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedMilestonesInput
    connect?: UserWhereUniqueInput
  }

  export type CaseUpdateOneRequiredWithoutMilestonesNestedInput = {
    create?: XOR<CaseCreateWithoutMilestonesInput, CaseUncheckedCreateWithoutMilestonesInput>
    connectOrCreate?: CaseCreateOrConnectWithoutMilestonesInput
    upsert?: CaseUpsertWithoutMilestonesInput
    connect?: CaseWhereUniqueInput
    update?: XOR<XOR<CaseUpdateToOneWithWhereWithoutMilestonesInput, CaseUpdateWithoutMilestonesInput>, CaseUncheckedUpdateWithoutMilestonesInput>
  }

  export type UserUpdateOneWithoutCompletedMilestonesNestedInput = {
    create?: XOR<UserCreateWithoutCompletedMilestonesInput, UserUncheckedCreateWithoutCompletedMilestonesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCompletedMilestonesInput
    upsert?: UserUpsertWithoutCompletedMilestonesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCompletedMilestonesInput, UserUpdateWithoutCompletedMilestonesInput>, UserUncheckedUpdateWithoutCompletedMilestonesInput>
  }

  export type UserUpdateOneWithoutAssignedMilestonesNestedInput = {
    create?: XOR<UserCreateWithoutAssignedMilestonesInput, UserUncheckedCreateWithoutAssignedMilestonesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedMilestonesInput
    upsert?: UserUpsertWithoutAssignedMilestonesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssignedMilestonesInput, UserUpdateWithoutAssignedMilestonesInput>, UserUncheckedUpdateWithoutAssignedMilestonesInput>
  }

  export type CaseCreateNestedOneWithoutCommentsInput = {
    create?: XOR<CaseCreateWithoutCommentsInput, CaseUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: CaseCreateOrConnectWithoutCommentsInput
    connect?: CaseWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCommentsInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    connect?: UserWhereUniqueInput
  }

  export type CaseUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<CaseCreateWithoutCommentsInput, CaseUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: CaseCreateOrConnectWithoutCommentsInput
    upsert?: CaseUpsertWithoutCommentsInput
    connect?: CaseWhereUniqueInput
    update?: XOR<XOR<CaseUpdateToOneWithWhereWithoutCommentsInput, CaseUpdateWithoutCommentsInput>, CaseUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    upsert?: UserUpsertWithoutCommentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCommentsInput, UserUpdateWithoutCommentsInput>, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type CaseCreateNestedOneWithoutTimeEntriesInput = {
    create?: XOR<CaseCreateWithoutTimeEntriesInput, CaseUncheckedCreateWithoutTimeEntriesInput>
    connectOrCreate?: CaseCreateOrConnectWithoutTimeEntriesInput
    connect?: CaseWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTimeEntriesInput = {
    create?: XOR<UserCreateWithoutTimeEntriesInput, UserUncheckedCreateWithoutTimeEntriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutTimeEntriesInput
    connect?: UserWhereUniqueInput
  }

  export type CaseUpdateOneRequiredWithoutTimeEntriesNestedInput = {
    create?: XOR<CaseCreateWithoutTimeEntriesInput, CaseUncheckedCreateWithoutTimeEntriesInput>
    connectOrCreate?: CaseCreateOrConnectWithoutTimeEntriesInput
    upsert?: CaseUpsertWithoutTimeEntriesInput
    connect?: CaseWhereUniqueInput
    update?: XOR<XOR<CaseUpdateToOneWithWhereWithoutTimeEntriesInput, CaseUpdateWithoutTimeEntriesInput>, CaseUncheckedUpdateWithoutTimeEntriesInput>
  }

  export type UserUpdateOneRequiredWithoutTimeEntriesNestedInput = {
    create?: XOR<UserCreateWithoutTimeEntriesInput, UserUncheckedCreateWithoutTimeEntriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutTimeEntriesInput
    upsert?: UserUpsertWithoutTimeEntriesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTimeEntriesInput, UserUpdateWithoutTimeEntriesInput>, UserUncheckedUpdateWithoutTimeEntriesInput>
  }

  export type CaseCreateNestedOneWithoutLegalRefsInput = {
    create?: XOR<CaseCreateWithoutLegalRefsInput, CaseUncheckedCreateWithoutLegalRefsInput>
    connectOrCreate?: CaseCreateOrConnectWithoutLegalRefsInput
    connect?: CaseWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutLegalRefsInput = {
    create?: XOR<UserCreateWithoutLegalRefsInput, UserUncheckedCreateWithoutLegalRefsInput>
    connectOrCreate?: UserCreateOrConnectWithoutLegalRefsInput
    connect?: UserWhereUniqueInput
  }

  export type CaseUpdateOneRequiredWithoutLegalRefsNestedInput = {
    create?: XOR<CaseCreateWithoutLegalRefsInput, CaseUncheckedCreateWithoutLegalRefsInput>
    connectOrCreate?: CaseCreateOrConnectWithoutLegalRefsInput
    upsert?: CaseUpsertWithoutLegalRefsInput
    connect?: CaseWhereUniqueInput
    update?: XOR<XOR<CaseUpdateToOneWithWhereWithoutLegalRefsInput, CaseUpdateWithoutLegalRefsInput>, CaseUncheckedUpdateWithoutLegalRefsInput>
  }

  export type UserUpdateOneWithoutLegalRefsNestedInput = {
    create?: XOR<UserCreateWithoutLegalRefsInput, UserUncheckedCreateWithoutLegalRefsInput>
    connectOrCreate?: UserCreateOrConnectWithoutLegalRefsInput
    upsert?: UserUpsertWithoutLegalRefsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLegalRefsInput, UserUpdateWithoutLegalRefsInput>, UserUncheckedUpdateWithoutLegalRefsInput>
  }

  export type WorkflowStepCreatedependenciesInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutWorkflowStepsInput = {
    create?: XOR<UserCreateWithoutWorkflowStepsInput, UserUncheckedCreateWithoutWorkflowStepsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkflowStepsInput
    connect?: UserWhereUniqueInput
  }

  export type CaseCreateNestedOneWithoutWorkflowStepsInput = {
    create?: XOR<CaseCreateWithoutWorkflowStepsInput, CaseUncheckedCreateWithoutWorkflowStepsInput>
    connectOrCreate?: CaseCreateOrConnectWithoutWorkflowStepsInput
    connect?: CaseWhereUniqueInput
  }

  export type WorkflowStepUpdatedependenciesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdateOneWithoutWorkflowStepsNestedInput = {
    create?: XOR<UserCreateWithoutWorkflowStepsInput, UserUncheckedCreateWithoutWorkflowStepsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkflowStepsInput
    upsert?: UserUpsertWithoutWorkflowStepsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWorkflowStepsInput, UserUpdateWithoutWorkflowStepsInput>, UserUncheckedUpdateWithoutWorkflowStepsInput>
  }

  export type CaseUpdateOneRequiredWithoutWorkflowStepsNestedInput = {
    create?: XOR<CaseCreateWithoutWorkflowStepsInput, CaseUncheckedCreateWithoutWorkflowStepsInput>
    connectOrCreate?: CaseCreateOrConnectWithoutWorkflowStepsInput
    upsert?: CaseUpsertWithoutWorkflowStepsInput
    connect?: CaseWhereUniqueInput
    update?: XOR<XOR<CaseUpdateToOneWithWhereWithoutWorkflowStepsInput, CaseUpdateWithoutWorkflowStepsInput>, CaseUncheckedUpdateWithoutWorkflowStepsInput>
  }

  export type CaseCreateNestedOneWithoutDocumentTypesInput = {
    create?: XOR<CaseCreateWithoutDocumentTypesInput, CaseUncheckedCreateWithoutDocumentTypesInput>
    connectOrCreate?: CaseCreateOrConnectWithoutDocumentTypesInput
    connect?: CaseWhereUniqueInput
  }

  export type CaseUpdateOneRequiredWithoutDocumentTypesNestedInput = {
    create?: XOR<CaseCreateWithoutDocumentTypesInput, CaseUncheckedCreateWithoutDocumentTypesInput>
    connectOrCreate?: CaseCreateOrConnectWithoutDocumentTypesInput
    upsert?: CaseUpsertWithoutDocumentTypesInput
    connect?: CaseWhereUniqueInput
    update?: XOR<XOR<CaseUpdateToOneWithWhereWithoutDocumentTypesInput, CaseUpdateWithoutDocumentTypesInput>, CaseUncheckedUpdateWithoutDocumentTypesInput>
  }

  export type CaseCreateNestedOneWithoutLegalStatutesInput = {
    create?: XOR<CaseCreateWithoutLegalStatutesInput, CaseUncheckedCreateWithoutLegalStatutesInput>
    connectOrCreate?: CaseCreateOrConnectWithoutLegalStatutesInput
    connect?: CaseWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutLegalStatutesInput = {
    create?: XOR<UserCreateWithoutLegalStatutesInput, UserUncheckedCreateWithoutLegalStatutesInput>
    connectOrCreate?: UserCreateOrConnectWithoutLegalStatutesInput
    connect?: UserWhereUniqueInput
  }

  export type CaseUpdateOneRequiredWithoutLegalStatutesNestedInput = {
    create?: XOR<CaseCreateWithoutLegalStatutesInput, CaseUncheckedCreateWithoutLegalStatutesInput>
    connectOrCreate?: CaseCreateOrConnectWithoutLegalStatutesInput
    upsert?: CaseUpsertWithoutLegalStatutesInput
    connect?: CaseWhereUniqueInput
    update?: XOR<XOR<CaseUpdateToOneWithWhereWithoutLegalStatutesInput, CaseUpdateWithoutLegalStatutesInput>, CaseUncheckedUpdateWithoutLegalStatutesInput>
  }

  export type UserUpdateOneWithoutLegalStatutesNestedInput = {
    create?: XOR<UserCreateWithoutLegalStatutesInput, UserUncheckedCreateWithoutLegalStatutesInput>
    connectOrCreate?: UserCreateOrConnectWithoutLegalStatutesInput
    upsert?: UserUpsertWithoutLegalStatutesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLegalStatutesInput, UserUpdateWithoutLegalStatutesInput>, UserUncheckedUpdateWithoutLegalStatutesInput>
  }

  export type CaseCreateNestedOneWithoutCourtDecisionsInput = {
    create?: XOR<CaseCreateWithoutCourtDecisionsInput, CaseUncheckedCreateWithoutCourtDecisionsInput>
    connectOrCreate?: CaseCreateOrConnectWithoutCourtDecisionsInput
    connect?: CaseWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCourtDecisionsInput = {
    create?: XOR<UserCreateWithoutCourtDecisionsInput, UserUncheckedCreateWithoutCourtDecisionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCourtDecisionsInput
    connect?: UserWhereUniqueInput
  }

  export type CaseUpdateOneRequiredWithoutCourtDecisionsNestedInput = {
    create?: XOR<CaseCreateWithoutCourtDecisionsInput, CaseUncheckedCreateWithoutCourtDecisionsInput>
    connectOrCreate?: CaseCreateOrConnectWithoutCourtDecisionsInput
    upsert?: CaseUpsertWithoutCourtDecisionsInput
    connect?: CaseWhereUniqueInput
    update?: XOR<XOR<CaseUpdateToOneWithWhereWithoutCourtDecisionsInput, CaseUpdateWithoutCourtDecisionsInput>, CaseUncheckedUpdateWithoutCourtDecisionsInput>
  }

  export type UserUpdateOneWithoutCourtDecisionsNestedInput = {
    create?: XOR<UserCreateWithoutCourtDecisionsInput, UserUncheckedCreateWithoutCourtDecisionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCourtDecisionsInput
    upsert?: UserUpsertWithoutCourtDecisionsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCourtDecisionsInput, UserUpdateWithoutCourtDecisionsInput>, UserUncheckedUpdateWithoutCourtDecisionsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumCaseStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CaseStatus | EnumCaseStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CaseStatus[] | ListEnumCaseStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CaseStatus[] | ListEnumCaseStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCaseStatusFilter<$PrismaModel> | $Enums.CaseStatus
  }

  export type NestedEnumCasePriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.CasePriority | EnumCasePriorityFieldRefInput<$PrismaModel>
    in?: $Enums.CasePriority[] | ListEnumCasePriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.CasePriority[] | ListEnumCasePriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumCasePriorityFilter<$PrismaModel> | $Enums.CasePriority
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumCaseStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CaseStatus | EnumCaseStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CaseStatus[] | ListEnumCaseStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CaseStatus[] | ListEnumCaseStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCaseStatusWithAggregatesFilter<$PrismaModel> | $Enums.CaseStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCaseStatusFilter<$PrismaModel>
    _max?: NestedEnumCaseStatusFilter<$PrismaModel>
  }

  export type NestedEnumCasePriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CasePriority | EnumCasePriorityFieldRefInput<$PrismaModel>
    in?: $Enums.CasePriority[] | ListEnumCasePriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.CasePriority[] | ListEnumCasePriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumCasePriorityWithAggregatesFilter<$PrismaModel> | $Enums.CasePriority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCasePriorityFilter<$PrismaModel>
    _max?: NestedEnumCasePriorityFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type UserCreateWithoutAccountsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    firstName?: string | null
    lastName?: string | null
    phone?: string | null
    position?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionCreateNestedManyWithoutUserInput
    assignedCases?: CaseCreateNestedManyWithoutAssignedToInput
    createdCases?: CaseCreateNestedManyWithoutCreatedByInput
    activities?: ActivityCreateNestedManyWithoutUserInput
    fileUploads?: FileCreateNestedManyWithoutUploadedByInput
    completedMilestones?: MilestoneCreateNestedManyWithoutCompletedByInput
    assignedMilestones?: MilestoneCreateNestedManyWithoutAssignedToInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    timeEntries?: TimeEntryCreateNestedManyWithoutUserInput
    legalRefs?: LegalReferenceCreateNestedManyWithoutAddedByInput
    workflowSteps?: WorkflowStepCreateNestedManyWithoutAssignedToInput
    legalStatutes?: LegalStatuteCreateNestedManyWithoutAddedByInput
    courtDecisions?: CourtDecisionCreateNestedManyWithoutAddedByInput
  }

  export type UserUncheckedCreateWithoutAccountsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    firstName?: string | null
    lastName?: string | null
    phone?: string | null
    position?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    assignedCases?: CaseUncheckedCreateNestedManyWithoutAssignedToInput
    createdCases?: CaseUncheckedCreateNestedManyWithoutCreatedByInput
    activities?: ActivityUncheckedCreateNestedManyWithoutUserInput
    fileUploads?: FileUncheckedCreateNestedManyWithoutUploadedByInput
    completedMilestones?: MilestoneUncheckedCreateNestedManyWithoutCompletedByInput
    assignedMilestones?: MilestoneUncheckedCreateNestedManyWithoutAssignedToInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    timeEntries?: TimeEntryUncheckedCreateNestedManyWithoutUserInput
    legalRefs?: LegalReferenceUncheckedCreateNestedManyWithoutAddedByInput
    workflowSteps?: WorkflowStepUncheckedCreateNestedManyWithoutAssignedToInput
    legalStatutes?: LegalStatuteUncheckedCreateNestedManyWithoutAddedByInput
    courtDecisions?: CourtDecisionUncheckedCreateNestedManyWithoutAddedByInput
  }

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    assignedCases?: CaseUpdateManyWithoutAssignedToNestedInput
    createdCases?: CaseUpdateManyWithoutCreatedByNestedInput
    activities?: ActivityUpdateManyWithoutUserNestedInput
    fileUploads?: FileUpdateManyWithoutUploadedByNestedInput
    completedMilestones?: MilestoneUpdateManyWithoutCompletedByNestedInput
    assignedMilestones?: MilestoneUpdateManyWithoutAssignedToNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    timeEntries?: TimeEntryUpdateManyWithoutUserNestedInput
    legalRefs?: LegalReferenceUpdateManyWithoutAddedByNestedInput
    workflowSteps?: WorkflowStepUpdateManyWithoutAssignedToNestedInput
    legalStatutes?: LegalStatuteUpdateManyWithoutAddedByNestedInput
    courtDecisions?: CourtDecisionUpdateManyWithoutAddedByNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    assignedCases?: CaseUncheckedUpdateManyWithoutAssignedToNestedInput
    createdCases?: CaseUncheckedUpdateManyWithoutCreatedByNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    fileUploads?: FileUncheckedUpdateManyWithoutUploadedByNestedInput
    completedMilestones?: MilestoneUncheckedUpdateManyWithoutCompletedByNestedInput
    assignedMilestones?: MilestoneUncheckedUpdateManyWithoutAssignedToNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    timeEntries?: TimeEntryUncheckedUpdateManyWithoutUserNestedInput
    legalRefs?: LegalReferenceUncheckedUpdateManyWithoutAddedByNestedInput
    workflowSteps?: WorkflowStepUncheckedUpdateManyWithoutAssignedToNestedInput
    legalStatutes?: LegalStatuteUncheckedUpdateManyWithoutAddedByNestedInput
    courtDecisions?: CourtDecisionUncheckedUpdateManyWithoutAddedByNestedInput
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    firstName?: string | null
    lastName?: string | null
    phone?: string | null
    position?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    assignedCases?: CaseCreateNestedManyWithoutAssignedToInput
    createdCases?: CaseCreateNestedManyWithoutCreatedByInput
    activities?: ActivityCreateNestedManyWithoutUserInput
    fileUploads?: FileCreateNestedManyWithoutUploadedByInput
    completedMilestones?: MilestoneCreateNestedManyWithoutCompletedByInput
    assignedMilestones?: MilestoneCreateNestedManyWithoutAssignedToInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    timeEntries?: TimeEntryCreateNestedManyWithoutUserInput
    legalRefs?: LegalReferenceCreateNestedManyWithoutAddedByInput
    workflowSteps?: WorkflowStepCreateNestedManyWithoutAssignedToInput
    legalStatutes?: LegalStatuteCreateNestedManyWithoutAddedByInput
    courtDecisions?: CourtDecisionCreateNestedManyWithoutAddedByInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    firstName?: string | null
    lastName?: string | null
    phone?: string | null
    position?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    assignedCases?: CaseUncheckedCreateNestedManyWithoutAssignedToInput
    createdCases?: CaseUncheckedCreateNestedManyWithoutCreatedByInput
    activities?: ActivityUncheckedCreateNestedManyWithoutUserInput
    fileUploads?: FileUncheckedCreateNestedManyWithoutUploadedByInput
    completedMilestones?: MilestoneUncheckedCreateNestedManyWithoutCompletedByInput
    assignedMilestones?: MilestoneUncheckedCreateNestedManyWithoutAssignedToInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    timeEntries?: TimeEntryUncheckedCreateNestedManyWithoutUserInput
    legalRefs?: LegalReferenceUncheckedCreateNestedManyWithoutAddedByInput
    workflowSteps?: WorkflowStepUncheckedCreateNestedManyWithoutAssignedToInput
    legalStatutes?: LegalStatuteUncheckedCreateNestedManyWithoutAddedByInput
    courtDecisions?: CourtDecisionUncheckedCreateNestedManyWithoutAddedByInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    assignedCases?: CaseUpdateManyWithoutAssignedToNestedInput
    createdCases?: CaseUpdateManyWithoutCreatedByNestedInput
    activities?: ActivityUpdateManyWithoutUserNestedInput
    fileUploads?: FileUpdateManyWithoutUploadedByNestedInput
    completedMilestones?: MilestoneUpdateManyWithoutCompletedByNestedInput
    assignedMilestones?: MilestoneUpdateManyWithoutAssignedToNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    timeEntries?: TimeEntryUpdateManyWithoutUserNestedInput
    legalRefs?: LegalReferenceUpdateManyWithoutAddedByNestedInput
    workflowSteps?: WorkflowStepUpdateManyWithoutAssignedToNestedInput
    legalStatutes?: LegalStatuteUpdateManyWithoutAddedByNestedInput
    courtDecisions?: CourtDecisionUpdateManyWithoutAddedByNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    assignedCases?: CaseUncheckedUpdateManyWithoutAssignedToNestedInput
    createdCases?: CaseUncheckedUpdateManyWithoutCreatedByNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    fileUploads?: FileUncheckedUpdateManyWithoutUploadedByNestedInput
    completedMilestones?: MilestoneUncheckedUpdateManyWithoutCompletedByNestedInput
    assignedMilestones?: MilestoneUncheckedUpdateManyWithoutAssignedToNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    timeEntries?: TimeEntryUncheckedUpdateManyWithoutUserNestedInput
    legalRefs?: LegalReferenceUncheckedUpdateManyWithoutAddedByNestedInput
    workflowSteps?: WorkflowStepUncheckedUpdateManyWithoutAssignedToNestedInput
    legalStatutes?: LegalStatuteUncheckedUpdateManyWithoutAddedByNestedInput
    courtDecisions?: CourtDecisionUncheckedUpdateManyWithoutAddedByNestedInput
  }

  export type AccountCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: AccountCreateManyUserInput | AccountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CaseCreateWithoutAssignedToInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    priority?: $Enums.CasePriority
    clientName?: string | null
    clientEmail?: string | null
    clientPhone?: string | null
    dueDate?: Date | string | null
    tags?: CaseCreatetagsInput | string[]
    notes?: string | null
    progress?: number
    estimatedHours?: number | null
    actualHours?: number
    hourlyRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: UserCreateNestedOneWithoutCreatedCasesInput
    files?: FileCreateNestedManyWithoutCaseInput
    activities?: ActivityCreateNestedManyWithoutCaseInput
    milestones?: MilestoneCreateNestedManyWithoutCaseInput
    comments?: CommentCreateNestedManyWithoutCaseInput
    timeEntries?: TimeEntryCreateNestedManyWithoutCaseInput
    legalRefs?: LegalReferenceCreateNestedManyWithoutCaseInput
    workflowSteps?: WorkflowStepCreateNestedManyWithoutCaseInput
    documentTypes?: DocumentTypeCreateNestedManyWithoutCaseInput
    legalStatutes?: LegalStatuteCreateNestedManyWithoutCaseInput
    courtDecisions?: CourtDecisionCreateNestedManyWithoutCaseInput
  }

  export type CaseUncheckedCreateWithoutAssignedToInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    priority?: $Enums.CasePriority
    clientName?: string | null
    clientEmail?: string | null
    clientPhone?: string | null
    dueDate?: Date | string | null
    tags?: CaseCreatetagsInput | string[]
    notes?: string | null
    progress?: number
    estimatedHours?: number | null
    actualHours?: number
    hourlyRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    files?: FileUncheckedCreateNestedManyWithoutCaseInput
    activities?: ActivityUncheckedCreateNestedManyWithoutCaseInput
    milestones?: MilestoneUncheckedCreateNestedManyWithoutCaseInput
    comments?: CommentUncheckedCreateNestedManyWithoutCaseInput
    timeEntries?: TimeEntryUncheckedCreateNestedManyWithoutCaseInput
    legalRefs?: LegalReferenceUncheckedCreateNestedManyWithoutCaseInput
    workflowSteps?: WorkflowStepUncheckedCreateNestedManyWithoutCaseInput
    documentTypes?: DocumentTypeUncheckedCreateNestedManyWithoutCaseInput
    legalStatutes?: LegalStatuteUncheckedCreateNestedManyWithoutCaseInput
    courtDecisions?: CourtDecisionUncheckedCreateNestedManyWithoutCaseInput
  }

  export type CaseCreateOrConnectWithoutAssignedToInput = {
    where: CaseWhereUniqueInput
    create: XOR<CaseCreateWithoutAssignedToInput, CaseUncheckedCreateWithoutAssignedToInput>
  }

  export type CaseCreateManyAssignedToInputEnvelope = {
    data: CaseCreateManyAssignedToInput | CaseCreateManyAssignedToInput[]
    skipDuplicates?: boolean
  }

  export type CaseCreateWithoutCreatedByInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    priority?: $Enums.CasePriority
    clientName?: string | null
    clientEmail?: string | null
    clientPhone?: string | null
    dueDate?: Date | string | null
    tags?: CaseCreatetagsInput | string[]
    notes?: string | null
    progress?: number
    estimatedHours?: number | null
    actualHours?: number
    hourlyRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedTo?: UserCreateNestedOneWithoutAssignedCasesInput
    files?: FileCreateNestedManyWithoutCaseInput
    activities?: ActivityCreateNestedManyWithoutCaseInput
    milestones?: MilestoneCreateNestedManyWithoutCaseInput
    comments?: CommentCreateNestedManyWithoutCaseInput
    timeEntries?: TimeEntryCreateNestedManyWithoutCaseInput
    legalRefs?: LegalReferenceCreateNestedManyWithoutCaseInput
    workflowSteps?: WorkflowStepCreateNestedManyWithoutCaseInput
    documentTypes?: DocumentTypeCreateNestedManyWithoutCaseInput
    legalStatutes?: LegalStatuteCreateNestedManyWithoutCaseInput
    courtDecisions?: CourtDecisionCreateNestedManyWithoutCaseInput
  }

  export type CaseUncheckedCreateWithoutCreatedByInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    priority?: $Enums.CasePriority
    clientName?: string | null
    clientEmail?: string | null
    clientPhone?: string | null
    dueDate?: Date | string | null
    tags?: CaseCreatetagsInput | string[]
    notes?: string | null
    progress?: number
    estimatedHours?: number | null
    actualHours?: number
    hourlyRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedToId?: string | null
    files?: FileUncheckedCreateNestedManyWithoutCaseInput
    activities?: ActivityUncheckedCreateNestedManyWithoutCaseInput
    milestones?: MilestoneUncheckedCreateNestedManyWithoutCaseInput
    comments?: CommentUncheckedCreateNestedManyWithoutCaseInput
    timeEntries?: TimeEntryUncheckedCreateNestedManyWithoutCaseInput
    legalRefs?: LegalReferenceUncheckedCreateNestedManyWithoutCaseInput
    workflowSteps?: WorkflowStepUncheckedCreateNestedManyWithoutCaseInput
    documentTypes?: DocumentTypeUncheckedCreateNestedManyWithoutCaseInput
    legalStatutes?: LegalStatuteUncheckedCreateNestedManyWithoutCaseInput
    courtDecisions?: CourtDecisionUncheckedCreateNestedManyWithoutCaseInput
  }

  export type CaseCreateOrConnectWithoutCreatedByInput = {
    where: CaseWhereUniqueInput
    create: XOR<CaseCreateWithoutCreatedByInput, CaseUncheckedCreateWithoutCreatedByInput>
  }

  export type CaseCreateManyCreatedByInputEnvelope = {
    data: CaseCreateManyCreatedByInput | CaseCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type ActivityCreateWithoutUserInput = {
    id?: string
    type: string
    description: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    case?: CaseCreateNestedOneWithoutActivitiesInput
  }

  export type ActivityUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    description: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    caseId?: string | null
  }

  export type ActivityCreateOrConnectWithoutUserInput = {
    where: ActivityWhereUniqueInput
    create: XOR<ActivityCreateWithoutUserInput, ActivityUncheckedCreateWithoutUserInput>
  }

  export type ActivityCreateManyUserInputEnvelope = {
    data: ActivityCreateManyUserInput | ActivityCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FileCreateWithoutUploadedByInput = {
    id?: string
    originalName: string
    fileName: string
    fileSize: number
    mimeType: string
    filePath: string
    uploadedAt?: Date | string
    case: CaseCreateNestedOneWithoutFilesInput
  }

  export type FileUncheckedCreateWithoutUploadedByInput = {
    id?: string
    originalName: string
    fileName: string
    fileSize: number
    mimeType: string
    filePath: string
    uploadedAt?: Date | string
    caseId: string
  }

  export type FileCreateOrConnectWithoutUploadedByInput = {
    where: FileWhereUniqueInput
    create: XOR<FileCreateWithoutUploadedByInput, FileUncheckedCreateWithoutUploadedByInput>
  }

  export type FileCreateManyUploadedByInputEnvelope = {
    data: FileCreateManyUploadedByInput | FileCreateManyUploadedByInput[]
    skipDuplicates?: boolean
  }

  export type MilestoneCreateWithoutCompletedByInput = {
    id?: string
    title: string
    description?: string | null
    dueDate?: Date | string | null
    completed?: boolean
    completedAt?: Date | string | null
    order?: number
    estimatedHours?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    case: CaseCreateNestedOneWithoutMilestonesInput
    assignedTo?: UserCreateNestedOneWithoutAssignedMilestonesInput
  }

  export type MilestoneUncheckedCreateWithoutCompletedByInput = {
    id?: string
    title: string
    description?: string | null
    dueDate?: Date | string | null
    completed?: boolean
    completedAt?: Date | string | null
    order?: number
    estimatedHours?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    caseId: string
    assignedToId?: string | null
  }

  export type MilestoneCreateOrConnectWithoutCompletedByInput = {
    where: MilestoneWhereUniqueInput
    create: XOR<MilestoneCreateWithoutCompletedByInput, MilestoneUncheckedCreateWithoutCompletedByInput>
  }

  export type MilestoneCreateManyCompletedByInputEnvelope = {
    data: MilestoneCreateManyCompletedByInput | MilestoneCreateManyCompletedByInput[]
    skipDuplicates?: boolean
  }

  export type MilestoneCreateWithoutAssignedToInput = {
    id?: string
    title: string
    description?: string | null
    dueDate?: Date | string | null
    completed?: boolean
    completedAt?: Date | string | null
    order?: number
    estimatedHours?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    case: CaseCreateNestedOneWithoutMilestonesInput
    completedBy?: UserCreateNestedOneWithoutCompletedMilestonesInput
  }

  export type MilestoneUncheckedCreateWithoutAssignedToInput = {
    id?: string
    title: string
    description?: string | null
    dueDate?: Date | string | null
    completed?: boolean
    completedAt?: Date | string | null
    order?: number
    estimatedHours?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    caseId: string
    completedById?: string | null
  }

  export type MilestoneCreateOrConnectWithoutAssignedToInput = {
    where: MilestoneWhereUniqueInput
    create: XOR<MilestoneCreateWithoutAssignedToInput, MilestoneUncheckedCreateWithoutAssignedToInput>
  }

  export type MilestoneCreateManyAssignedToInputEnvelope = {
    data: MilestoneCreateManyAssignedToInput | MilestoneCreateManyAssignedToInput[]
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutAuthorInput = {
    id?: string
    content: string
    isInternal?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    case: CaseCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutAuthorInput = {
    id?: string
    content: string
    isInternal?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    caseId: string
  }

  export type CommentCreateOrConnectWithoutAuthorInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput>
  }

  export type CommentCreateManyAuthorInputEnvelope = {
    data: CommentCreateManyAuthorInput | CommentCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type TimeEntryCreateWithoutUserInput = {
    id?: string
    description?: string | null
    hours: number
    date: Date | string
    billable?: boolean
    hourlyRate?: number | null
    amount?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    case: CaseCreateNestedOneWithoutTimeEntriesInput
  }

  export type TimeEntryUncheckedCreateWithoutUserInput = {
    id?: string
    description?: string | null
    hours: number
    date: Date | string
    billable?: boolean
    hourlyRate?: number | null
    amount?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    caseId: string
  }

  export type TimeEntryCreateOrConnectWithoutUserInput = {
    where: TimeEntryWhereUniqueInput
    create: XOR<TimeEntryCreateWithoutUserInput, TimeEntryUncheckedCreateWithoutUserInput>
  }

  export type TimeEntryCreateManyUserInputEnvelope = {
    data: TimeEntryCreateManyUserInput | TimeEntryCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type LegalReferenceCreateWithoutAddedByInput = {
    id?: string
    type: string
    title: string
    citation: string
    url?: string | null
    summary?: string | null
    relevance?: string | null
    createdAt?: Date | string
    case: CaseCreateNestedOneWithoutLegalRefsInput
  }

  export type LegalReferenceUncheckedCreateWithoutAddedByInput = {
    id?: string
    type: string
    title: string
    citation: string
    url?: string | null
    summary?: string | null
    relevance?: string | null
    createdAt?: Date | string
    caseId: string
  }

  export type LegalReferenceCreateOrConnectWithoutAddedByInput = {
    where: LegalReferenceWhereUniqueInput
    create: XOR<LegalReferenceCreateWithoutAddedByInput, LegalReferenceUncheckedCreateWithoutAddedByInput>
  }

  export type LegalReferenceCreateManyAddedByInputEnvelope = {
    data: LegalReferenceCreateManyAddedByInput | LegalReferenceCreateManyAddedByInput[]
    skipDuplicates?: boolean
  }

  export type WorkflowStepCreateWithoutAssignedToInput = {
    id?: string
    title: string
    description?: string | null
    order: number
    completed?: boolean
    completedAt?: Date | string | null
    dueDate?: Date | string | null
    dependencies?: WorkflowStepCreatedependenciesInput | string[]
    estimatedHours?: number | null
    actualHours?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    case: CaseCreateNestedOneWithoutWorkflowStepsInput
  }

  export type WorkflowStepUncheckedCreateWithoutAssignedToInput = {
    id?: string
    title: string
    description?: string | null
    order: number
    completed?: boolean
    completedAt?: Date | string | null
    dueDate?: Date | string | null
    dependencies?: WorkflowStepCreatedependenciesInput | string[]
    estimatedHours?: number | null
    actualHours?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    caseId: string
  }

  export type WorkflowStepCreateOrConnectWithoutAssignedToInput = {
    where: WorkflowStepWhereUniqueInput
    create: XOR<WorkflowStepCreateWithoutAssignedToInput, WorkflowStepUncheckedCreateWithoutAssignedToInput>
  }

  export type WorkflowStepCreateManyAssignedToInputEnvelope = {
    data: WorkflowStepCreateManyAssignedToInput | WorkflowStepCreateManyAssignedToInput[]
    skipDuplicates?: boolean
  }

  export type LegalStatuteCreateWithoutAddedByInput = {
    id?: string
    title: string
    chapter?: string | null
    section?: string | null
    subsection?: string | null
    description?: string | null
    url?: string | null
    notes?: string | null
    priority?: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    case: CaseCreateNestedOneWithoutLegalStatutesInput
  }

  export type LegalStatuteUncheckedCreateWithoutAddedByInput = {
    id?: string
    title: string
    chapter?: string | null
    section?: string | null
    subsection?: string | null
    description?: string | null
    url?: string | null
    notes?: string | null
    priority?: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    caseId: string
  }

  export type LegalStatuteCreateOrConnectWithoutAddedByInput = {
    where: LegalStatuteWhereUniqueInput
    create: XOR<LegalStatuteCreateWithoutAddedByInput, LegalStatuteUncheckedCreateWithoutAddedByInput>
  }

  export type LegalStatuteCreateManyAddedByInputEnvelope = {
    data: LegalStatuteCreateManyAddedByInput | LegalStatuteCreateManyAddedByInput[]
    skipDuplicates?: boolean
  }

  export type CourtDecisionCreateWithoutAddedByInput = {
    id?: string
    title: string
    court: string
    caseNumber?: string | null
    date?: Date | string | null
    summary?: string | null
    url?: string | null
    relevance?: string | null
    precedent?: boolean
    outcome?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    case: CaseCreateNestedOneWithoutCourtDecisionsInput
  }

  export type CourtDecisionUncheckedCreateWithoutAddedByInput = {
    id?: string
    title: string
    court: string
    caseNumber?: string | null
    date?: Date | string | null
    summary?: string | null
    url?: string | null
    relevance?: string | null
    precedent?: boolean
    outcome?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    caseId: string
  }

  export type CourtDecisionCreateOrConnectWithoutAddedByInput = {
    where: CourtDecisionWhereUniqueInput
    create: XOR<CourtDecisionCreateWithoutAddedByInput, CourtDecisionUncheckedCreateWithoutAddedByInput>
  }

  export type CourtDecisionCreateManyAddedByInputEnvelope = {
    data: CourtDecisionCreateManyAddedByInput | CourtDecisionCreateManyAddedByInput[]
    skipDuplicates?: boolean
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutUserInput>
  }

  export type AccountScalarWhereInput = {
    AND?: AccountScalarWhereInput | AccountScalarWhereInput[]
    OR?: AccountScalarWhereInput[]
    NOT?: AccountScalarWhereInput | AccountScalarWhereInput[]
    id?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: StringFilter<"Session"> | string
    sessionToken?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
  }

  export type CaseUpsertWithWhereUniqueWithoutAssignedToInput = {
    where: CaseWhereUniqueInput
    update: XOR<CaseUpdateWithoutAssignedToInput, CaseUncheckedUpdateWithoutAssignedToInput>
    create: XOR<CaseCreateWithoutAssignedToInput, CaseUncheckedCreateWithoutAssignedToInput>
  }

  export type CaseUpdateWithWhereUniqueWithoutAssignedToInput = {
    where: CaseWhereUniqueInput
    data: XOR<CaseUpdateWithoutAssignedToInput, CaseUncheckedUpdateWithoutAssignedToInput>
  }

  export type CaseUpdateManyWithWhereWithoutAssignedToInput = {
    where: CaseScalarWhereInput
    data: XOR<CaseUpdateManyMutationInput, CaseUncheckedUpdateManyWithoutAssignedToInput>
  }

  export type CaseScalarWhereInput = {
    AND?: CaseScalarWhereInput | CaseScalarWhereInput[]
    OR?: CaseScalarWhereInput[]
    NOT?: CaseScalarWhereInput | CaseScalarWhereInput[]
    id?: StringFilter<"Case"> | string
    title?: StringFilter<"Case"> | string
    description?: StringNullableFilter<"Case"> | string | null
    status?: EnumCaseStatusFilter<"Case"> | $Enums.CaseStatus
    priority?: EnumCasePriorityFilter<"Case"> | $Enums.CasePriority
    clientName?: StringNullableFilter<"Case"> | string | null
    clientEmail?: StringNullableFilter<"Case"> | string | null
    clientPhone?: StringNullableFilter<"Case"> | string | null
    dueDate?: DateTimeNullableFilter<"Case"> | Date | string | null
    tags?: StringNullableListFilter<"Case">
    notes?: StringNullableFilter<"Case"> | string | null
    progress?: IntFilter<"Case"> | number
    estimatedHours?: FloatNullableFilter<"Case"> | number | null
    actualHours?: FloatFilter<"Case"> | number
    hourlyRate?: FloatNullableFilter<"Case"> | number | null
    createdAt?: DateTimeFilter<"Case"> | Date | string
    updatedAt?: DateTimeFilter<"Case"> | Date | string
    assignedToId?: StringNullableFilter<"Case"> | string | null
    createdById?: StringNullableFilter<"Case"> | string | null
  }

  export type CaseUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: CaseWhereUniqueInput
    update: XOR<CaseUpdateWithoutCreatedByInput, CaseUncheckedUpdateWithoutCreatedByInput>
    create: XOR<CaseCreateWithoutCreatedByInput, CaseUncheckedCreateWithoutCreatedByInput>
  }

  export type CaseUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: CaseWhereUniqueInput
    data: XOR<CaseUpdateWithoutCreatedByInput, CaseUncheckedUpdateWithoutCreatedByInput>
  }

  export type CaseUpdateManyWithWhereWithoutCreatedByInput = {
    where: CaseScalarWhereInput
    data: XOR<CaseUpdateManyMutationInput, CaseUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type ActivityUpsertWithWhereUniqueWithoutUserInput = {
    where: ActivityWhereUniqueInput
    update: XOR<ActivityUpdateWithoutUserInput, ActivityUncheckedUpdateWithoutUserInput>
    create: XOR<ActivityCreateWithoutUserInput, ActivityUncheckedCreateWithoutUserInput>
  }

  export type ActivityUpdateWithWhereUniqueWithoutUserInput = {
    where: ActivityWhereUniqueInput
    data: XOR<ActivityUpdateWithoutUserInput, ActivityUncheckedUpdateWithoutUserInput>
  }

  export type ActivityUpdateManyWithWhereWithoutUserInput = {
    where: ActivityScalarWhereInput
    data: XOR<ActivityUpdateManyMutationInput, ActivityUncheckedUpdateManyWithoutUserInput>
  }

  export type ActivityScalarWhereInput = {
    AND?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
    OR?: ActivityScalarWhereInput[]
    NOT?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
    id?: StringFilter<"Activity"> | string
    type?: StringFilter<"Activity"> | string
    description?: StringFilter<"Activity"> | string
    metadata?: JsonNullableFilter<"Activity">
    createdAt?: DateTimeFilter<"Activity"> | Date | string
    userId?: StringNullableFilter<"Activity"> | string | null
    caseId?: StringNullableFilter<"Activity"> | string | null
  }

  export type FileUpsertWithWhereUniqueWithoutUploadedByInput = {
    where: FileWhereUniqueInput
    update: XOR<FileUpdateWithoutUploadedByInput, FileUncheckedUpdateWithoutUploadedByInput>
    create: XOR<FileCreateWithoutUploadedByInput, FileUncheckedCreateWithoutUploadedByInput>
  }

  export type FileUpdateWithWhereUniqueWithoutUploadedByInput = {
    where: FileWhereUniqueInput
    data: XOR<FileUpdateWithoutUploadedByInput, FileUncheckedUpdateWithoutUploadedByInput>
  }

  export type FileUpdateManyWithWhereWithoutUploadedByInput = {
    where: FileScalarWhereInput
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyWithoutUploadedByInput>
  }

  export type FileScalarWhereInput = {
    AND?: FileScalarWhereInput | FileScalarWhereInput[]
    OR?: FileScalarWhereInput[]
    NOT?: FileScalarWhereInput | FileScalarWhereInput[]
    id?: StringFilter<"File"> | string
    originalName?: StringFilter<"File"> | string
    fileName?: StringFilter<"File"> | string
    fileSize?: IntFilter<"File"> | number
    mimeType?: StringFilter<"File"> | string
    filePath?: StringFilter<"File"> | string
    uploadedAt?: DateTimeFilter<"File"> | Date | string
    caseId?: StringFilter<"File"> | string
    uploadedById?: StringFilter<"File"> | string
  }

  export type MilestoneUpsertWithWhereUniqueWithoutCompletedByInput = {
    where: MilestoneWhereUniqueInput
    update: XOR<MilestoneUpdateWithoutCompletedByInput, MilestoneUncheckedUpdateWithoutCompletedByInput>
    create: XOR<MilestoneCreateWithoutCompletedByInput, MilestoneUncheckedCreateWithoutCompletedByInput>
  }

  export type MilestoneUpdateWithWhereUniqueWithoutCompletedByInput = {
    where: MilestoneWhereUniqueInput
    data: XOR<MilestoneUpdateWithoutCompletedByInput, MilestoneUncheckedUpdateWithoutCompletedByInput>
  }

  export type MilestoneUpdateManyWithWhereWithoutCompletedByInput = {
    where: MilestoneScalarWhereInput
    data: XOR<MilestoneUpdateManyMutationInput, MilestoneUncheckedUpdateManyWithoutCompletedByInput>
  }

  export type MilestoneScalarWhereInput = {
    AND?: MilestoneScalarWhereInput | MilestoneScalarWhereInput[]
    OR?: MilestoneScalarWhereInput[]
    NOT?: MilestoneScalarWhereInput | MilestoneScalarWhereInput[]
    id?: StringFilter<"Milestone"> | string
    title?: StringFilter<"Milestone"> | string
    description?: StringNullableFilter<"Milestone"> | string | null
    dueDate?: DateTimeNullableFilter<"Milestone"> | Date | string | null
    completed?: BoolFilter<"Milestone"> | boolean
    completedAt?: DateTimeNullableFilter<"Milestone"> | Date | string | null
    order?: IntFilter<"Milestone"> | number
    estimatedHours?: FloatNullableFilter<"Milestone"> | number | null
    createdAt?: DateTimeFilter<"Milestone"> | Date | string
    updatedAt?: DateTimeFilter<"Milestone"> | Date | string
    caseId?: StringFilter<"Milestone"> | string
    completedById?: StringNullableFilter<"Milestone"> | string | null
    assignedToId?: StringNullableFilter<"Milestone"> | string | null
  }

  export type MilestoneUpsertWithWhereUniqueWithoutAssignedToInput = {
    where: MilestoneWhereUniqueInput
    update: XOR<MilestoneUpdateWithoutAssignedToInput, MilestoneUncheckedUpdateWithoutAssignedToInput>
    create: XOR<MilestoneCreateWithoutAssignedToInput, MilestoneUncheckedCreateWithoutAssignedToInput>
  }

  export type MilestoneUpdateWithWhereUniqueWithoutAssignedToInput = {
    where: MilestoneWhereUniqueInput
    data: XOR<MilestoneUpdateWithoutAssignedToInput, MilestoneUncheckedUpdateWithoutAssignedToInput>
  }

  export type MilestoneUpdateManyWithWhereWithoutAssignedToInput = {
    where: MilestoneScalarWhereInput
    data: XOR<MilestoneUpdateManyMutationInput, MilestoneUncheckedUpdateManyWithoutAssignedToInput>
  }

  export type CommentUpsertWithWhereUniqueWithoutAuthorInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutAuthorInput, CommentUncheckedUpdateWithoutAuthorInput>
    create: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutAuthorInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutAuthorInput, CommentUncheckedUpdateWithoutAuthorInput>
  }

  export type CommentUpdateManyWithWhereWithoutAuthorInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutAuthorInput>
  }

  export type CommentScalarWhereInput = {
    AND?: CommentScalarWhereInput | CommentScalarWhereInput[]
    OR?: CommentScalarWhereInput[]
    NOT?: CommentScalarWhereInput | CommentScalarWhereInput[]
    id?: StringFilter<"Comment"> | string
    content?: StringFilter<"Comment"> | string
    isInternal?: BoolFilter<"Comment"> | boolean
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    caseId?: StringFilter<"Comment"> | string
    authorId?: StringFilter<"Comment"> | string
  }

  export type TimeEntryUpsertWithWhereUniqueWithoutUserInput = {
    where: TimeEntryWhereUniqueInput
    update: XOR<TimeEntryUpdateWithoutUserInput, TimeEntryUncheckedUpdateWithoutUserInput>
    create: XOR<TimeEntryCreateWithoutUserInput, TimeEntryUncheckedCreateWithoutUserInput>
  }

  export type TimeEntryUpdateWithWhereUniqueWithoutUserInput = {
    where: TimeEntryWhereUniqueInput
    data: XOR<TimeEntryUpdateWithoutUserInput, TimeEntryUncheckedUpdateWithoutUserInput>
  }

  export type TimeEntryUpdateManyWithWhereWithoutUserInput = {
    where: TimeEntryScalarWhereInput
    data: XOR<TimeEntryUpdateManyMutationInput, TimeEntryUncheckedUpdateManyWithoutUserInput>
  }

  export type TimeEntryScalarWhereInput = {
    AND?: TimeEntryScalarWhereInput | TimeEntryScalarWhereInput[]
    OR?: TimeEntryScalarWhereInput[]
    NOT?: TimeEntryScalarWhereInput | TimeEntryScalarWhereInput[]
    id?: StringFilter<"TimeEntry"> | string
    description?: StringNullableFilter<"TimeEntry"> | string | null
    hours?: FloatFilter<"TimeEntry"> | number
    date?: DateTimeFilter<"TimeEntry"> | Date | string
    billable?: BoolFilter<"TimeEntry"> | boolean
    hourlyRate?: FloatNullableFilter<"TimeEntry"> | number | null
    amount?: FloatNullableFilter<"TimeEntry"> | number | null
    createdAt?: DateTimeFilter<"TimeEntry"> | Date | string
    updatedAt?: DateTimeFilter<"TimeEntry"> | Date | string
    caseId?: StringFilter<"TimeEntry"> | string
    userId?: StringFilter<"TimeEntry"> | string
  }

  export type LegalReferenceUpsertWithWhereUniqueWithoutAddedByInput = {
    where: LegalReferenceWhereUniqueInput
    update: XOR<LegalReferenceUpdateWithoutAddedByInput, LegalReferenceUncheckedUpdateWithoutAddedByInput>
    create: XOR<LegalReferenceCreateWithoutAddedByInput, LegalReferenceUncheckedCreateWithoutAddedByInput>
  }

  export type LegalReferenceUpdateWithWhereUniqueWithoutAddedByInput = {
    where: LegalReferenceWhereUniqueInput
    data: XOR<LegalReferenceUpdateWithoutAddedByInput, LegalReferenceUncheckedUpdateWithoutAddedByInput>
  }

  export type LegalReferenceUpdateManyWithWhereWithoutAddedByInput = {
    where: LegalReferenceScalarWhereInput
    data: XOR<LegalReferenceUpdateManyMutationInput, LegalReferenceUncheckedUpdateManyWithoutAddedByInput>
  }

  export type LegalReferenceScalarWhereInput = {
    AND?: LegalReferenceScalarWhereInput | LegalReferenceScalarWhereInput[]
    OR?: LegalReferenceScalarWhereInput[]
    NOT?: LegalReferenceScalarWhereInput | LegalReferenceScalarWhereInput[]
    id?: StringFilter<"LegalReference"> | string
    type?: StringFilter<"LegalReference"> | string
    title?: StringFilter<"LegalReference"> | string
    citation?: StringFilter<"LegalReference"> | string
    url?: StringNullableFilter<"LegalReference"> | string | null
    summary?: StringNullableFilter<"LegalReference"> | string | null
    relevance?: StringNullableFilter<"LegalReference"> | string | null
    createdAt?: DateTimeFilter<"LegalReference"> | Date | string
    caseId?: StringFilter<"LegalReference"> | string
    addedById?: StringNullableFilter<"LegalReference"> | string | null
  }

  export type WorkflowStepUpsertWithWhereUniqueWithoutAssignedToInput = {
    where: WorkflowStepWhereUniqueInput
    update: XOR<WorkflowStepUpdateWithoutAssignedToInput, WorkflowStepUncheckedUpdateWithoutAssignedToInput>
    create: XOR<WorkflowStepCreateWithoutAssignedToInput, WorkflowStepUncheckedCreateWithoutAssignedToInput>
  }

  export type WorkflowStepUpdateWithWhereUniqueWithoutAssignedToInput = {
    where: WorkflowStepWhereUniqueInput
    data: XOR<WorkflowStepUpdateWithoutAssignedToInput, WorkflowStepUncheckedUpdateWithoutAssignedToInput>
  }

  export type WorkflowStepUpdateManyWithWhereWithoutAssignedToInput = {
    where: WorkflowStepScalarWhereInput
    data: XOR<WorkflowStepUpdateManyMutationInput, WorkflowStepUncheckedUpdateManyWithoutAssignedToInput>
  }

  export type WorkflowStepScalarWhereInput = {
    AND?: WorkflowStepScalarWhereInput | WorkflowStepScalarWhereInput[]
    OR?: WorkflowStepScalarWhereInput[]
    NOT?: WorkflowStepScalarWhereInput | WorkflowStepScalarWhereInput[]
    id?: StringFilter<"WorkflowStep"> | string
    title?: StringFilter<"WorkflowStep"> | string
    description?: StringNullableFilter<"WorkflowStep"> | string | null
    order?: IntFilter<"WorkflowStep"> | number
    completed?: BoolFilter<"WorkflowStep"> | boolean
    completedAt?: DateTimeNullableFilter<"WorkflowStep"> | Date | string | null
    dueDate?: DateTimeNullableFilter<"WorkflowStep"> | Date | string | null
    assignedToId?: StringNullableFilter<"WorkflowStep"> | string | null
    dependencies?: StringNullableListFilter<"WorkflowStep">
    estimatedHours?: FloatNullableFilter<"WorkflowStep"> | number | null
    actualHours?: FloatFilter<"WorkflowStep"> | number
    createdAt?: DateTimeFilter<"WorkflowStep"> | Date | string
    updatedAt?: DateTimeFilter<"WorkflowStep"> | Date | string
    caseId?: StringFilter<"WorkflowStep"> | string
  }

  export type LegalStatuteUpsertWithWhereUniqueWithoutAddedByInput = {
    where: LegalStatuteWhereUniqueInput
    update: XOR<LegalStatuteUpdateWithoutAddedByInput, LegalStatuteUncheckedUpdateWithoutAddedByInput>
    create: XOR<LegalStatuteCreateWithoutAddedByInput, LegalStatuteUncheckedCreateWithoutAddedByInput>
  }

  export type LegalStatuteUpdateWithWhereUniqueWithoutAddedByInput = {
    where: LegalStatuteWhereUniqueInput
    data: XOR<LegalStatuteUpdateWithoutAddedByInput, LegalStatuteUncheckedUpdateWithoutAddedByInput>
  }

  export type LegalStatuteUpdateManyWithWhereWithoutAddedByInput = {
    where: LegalStatuteScalarWhereInput
    data: XOR<LegalStatuteUpdateManyMutationInput, LegalStatuteUncheckedUpdateManyWithoutAddedByInput>
  }

  export type LegalStatuteScalarWhereInput = {
    AND?: LegalStatuteScalarWhereInput | LegalStatuteScalarWhereInput[]
    OR?: LegalStatuteScalarWhereInput[]
    NOT?: LegalStatuteScalarWhereInput | LegalStatuteScalarWhereInput[]
    id?: StringFilter<"LegalStatute"> | string
    title?: StringFilter<"LegalStatute"> | string
    chapter?: StringNullableFilter<"LegalStatute"> | string | null
    section?: StringNullableFilter<"LegalStatute"> | string | null
    subsection?: StringNullableFilter<"LegalStatute"> | string | null
    description?: StringNullableFilter<"LegalStatute"> | string | null
    url?: StringNullableFilter<"LegalStatute"> | string | null
    notes?: StringNullableFilter<"LegalStatute"> | string | null
    priority?: StringFilter<"LegalStatute"> | string
    status?: StringFilter<"LegalStatute"> | string
    createdAt?: DateTimeFilter<"LegalStatute"> | Date | string
    updatedAt?: DateTimeFilter<"LegalStatute"> | Date | string
    caseId?: StringFilter<"LegalStatute"> | string
    addedById?: StringNullableFilter<"LegalStatute"> | string | null
  }

  export type CourtDecisionUpsertWithWhereUniqueWithoutAddedByInput = {
    where: CourtDecisionWhereUniqueInput
    update: XOR<CourtDecisionUpdateWithoutAddedByInput, CourtDecisionUncheckedUpdateWithoutAddedByInput>
    create: XOR<CourtDecisionCreateWithoutAddedByInput, CourtDecisionUncheckedCreateWithoutAddedByInput>
  }

  export type CourtDecisionUpdateWithWhereUniqueWithoutAddedByInput = {
    where: CourtDecisionWhereUniqueInput
    data: XOR<CourtDecisionUpdateWithoutAddedByInput, CourtDecisionUncheckedUpdateWithoutAddedByInput>
  }

  export type CourtDecisionUpdateManyWithWhereWithoutAddedByInput = {
    where: CourtDecisionScalarWhereInput
    data: XOR<CourtDecisionUpdateManyMutationInput, CourtDecisionUncheckedUpdateManyWithoutAddedByInput>
  }

  export type CourtDecisionScalarWhereInput = {
    AND?: CourtDecisionScalarWhereInput | CourtDecisionScalarWhereInput[]
    OR?: CourtDecisionScalarWhereInput[]
    NOT?: CourtDecisionScalarWhereInput | CourtDecisionScalarWhereInput[]
    id?: StringFilter<"CourtDecision"> | string
    title?: StringFilter<"CourtDecision"> | string
    court?: StringFilter<"CourtDecision"> | string
    caseNumber?: StringNullableFilter<"CourtDecision"> | string | null
    date?: DateTimeNullableFilter<"CourtDecision"> | Date | string | null
    summary?: StringNullableFilter<"CourtDecision"> | string | null
    url?: StringNullableFilter<"CourtDecision"> | string | null
    relevance?: StringNullableFilter<"CourtDecision"> | string | null
    precedent?: BoolFilter<"CourtDecision"> | boolean
    outcome?: StringNullableFilter<"CourtDecision"> | string | null
    notes?: StringNullableFilter<"CourtDecision"> | string | null
    createdAt?: DateTimeFilter<"CourtDecision"> | Date | string
    updatedAt?: DateTimeFilter<"CourtDecision"> | Date | string
    caseId?: StringFilter<"CourtDecision"> | string
    addedById?: StringNullableFilter<"CourtDecision"> | string | null
  }

  export type UserCreateWithoutAssignedCasesInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    firstName?: string | null
    lastName?: string | null
    phone?: string | null
    position?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    createdCases?: CaseCreateNestedManyWithoutCreatedByInput
    activities?: ActivityCreateNestedManyWithoutUserInput
    fileUploads?: FileCreateNestedManyWithoutUploadedByInput
    completedMilestones?: MilestoneCreateNestedManyWithoutCompletedByInput
    assignedMilestones?: MilestoneCreateNestedManyWithoutAssignedToInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    timeEntries?: TimeEntryCreateNestedManyWithoutUserInput
    legalRefs?: LegalReferenceCreateNestedManyWithoutAddedByInput
    workflowSteps?: WorkflowStepCreateNestedManyWithoutAssignedToInput
    legalStatutes?: LegalStatuteCreateNestedManyWithoutAddedByInput
    courtDecisions?: CourtDecisionCreateNestedManyWithoutAddedByInput
  }

  export type UserUncheckedCreateWithoutAssignedCasesInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    firstName?: string | null
    lastName?: string | null
    phone?: string | null
    position?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    createdCases?: CaseUncheckedCreateNestedManyWithoutCreatedByInput
    activities?: ActivityUncheckedCreateNestedManyWithoutUserInput
    fileUploads?: FileUncheckedCreateNestedManyWithoutUploadedByInput
    completedMilestones?: MilestoneUncheckedCreateNestedManyWithoutCompletedByInput
    assignedMilestones?: MilestoneUncheckedCreateNestedManyWithoutAssignedToInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    timeEntries?: TimeEntryUncheckedCreateNestedManyWithoutUserInput
    legalRefs?: LegalReferenceUncheckedCreateNestedManyWithoutAddedByInput
    workflowSteps?: WorkflowStepUncheckedCreateNestedManyWithoutAssignedToInput
    legalStatutes?: LegalStatuteUncheckedCreateNestedManyWithoutAddedByInput
    courtDecisions?: CourtDecisionUncheckedCreateNestedManyWithoutAddedByInput
  }

  export type UserCreateOrConnectWithoutAssignedCasesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssignedCasesInput, UserUncheckedCreateWithoutAssignedCasesInput>
  }

  export type UserCreateWithoutCreatedCasesInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    firstName?: string | null
    lastName?: string | null
    phone?: string | null
    position?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    assignedCases?: CaseCreateNestedManyWithoutAssignedToInput
    activities?: ActivityCreateNestedManyWithoutUserInput
    fileUploads?: FileCreateNestedManyWithoutUploadedByInput
    completedMilestones?: MilestoneCreateNestedManyWithoutCompletedByInput
    assignedMilestones?: MilestoneCreateNestedManyWithoutAssignedToInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    timeEntries?: TimeEntryCreateNestedManyWithoutUserInput
    legalRefs?: LegalReferenceCreateNestedManyWithoutAddedByInput
    workflowSteps?: WorkflowStepCreateNestedManyWithoutAssignedToInput
    legalStatutes?: LegalStatuteCreateNestedManyWithoutAddedByInput
    courtDecisions?: CourtDecisionCreateNestedManyWithoutAddedByInput
  }

  export type UserUncheckedCreateWithoutCreatedCasesInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    firstName?: string | null
    lastName?: string | null
    phone?: string | null
    position?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    assignedCases?: CaseUncheckedCreateNestedManyWithoutAssignedToInput
    activities?: ActivityUncheckedCreateNestedManyWithoutUserInput
    fileUploads?: FileUncheckedCreateNestedManyWithoutUploadedByInput
    completedMilestones?: MilestoneUncheckedCreateNestedManyWithoutCompletedByInput
    assignedMilestones?: MilestoneUncheckedCreateNestedManyWithoutAssignedToInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    timeEntries?: TimeEntryUncheckedCreateNestedManyWithoutUserInput
    legalRefs?: LegalReferenceUncheckedCreateNestedManyWithoutAddedByInput
    workflowSteps?: WorkflowStepUncheckedCreateNestedManyWithoutAssignedToInput
    legalStatutes?: LegalStatuteUncheckedCreateNestedManyWithoutAddedByInput
    courtDecisions?: CourtDecisionUncheckedCreateNestedManyWithoutAddedByInput
  }

  export type UserCreateOrConnectWithoutCreatedCasesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedCasesInput, UserUncheckedCreateWithoutCreatedCasesInput>
  }

  export type FileCreateWithoutCaseInput = {
    id?: string
    originalName: string
    fileName: string
    fileSize: number
    mimeType: string
    filePath: string
    uploadedAt?: Date | string
    uploadedBy: UserCreateNestedOneWithoutFileUploadsInput
  }

  export type FileUncheckedCreateWithoutCaseInput = {
    id?: string
    originalName: string
    fileName: string
    fileSize: number
    mimeType: string
    filePath: string
    uploadedAt?: Date | string
    uploadedById: string
  }

  export type FileCreateOrConnectWithoutCaseInput = {
    where: FileWhereUniqueInput
    create: XOR<FileCreateWithoutCaseInput, FileUncheckedCreateWithoutCaseInput>
  }

  export type FileCreateManyCaseInputEnvelope = {
    data: FileCreateManyCaseInput | FileCreateManyCaseInput[]
    skipDuplicates?: boolean
  }

  export type ActivityCreateWithoutCaseInput = {
    id?: string
    type: string
    description: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutActivitiesInput
  }

  export type ActivityUncheckedCreateWithoutCaseInput = {
    id?: string
    type: string
    description: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    userId?: string | null
  }

  export type ActivityCreateOrConnectWithoutCaseInput = {
    where: ActivityWhereUniqueInput
    create: XOR<ActivityCreateWithoutCaseInput, ActivityUncheckedCreateWithoutCaseInput>
  }

  export type ActivityCreateManyCaseInputEnvelope = {
    data: ActivityCreateManyCaseInput | ActivityCreateManyCaseInput[]
    skipDuplicates?: boolean
  }

  export type MilestoneCreateWithoutCaseInput = {
    id?: string
    title: string
    description?: string | null
    dueDate?: Date | string | null
    completed?: boolean
    completedAt?: Date | string | null
    order?: number
    estimatedHours?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    completedBy?: UserCreateNestedOneWithoutCompletedMilestonesInput
    assignedTo?: UserCreateNestedOneWithoutAssignedMilestonesInput
  }

  export type MilestoneUncheckedCreateWithoutCaseInput = {
    id?: string
    title: string
    description?: string | null
    dueDate?: Date | string | null
    completed?: boolean
    completedAt?: Date | string | null
    order?: number
    estimatedHours?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    completedById?: string | null
    assignedToId?: string | null
  }

  export type MilestoneCreateOrConnectWithoutCaseInput = {
    where: MilestoneWhereUniqueInput
    create: XOR<MilestoneCreateWithoutCaseInput, MilestoneUncheckedCreateWithoutCaseInput>
  }

  export type MilestoneCreateManyCaseInputEnvelope = {
    data: MilestoneCreateManyCaseInput | MilestoneCreateManyCaseInput[]
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutCaseInput = {
    id?: string
    content: string
    isInternal?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutCaseInput = {
    id?: string
    content: string
    isInternal?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
  }

  export type CommentCreateOrConnectWithoutCaseInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutCaseInput, CommentUncheckedCreateWithoutCaseInput>
  }

  export type CommentCreateManyCaseInputEnvelope = {
    data: CommentCreateManyCaseInput | CommentCreateManyCaseInput[]
    skipDuplicates?: boolean
  }

  export type TimeEntryCreateWithoutCaseInput = {
    id?: string
    description?: string | null
    hours: number
    date: Date | string
    billable?: boolean
    hourlyRate?: number | null
    amount?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutTimeEntriesInput
  }

  export type TimeEntryUncheckedCreateWithoutCaseInput = {
    id?: string
    description?: string | null
    hours: number
    date: Date | string
    billable?: boolean
    hourlyRate?: number | null
    amount?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type TimeEntryCreateOrConnectWithoutCaseInput = {
    where: TimeEntryWhereUniqueInput
    create: XOR<TimeEntryCreateWithoutCaseInput, TimeEntryUncheckedCreateWithoutCaseInput>
  }

  export type TimeEntryCreateManyCaseInputEnvelope = {
    data: TimeEntryCreateManyCaseInput | TimeEntryCreateManyCaseInput[]
    skipDuplicates?: boolean
  }

  export type LegalReferenceCreateWithoutCaseInput = {
    id?: string
    type: string
    title: string
    citation: string
    url?: string | null
    summary?: string | null
    relevance?: string | null
    createdAt?: Date | string
    addedBy?: UserCreateNestedOneWithoutLegalRefsInput
  }

  export type LegalReferenceUncheckedCreateWithoutCaseInput = {
    id?: string
    type: string
    title: string
    citation: string
    url?: string | null
    summary?: string | null
    relevance?: string | null
    createdAt?: Date | string
    addedById?: string | null
  }

  export type LegalReferenceCreateOrConnectWithoutCaseInput = {
    where: LegalReferenceWhereUniqueInput
    create: XOR<LegalReferenceCreateWithoutCaseInput, LegalReferenceUncheckedCreateWithoutCaseInput>
  }

  export type LegalReferenceCreateManyCaseInputEnvelope = {
    data: LegalReferenceCreateManyCaseInput | LegalReferenceCreateManyCaseInput[]
    skipDuplicates?: boolean
  }

  export type WorkflowStepCreateWithoutCaseInput = {
    id?: string
    title: string
    description?: string | null
    order: number
    completed?: boolean
    completedAt?: Date | string | null
    dueDate?: Date | string | null
    dependencies?: WorkflowStepCreatedependenciesInput | string[]
    estimatedHours?: number | null
    actualHours?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedTo?: UserCreateNestedOneWithoutWorkflowStepsInput
  }

  export type WorkflowStepUncheckedCreateWithoutCaseInput = {
    id?: string
    title: string
    description?: string | null
    order: number
    completed?: boolean
    completedAt?: Date | string | null
    dueDate?: Date | string | null
    assignedToId?: string | null
    dependencies?: WorkflowStepCreatedependenciesInput | string[]
    estimatedHours?: number | null
    actualHours?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkflowStepCreateOrConnectWithoutCaseInput = {
    where: WorkflowStepWhereUniqueInput
    create: XOR<WorkflowStepCreateWithoutCaseInput, WorkflowStepUncheckedCreateWithoutCaseInput>
  }

  export type WorkflowStepCreateManyCaseInputEnvelope = {
    data: WorkflowStepCreateManyCaseInput | WorkflowStepCreateManyCaseInput[]
    skipDuplicates?: boolean
  }

  export type DocumentTypeCreateWithoutCaseInput = {
    id?: string
    name: string
    description?: string | null
    icon?: string | null
    required?: boolean
    category?: string | null
    template?: string | null
    order?: number
    createdAt?: Date | string
  }

  export type DocumentTypeUncheckedCreateWithoutCaseInput = {
    id?: string
    name: string
    description?: string | null
    icon?: string | null
    required?: boolean
    category?: string | null
    template?: string | null
    order?: number
    createdAt?: Date | string
  }

  export type DocumentTypeCreateOrConnectWithoutCaseInput = {
    where: DocumentTypeWhereUniqueInput
    create: XOR<DocumentTypeCreateWithoutCaseInput, DocumentTypeUncheckedCreateWithoutCaseInput>
  }

  export type DocumentTypeCreateManyCaseInputEnvelope = {
    data: DocumentTypeCreateManyCaseInput | DocumentTypeCreateManyCaseInput[]
    skipDuplicates?: boolean
  }

  export type LegalStatuteCreateWithoutCaseInput = {
    id?: string
    title: string
    chapter?: string | null
    section?: string | null
    subsection?: string | null
    description?: string | null
    url?: string | null
    notes?: string | null
    priority?: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    addedBy?: UserCreateNestedOneWithoutLegalStatutesInput
  }

  export type LegalStatuteUncheckedCreateWithoutCaseInput = {
    id?: string
    title: string
    chapter?: string | null
    section?: string | null
    subsection?: string | null
    description?: string | null
    url?: string | null
    notes?: string | null
    priority?: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    addedById?: string | null
  }

  export type LegalStatuteCreateOrConnectWithoutCaseInput = {
    where: LegalStatuteWhereUniqueInput
    create: XOR<LegalStatuteCreateWithoutCaseInput, LegalStatuteUncheckedCreateWithoutCaseInput>
  }

  export type LegalStatuteCreateManyCaseInputEnvelope = {
    data: LegalStatuteCreateManyCaseInput | LegalStatuteCreateManyCaseInput[]
    skipDuplicates?: boolean
  }

  export type CourtDecisionCreateWithoutCaseInput = {
    id?: string
    title: string
    court: string
    caseNumber?: string | null
    date?: Date | string | null
    summary?: string | null
    url?: string | null
    relevance?: string | null
    precedent?: boolean
    outcome?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    addedBy?: UserCreateNestedOneWithoutCourtDecisionsInput
  }

  export type CourtDecisionUncheckedCreateWithoutCaseInput = {
    id?: string
    title: string
    court: string
    caseNumber?: string | null
    date?: Date | string | null
    summary?: string | null
    url?: string | null
    relevance?: string | null
    precedent?: boolean
    outcome?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    addedById?: string | null
  }

  export type CourtDecisionCreateOrConnectWithoutCaseInput = {
    where: CourtDecisionWhereUniqueInput
    create: XOR<CourtDecisionCreateWithoutCaseInput, CourtDecisionUncheckedCreateWithoutCaseInput>
  }

  export type CourtDecisionCreateManyCaseInputEnvelope = {
    data: CourtDecisionCreateManyCaseInput | CourtDecisionCreateManyCaseInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutAssignedCasesInput = {
    update: XOR<UserUpdateWithoutAssignedCasesInput, UserUncheckedUpdateWithoutAssignedCasesInput>
    create: XOR<UserCreateWithoutAssignedCasesInput, UserUncheckedCreateWithoutAssignedCasesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssignedCasesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssignedCasesInput, UserUncheckedUpdateWithoutAssignedCasesInput>
  }

  export type UserUpdateWithoutAssignedCasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    createdCases?: CaseUpdateManyWithoutCreatedByNestedInput
    activities?: ActivityUpdateManyWithoutUserNestedInput
    fileUploads?: FileUpdateManyWithoutUploadedByNestedInput
    completedMilestones?: MilestoneUpdateManyWithoutCompletedByNestedInput
    assignedMilestones?: MilestoneUpdateManyWithoutAssignedToNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    timeEntries?: TimeEntryUpdateManyWithoutUserNestedInput
    legalRefs?: LegalReferenceUpdateManyWithoutAddedByNestedInput
    workflowSteps?: WorkflowStepUpdateManyWithoutAssignedToNestedInput
    legalStatutes?: LegalStatuteUpdateManyWithoutAddedByNestedInput
    courtDecisions?: CourtDecisionUpdateManyWithoutAddedByNestedInput
  }

  export type UserUncheckedUpdateWithoutAssignedCasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    createdCases?: CaseUncheckedUpdateManyWithoutCreatedByNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    fileUploads?: FileUncheckedUpdateManyWithoutUploadedByNestedInput
    completedMilestones?: MilestoneUncheckedUpdateManyWithoutCompletedByNestedInput
    assignedMilestones?: MilestoneUncheckedUpdateManyWithoutAssignedToNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    timeEntries?: TimeEntryUncheckedUpdateManyWithoutUserNestedInput
    legalRefs?: LegalReferenceUncheckedUpdateManyWithoutAddedByNestedInput
    workflowSteps?: WorkflowStepUncheckedUpdateManyWithoutAssignedToNestedInput
    legalStatutes?: LegalStatuteUncheckedUpdateManyWithoutAddedByNestedInput
    courtDecisions?: CourtDecisionUncheckedUpdateManyWithoutAddedByNestedInput
  }

  export type UserUpsertWithoutCreatedCasesInput = {
    update: XOR<UserUpdateWithoutCreatedCasesInput, UserUncheckedUpdateWithoutCreatedCasesInput>
    create: XOR<UserCreateWithoutCreatedCasesInput, UserUncheckedCreateWithoutCreatedCasesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedCasesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedCasesInput, UserUncheckedUpdateWithoutCreatedCasesInput>
  }

  export type UserUpdateWithoutCreatedCasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    assignedCases?: CaseUpdateManyWithoutAssignedToNestedInput
    activities?: ActivityUpdateManyWithoutUserNestedInput
    fileUploads?: FileUpdateManyWithoutUploadedByNestedInput
    completedMilestones?: MilestoneUpdateManyWithoutCompletedByNestedInput
    assignedMilestones?: MilestoneUpdateManyWithoutAssignedToNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    timeEntries?: TimeEntryUpdateManyWithoutUserNestedInput
    legalRefs?: LegalReferenceUpdateManyWithoutAddedByNestedInput
    workflowSteps?: WorkflowStepUpdateManyWithoutAssignedToNestedInput
    legalStatutes?: LegalStatuteUpdateManyWithoutAddedByNestedInput
    courtDecisions?: CourtDecisionUpdateManyWithoutAddedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedCasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    assignedCases?: CaseUncheckedUpdateManyWithoutAssignedToNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    fileUploads?: FileUncheckedUpdateManyWithoutUploadedByNestedInput
    completedMilestones?: MilestoneUncheckedUpdateManyWithoutCompletedByNestedInput
    assignedMilestones?: MilestoneUncheckedUpdateManyWithoutAssignedToNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    timeEntries?: TimeEntryUncheckedUpdateManyWithoutUserNestedInput
    legalRefs?: LegalReferenceUncheckedUpdateManyWithoutAddedByNestedInput
    workflowSteps?: WorkflowStepUncheckedUpdateManyWithoutAssignedToNestedInput
    legalStatutes?: LegalStatuteUncheckedUpdateManyWithoutAddedByNestedInput
    courtDecisions?: CourtDecisionUncheckedUpdateManyWithoutAddedByNestedInput
  }

  export type FileUpsertWithWhereUniqueWithoutCaseInput = {
    where: FileWhereUniqueInput
    update: XOR<FileUpdateWithoutCaseInput, FileUncheckedUpdateWithoutCaseInput>
    create: XOR<FileCreateWithoutCaseInput, FileUncheckedCreateWithoutCaseInput>
  }

  export type FileUpdateWithWhereUniqueWithoutCaseInput = {
    where: FileWhereUniqueInput
    data: XOR<FileUpdateWithoutCaseInput, FileUncheckedUpdateWithoutCaseInput>
  }

  export type FileUpdateManyWithWhereWithoutCaseInput = {
    where: FileScalarWhereInput
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyWithoutCaseInput>
  }

  export type ActivityUpsertWithWhereUniqueWithoutCaseInput = {
    where: ActivityWhereUniqueInput
    update: XOR<ActivityUpdateWithoutCaseInput, ActivityUncheckedUpdateWithoutCaseInput>
    create: XOR<ActivityCreateWithoutCaseInput, ActivityUncheckedCreateWithoutCaseInput>
  }

  export type ActivityUpdateWithWhereUniqueWithoutCaseInput = {
    where: ActivityWhereUniqueInput
    data: XOR<ActivityUpdateWithoutCaseInput, ActivityUncheckedUpdateWithoutCaseInput>
  }

  export type ActivityUpdateManyWithWhereWithoutCaseInput = {
    where: ActivityScalarWhereInput
    data: XOR<ActivityUpdateManyMutationInput, ActivityUncheckedUpdateManyWithoutCaseInput>
  }

  export type MilestoneUpsertWithWhereUniqueWithoutCaseInput = {
    where: MilestoneWhereUniqueInput
    update: XOR<MilestoneUpdateWithoutCaseInput, MilestoneUncheckedUpdateWithoutCaseInput>
    create: XOR<MilestoneCreateWithoutCaseInput, MilestoneUncheckedCreateWithoutCaseInput>
  }

  export type MilestoneUpdateWithWhereUniqueWithoutCaseInput = {
    where: MilestoneWhereUniqueInput
    data: XOR<MilestoneUpdateWithoutCaseInput, MilestoneUncheckedUpdateWithoutCaseInput>
  }

  export type MilestoneUpdateManyWithWhereWithoutCaseInput = {
    where: MilestoneScalarWhereInput
    data: XOR<MilestoneUpdateManyMutationInput, MilestoneUncheckedUpdateManyWithoutCaseInput>
  }

  export type CommentUpsertWithWhereUniqueWithoutCaseInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutCaseInput, CommentUncheckedUpdateWithoutCaseInput>
    create: XOR<CommentCreateWithoutCaseInput, CommentUncheckedCreateWithoutCaseInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutCaseInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutCaseInput, CommentUncheckedUpdateWithoutCaseInput>
  }

  export type CommentUpdateManyWithWhereWithoutCaseInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutCaseInput>
  }

  export type TimeEntryUpsertWithWhereUniqueWithoutCaseInput = {
    where: TimeEntryWhereUniqueInput
    update: XOR<TimeEntryUpdateWithoutCaseInput, TimeEntryUncheckedUpdateWithoutCaseInput>
    create: XOR<TimeEntryCreateWithoutCaseInput, TimeEntryUncheckedCreateWithoutCaseInput>
  }

  export type TimeEntryUpdateWithWhereUniqueWithoutCaseInput = {
    where: TimeEntryWhereUniqueInput
    data: XOR<TimeEntryUpdateWithoutCaseInput, TimeEntryUncheckedUpdateWithoutCaseInput>
  }

  export type TimeEntryUpdateManyWithWhereWithoutCaseInput = {
    where: TimeEntryScalarWhereInput
    data: XOR<TimeEntryUpdateManyMutationInput, TimeEntryUncheckedUpdateManyWithoutCaseInput>
  }

  export type LegalReferenceUpsertWithWhereUniqueWithoutCaseInput = {
    where: LegalReferenceWhereUniqueInput
    update: XOR<LegalReferenceUpdateWithoutCaseInput, LegalReferenceUncheckedUpdateWithoutCaseInput>
    create: XOR<LegalReferenceCreateWithoutCaseInput, LegalReferenceUncheckedCreateWithoutCaseInput>
  }

  export type LegalReferenceUpdateWithWhereUniqueWithoutCaseInput = {
    where: LegalReferenceWhereUniqueInput
    data: XOR<LegalReferenceUpdateWithoutCaseInput, LegalReferenceUncheckedUpdateWithoutCaseInput>
  }

  export type LegalReferenceUpdateManyWithWhereWithoutCaseInput = {
    where: LegalReferenceScalarWhereInput
    data: XOR<LegalReferenceUpdateManyMutationInput, LegalReferenceUncheckedUpdateManyWithoutCaseInput>
  }

  export type WorkflowStepUpsertWithWhereUniqueWithoutCaseInput = {
    where: WorkflowStepWhereUniqueInput
    update: XOR<WorkflowStepUpdateWithoutCaseInput, WorkflowStepUncheckedUpdateWithoutCaseInput>
    create: XOR<WorkflowStepCreateWithoutCaseInput, WorkflowStepUncheckedCreateWithoutCaseInput>
  }

  export type WorkflowStepUpdateWithWhereUniqueWithoutCaseInput = {
    where: WorkflowStepWhereUniqueInput
    data: XOR<WorkflowStepUpdateWithoutCaseInput, WorkflowStepUncheckedUpdateWithoutCaseInput>
  }

  export type WorkflowStepUpdateManyWithWhereWithoutCaseInput = {
    where: WorkflowStepScalarWhereInput
    data: XOR<WorkflowStepUpdateManyMutationInput, WorkflowStepUncheckedUpdateManyWithoutCaseInput>
  }

  export type DocumentTypeUpsertWithWhereUniqueWithoutCaseInput = {
    where: DocumentTypeWhereUniqueInput
    update: XOR<DocumentTypeUpdateWithoutCaseInput, DocumentTypeUncheckedUpdateWithoutCaseInput>
    create: XOR<DocumentTypeCreateWithoutCaseInput, DocumentTypeUncheckedCreateWithoutCaseInput>
  }

  export type DocumentTypeUpdateWithWhereUniqueWithoutCaseInput = {
    where: DocumentTypeWhereUniqueInput
    data: XOR<DocumentTypeUpdateWithoutCaseInput, DocumentTypeUncheckedUpdateWithoutCaseInput>
  }

  export type DocumentTypeUpdateManyWithWhereWithoutCaseInput = {
    where: DocumentTypeScalarWhereInput
    data: XOR<DocumentTypeUpdateManyMutationInput, DocumentTypeUncheckedUpdateManyWithoutCaseInput>
  }

  export type DocumentTypeScalarWhereInput = {
    AND?: DocumentTypeScalarWhereInput | DocumentTypeScalarWhereInput[]
    OR?: DocumentTypeScalarWhereInput[]
    NOT?: DocumentTypeScalarWhereInput | DocumentTypeScalarWhereInput[]
    id?: StringFilter<"DocumentType"> | string
    name?: StringFilter<"DocumentType"> | string
    description?: StringNullableFilter<"DocumentType"> | string | null
    icon?: StringNullableFilter<"DocumentType"> | string | null
    required?: BoolFilter<"DocumentType"> | boolean
    category?: StringNullableFilter<"DocumentType"> | string | null
    template?: StringNullableFilter<"DocumentType"> | string | null
    order?: IntFilter<"DocumentType"> | number
    createdAt?: DateTimeFilter<"DocumentType"> | Date | string
    caseId?: StringFilter<"DocumentType"> | string
  }

  export type LegalStatuteUpsertWithWhereUniqueWithoutCaseInput = {
    where: LegalStatuteWhereUniqueInput
    update: XOR<LegalStatuteUpdateWithoutCaseInput, LegalStatuteUncheckedUpdateWithoutCaseInput>
    create: XOR<LegalStatuteCreateWithoutCaseInput, LegalStatuteUncheckedCreateWithoutCaseInput>
  }

  export type LegalStatuteUpdateWithWhereUniqueWithoutCaseInput = {
    where: LegalStatuteWhereUniqueInput
    data: XOR<LegalStatuteUpdateWithoutCaseInput, LegalStatuteUncheckedUpdateWithoutCaseInput>
  }

  export type LegalStatuteUpdateManyWithWhereWithoutCaseInput = {
    where: LegalStatuteScalarWhereInput
    data: XOR<LegalStatuteUpdateManyMutationInput, LegalStatuteUncheckedUpdateManyWithoutCaseInput>
  }

  export type CourtDecisionUpsertWithWhereUniqueWithoutCaseInput = {
    where: CourtDecisionWhereUniqueInput
    update: XOR<CourtDecisionUpdateWithoutCaseInput, CourtDecisionUncheckedUpdateWithoutCaseInput>
    create: XOR<CourtDecisionCreateWithoutCaseInput, CourtDecisionUncheckedCreateWithoutCaseInput>
  }

  export type CourtDecisionUpdateWithWhereUniqueWithoutCaseInput = {
    where: CourtDecisionWhereUniqueInput
    data: XOR<CourtDecisionUpdateWithoutCaseInput, CourtDecisionUncheckedUpdateWithoutCaseInput>
  }

  export type CourtDecisionUpdateManyWithWhereWithoutCaseInput = {
    where: CourtDecisionScalarWhereInput
    data: XOR<CourtDecisionUpdateManyMutationInput, CourtDecisionUncheckedUpdateManyWithoutCaseInput>
  }

  export type CaseCreateWithoutFilesInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    priority?: $Enums.CasePriority
    clientName?: string | null
    clientEmail?: string | null
    clientPhone?: string | null
    dueDate?: Date | string | null
    tags?: CaseCreatetagsInput | string[]
    notes?: string | null
    progress?: number
    estimatedHours?: number | null
    actualHours?: number
    hourlyRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedTo?: UserCreateNestedOneWithoutAssignedCasesInput
    createdBy?: UserCreateNestedOneWithoutCreatedCasesInput
    activities?: ActivityCreateNestedManyWithoutCaseInput
    milestones?: MilestoneCreateNestedManyWithoutCaseInput
    comments?: CommentCreateNestedManyWithoutCaseInput
    timeEntries?: TimeEntryCreateNestedManyWithoutCaseInput
    legalRefs?: LegalReferenceCreateNestedManyWithoutCaseInput
    workflowSteps?: WorkflowStepCreateNestedManyWithoutCaseInput
    documentTypes?: DocumentTypeCreateNestedManyWithoutCaseInput
    legalStatutes?: LegalStatuteCreateNestedManyWithoutCaseInput
    courtDecisions?: CourtDecisionCreateNestedManyWithoutCaseInput
  }

  export type CaseUncheckedCreateWithoutFilesInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    priority?: $Enums.CasePriority
    clientName?: string | null
    clientEmail?: string | null
    clientPhone?: string | null
    dueDate?: Date | string | null
    tags?: CaseCreatetagsInput | string[]
    notes?: string | null
    progress?: number
    estimatedHours?: number | null
    actualHours?: number
    hourlyRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedToId?: string | null
    createdById?: string | null
    activities?: ActivityUncheckedCreateNestedManyWithoutCaseInput
    milestones?: MilestoneUncheckedCreateNestedManyWithoutCaseInput
    comments?: CommentUncheckedCreateNestedManyWithoutCaseInput
    timeEntries?: TimeEntryUncheckedCreateNestedManyWithoutCaseInput
    legalRefs?: LegalReferenceUncheckedCreateNestedManyWithoutCaseInput
    workflowSteps?: WorkflowStepUncheckedCreateNestedManyWithoutCaseInput
    documentTypes?: DocumentTypeUncheckedCreateNestedManyWithoutCaseInput
    legalStatutes?: LegalStatuteUncheckedCreateNestedManyWithoutCaseInput
    courtDecisions?: CourtDecisionUncheckedCreateNestedManyWithoutCaseInput
  }

  export type CaseCreateOrConnectWithoutFilesInput = {
    where: CaseWhereUniqueInput
    create: XOR<CaseCreateWithoutFilesInput, CaseUncheckedCreateWithoutFilesInput>
  }

  export type UserCreateWithoutFileUploadsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    firstName?: string | null
    lastName?: string | null
    phone?: string | null
    position?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    assignedCases?: CaseCreateNestedManyWithoutAssignedToInput
    createdCases?: CaseCreateNestedManyWithoutCreatedByInput
    activities?: ActivityCreateNestedManyWithoutUserInput
    completedMilestones?: MilestoneCreateNestedManyWithoutCompletedByInput
    assignedMilestones?: MilestoneCreateNestedManyWithoutAssignedToInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    timeEntries?: TimeEntryCreateNestedManyWithoutUserInput
    legalRefs?: LegalReferenceCreateNestedManyWithoutAddedByInput
    workflowSteps?: WorkflowStepCreateNestedManyWithoutAssignedToInput
    legalStatutes?: LegalStatuteCreateNestedManyWithoutAddedByInput
    courtDecisions?: CourtDecisionCreateNestedManyWithoutAddedByInput
  }

  export type UserUncheckedCreateWithoutFileUploadsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    firstName?: string | null
    lastName?: string | null
    phone?: string | null
    position?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    assignedCases?: CaseUncheckedCreateNestedManyWithoutAssignedToInput
    createdCases?: CaseUncheckedCreateNestedManyWithoutCreatedByInput
    activities?: ActivityUncheckedCreateNestedManyWithoutUserInput
    completedMilestones?: MilestoneUncheckedCreateNestedManyWithoutCompletedByInput
    assignedMilestones?: MilestoneUncheckedCreateNestedManyWithoutAssignedToInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    timeEntries?: TimeEntryUncheckedCreateNestedManyWithoutUserInput
    legalRefs?: LegalReferenceUncheckedCreateNestedManyWithoutAddedByInput
    workflowSteps?: WorkflowStepUncheckedCreateNestedManyWithoutAssignedToInput
    legalStatutes?: LegalStatuteUncheckedCreateNestedManyWithoutAddedByInput
    courtDecisions?: CourtDecisionUncheckedCreateNestedManyWithoutAddedByInput
  }

  export type UserCreateOrConnectWithoutFileUploadsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFileUploadsInput, UserUncheckedCreateWithoutFileUploadsInput>
  }

  export type CaseUpsertWithoutFilesInput = {
    update: XOR<CaseUpdateWithoutFilesInput, CaseUncheckedUpdateWithoutFilesInput>
    create: XOR<CaseCreateWithoutFilesInput, CaseUncheckedCreateWithoutFilesInput>
    where?: CaseWhereInput
  }

  export type CaseUpdateToOneWithWhereWithoutFilesInput = {
    where?: CaseWhereInput
    data: XOR<CaseUpdateWithoutFilesInput, CaseUncheckedUpdateWithoutFilesInput>
  }

  export type CaseUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    priority?: EnumCasePriorityFieldUpdateOperationsInput | $Enums.CasePriority
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    clientEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientPhone?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tags?: CaseUpdatetagsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: IntFieldUpdateOperationsInput | number
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: FloatFieldUpdateOperationsInput | number
    hourlyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedTo?: UserUpdateOneWithoutAssignedCasesNestedInput
    createdBy?: UserUpdateOneWithoutCreatedCasesNestedInput
    activities?: ActivityUpdateManyWithoutCaseNestedInput
    milestones?: MilestoneUpdateManyWithoutCaseNestedInput
    comments?: CommentUpdateManyWithoutCaseNestedInput
    timeEntries?: TimeEntryUpdateManyWithoutCaseNestedInput
    legalRefs?: LegalReferenceUpdateManyWithoutCaseNestedInput
    workflowSteps?: WorkflowStepUpdateManyWithoutCaseNestedInput
    documentTypes?: DocumentTypeUpdateManyWithoutCaseNestedInput
    legalStatutes?: LegalStatuteUpdateManyWithoutCaseNestedInput
    courtDecisions?: CourtDecisionUpdateManyWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    priority?: EnumCasePriorityFieldUpdateOperationsInput | $Enums.CasePriority
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    clientEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientPhone?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tags?: CaseUpdatetagsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: IntFieldUpdateOperationsInput | number
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: FloatFieldUpdateOperationsInput | number
    hourlyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUncheckedUpdateManyWithoutCaseNestedInput
    milestones?: MilestoneUncheckedUpdateManyWithoutCaseNestedInput
    comments?: CommentUncheckedUpdateManyWithoutCaseNestedInput
    timeEntries?: TimeEntryUncheckedUpdateManyWithoutCaseNestedInput
    legalRefs?: LegalReferenceUncheckedUpdateManyWithoutCaseNestedInput
    workflowSteps?: WorkflowStepUncheckedUpdateManyWithoutCaseNestedInput
    documentTypes?: DocumentTypeUncheckedUpdateManyWithoutCaseNestedInput
    legalStatutes?: LegalStatuteUncheckedUpdateManyWithoutCaseNestedInput
    courtDecisions?: CourtDecisionUncheckedUpdateManyWithoutCaseNestedInput
  }

  export type UserUpsertWithoutFileUploadsInput = {
    update: XOR<UserUpdateWithoutFileUploadsInput, UserUncheckedUpdateWithoutFileUploadsInput>
    create: XOR<UserCreateWithoutFileUploadsInput, UserUncheckedCreateWithoutFileUploadsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFileUploadsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFileUploadsInput, UserUncheckedUpdateWithoutFileUploadsInput>
  }

  export type UserUpdateWithoutFileUploadsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    assignedCases?: CaseUpdateManyWithoutAssignedToNestedInput
    createdCases?: CaseUpdateManyWithoutCreatedByNestedInput
    activities?: ActivityUpdateManyWithoutUserNestedInput
    completedMilestones?: MilestoneUpdateManyWithoutCompletedByNestedInput
    assignedMilestones?: MilestoneUpdateManyWithoutAssignedToNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    timeEntries?: TimeEntryUpdateManyWithoutUserNestedInput
    legalRefs?: LegalReferenceUpdateManyWithoutAddedByNestedInput
    workflowSteps?: WorkflowStepUpdateManyWithoutAssignedToNestedInput
    legalStatutes?: LegalStatuteUpdateManyWithoutAddedByNestedInput
    courtDecisions?: CourtDecisionUpdateManyWithoutAddedByNestedInput
  }

  export type UserUncheckedUpdateWithoutFileUploadsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    assignedCases?: CaseUncheckedUpdateManyWithoutAssignedToNestedInput
    createdCases?: CaseUncheckedUpdateManyWithoutCreatedByNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    completedMilestones?: MilestoneUncheckedUpdateManyWithoutCompletedByNestedInput
    assignedMilestones?: MilestoneUncheckedUpdateManyWithoutAssignedToNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    timeEntries?: TimeEntryUncheckedUpdateManyWithoutUserNestedInput
    legalRefs?: LegalReferenceUncheckedUpdateManyWithoutAddedByNestedInput
    workflowSteps?: WorkflowStepUncheckedUpdateManyWithoutAssignedToNestedInput
    legalStatutes?: LegalStatuteUncheckedUpdateManyWithoutAddedByNestedInput
    courtDecisions?: CourtDecisionUncheckedUpdateManyWithoutAddedByNestedInput
  }

  export type UserCreateWithoutActivitiesInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    firstName?: string | null
    lastName?: string | null
    phone?: string | null
    position?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    assignedCases?: CaseCreateNestedManyWithoutAssignedToInput
    createdCases?: CaseCreateNestedManyWithoutCreatedByInput
    fileUploads?: FileCreateNestedManyWithoutUploadedByInput
    completedMilestones?: MilestoneCreateNestedManyWithoutCompletedByInput
    assignedMilestones?: MilestoneCreateNestedManyWithoutAssignedToInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    timeEntries?: TimeEntryCreateNestedManyWithoutUserInput
    legalRefs?: LegalReferenceCreateNestedManyWithoutAddedByInput
    workflowSteps?: WorkflowStepCreateNestedManyWithoutAssignedToInput
    legalStatutes?: LegalStatuteCreateNestedManyWithoutAddedByInput
    courtDecisions?: CourtDecisionCreateNestedManyWithoutAddedByInput
  }

  export type UserUncheckedCreateWithoutActivitiesInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    firstName?: string | null
    lastName?: string | null
    phone?: string | null
    position?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    assignedCases?: CaseUncheckedCreateNestedManyWithoutAssignedToInput
    createdCases?: CaseUncheckedCreateNestedManyWithoutCreatedByInput
    fileUploads?: FileUncheckedCreateNestedManyWithoutUploadedByInput
    completedMilestones?: MilestoneUncheckedCreateNestedManyWithoutCompletedByInput
    assignedMilestones?: MilestoneUncheckedCreateNestedManyWithoutAssignedToInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    timeEntries?: TimeEntryUncheckedCreateNestedManyWithoutUserInput
    legalRefs?: LegalReferenceUncheckedCreateNestedManyWithoutAddedByInput
    workflowSteps?: WorkflowStepUncheckedCreateNestedManyWithoutAssignedToInput
    legalStatutes?: LegalStatuteUncheckedCreateNestedManyWithoutAddedByInput
    courtDecisions?: CourtDecisionUncheckedCreateNestedManyWithoutAddedByInput
  }

  export type UserCreateOrConnectWithoutActivitiesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutActivitiesInput, UserUncheckedCreateWithoutActivitiesInput>
  }

  export type CaseCreateWithoutActivitiesInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    priority?: $Enums.CasePriority
    clientName?: string | null
    clientEmail?: string | null
    clientPhone?: string | null
    dueDate?: Date | string | null
    tags?: CaseCreatetagsInput | string[]
    notes?: string | null
    progress?: number
    estimatedHours?: number | null
    actualHours?: number
    hourlyRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedTo?: UserCreateNestedOneWithoutAssignedCasesInput
    createdBy?: UserCreateNestedOneWithoutCreatedCasesInput
    files?: FileCreateNestedManyWithoutCaseInput
    milestones?: MilestoneCreateNestedManyWithoutCaseInput
    comments?: CommentCreateNestedManyWithoutCaseInput
    timeEntries?: TimeEntryCreateNestedManyWithoutCaseInput
    legalRefs?: LegalReferenceCreateNestedManyWithoutCaseInput
    workflowSteps?: WorkflowStepCreateNestedManyWithoutCaseInput
    documentTypes?: DocumentTypeCreateNestedManyWithoutCaseInput
    legalStatutes?: LegalStatuteCreateNestedManyWithoutCaseInput
    courtDecisions?: CourtDecisionCreateNestedManyWithoutCaseInput
  }

  export type CaseUncheckedCreateWithoutActivitiesInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    priority?: $Enums.CasePriority
    clientName?: string | null
    clientEmail?: string | null
    clientPhone?: string | null
    dueDate?: Date | string | null
    tags?: CaseCreatetagsInput | string[]
    notes?: string | null
    progress?: number
    estimatedHours?: number | null
    actualHours?: number
    hourlyRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedToId?: string | null
    createdById?: string | null
    files?: FileUncheckedCreateNestedManyWithoutCaseInput
    milestones?: MilestoneUncheckedCreateNestedManyWithoutCaseInput
    comments?: CommentUncheckedCreateNestedManyWithoutCaseInput
    timeEntries?: TimeEntryUncheckedCreateNestedManyWithoutCaseInput
    legalRefs?: LegalReferenceUncheckedCreateNestedManyWithoutCaseInput
    workflowSteps?: WorkflowStepUncheckedCreateNestedManyWithoutCaseInput
    documentTypes?: DocumentTypeUncheckedCreateNestedManyWithoutCaseInput
    legalStatutes?: LegalStatuteUncheckedCreateNestedManyWithoutCaseInput
    courtDecisions?: CourtDecisionUncheckedCreateNestedManyWithoutCaseInput
  }

  export type CaseCreateOrConnectWithoutActivitiesInput = {
    where: CaseWhereUniqueInput
    create: XOR<CaseCreateWithoutActivitiesInput, CaseUncheckedCreateWithoutActivitiesInput>
  }

  export type UserUpsertWithoutActivitiesInput = {
    update: XOR<UserUpdateWithoutActivitiesInput, UserUncheckedUpdateWithoutActivitiesInput>
    create: XOR<UserCreateWithoutActivitiesInput, UserUncheckedCreateWithoutActivitiesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutActivitiesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutActivitiesInput, UserUncheckedUpdateWithoutActivitiesInput>
  }

  export type UserUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    assignedCases?: CaseUpdateManyWithoutAssignedToNestedInput
    createdCases?: CaseUpdateManyWithoutCreatedByNestedInput
    fileUploads?: FileUpdateManyWithoutUploadedByNestedInput
    completedMilestones?: MilestoneUpdateManyWithoutCompletedByNestedInput
    assignedMilestones?: MilestoneUpdateManyWithoutAssignedToNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    timeEntries?: TimeEntryUpdateManyWithoutUserNestedInput
    legalRefs?: LegalReferenceUpdateManyWithoutAddedByNestedInput
    workflowSteps?: WorkflowStepUpdateManyWithoutAssignedToNestedInput
    legalStatutes?: LegalStatuteUpdateManyWithoutAddedByNestedInput
    courtDecisions?: CourtDecisionUpdateManyWithoutAddedByNestedInput
  }

  export type UserUncheckedUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    assignedCases?: CaseUncheckedUpdateManyWithoutAssignedToNestedInput
    createdCases?: CaseUncheckedUpdateManyWithoutCreatedByNestedInput
    fileUploads?: FileUncheckedUpdateManyWithoutUploadedByNestedInput
    completedMilestones?: MilestoneUncheckedUpdateManyWithoutCompletedByNestedInput
    assignedMilestones?: MilestoneUncheckedUpdateManyWithoutAssignedToNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    timeEntries?: TimeEntryUncheckedUpdateManyWithoutUserNestedInput
    legalRefs?: LegalReferenceUncheckedUpdateManyWithoutAddedByNestedInput
    workflowSteps?: WorkflowStepUncheckedUpdateManyWithoutAssignedToNestedInput
    legalStatutes?: LegalStatuteUncheckedUpdateManyWithoutAddedByNestedInput
    courtDecisions?: CourtDecisionUncheckedUpdateManyWithoutAddedByNestedInput
  }

  export type CaseUpsertWithoutActivitiesInput = {
    update: XOR<CaseUpdateWithoutActivitiesInput, CaseUncheckedUpdateWithoutActivitiesInput>
    create: XOR<CaseCreateWithoutActivitiesInput, CaseUncheckedCreateWithoutActivitiesInput>
    where?: CaseWhereInput
  }

  export type CaseUpdateToOneWithWhereWithoutActivitiesInput = {
    where?: CaseWhereInput
    data: XOR<CaseUpdateWithoutActivitiesInput, CaseUncheckedUpdateWithoutActivitiesInput>
  }

  export type CaseUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    priority?: EnumCasePriorityFieldUpdateOperationsInput | $Enums.CasePriority
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    clientEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientPhone?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tags?: CaseUpdatetagsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: IntFieldUpdateOperationsInput | number
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: FloatFieldUpdateOperationsInput | number
    hourlyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedTo?: UserUpdateOneWithoutAssignedCasesNestedInput
    createdBy?: UserUpdateOneWithoutCreatedCasesNestedInput
    files?: FileUpdateManyWithoutCaseNestedInput
    milestones?: MilestoneUpdateManyWithoutCaseNestedInput
    comments?: CommentUpdateManyWithoutCaseNestedInput
    timeEntries?: TimeEntryUpdateManyWithoutCaseNestedInput
    legalRefs?: LegalReferenceUpdateManyWithoutCaseNestedInput
    workflowSteps?: WorkflowStepUpdateManyWithoutCaseNestedInput
    documentTypes?: DocumentTypeUpdateManyWithoutCaseNestedInput
    legalStatutes?: LegalStatuteUpdateManyWithoutCaseNestedInput
    courtDecisions?: CourtDecisionUpdateManyWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    priority?: EnumCasePriorityFieldUpdateOperationsInput | $Enums.CasePriority
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    clientEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientPhone?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tags?: CaseUpdatetagsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: IntFieldUpdateOperationsInput | number
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: FloatFieldUpdateOperationsInput | number
    hourlyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    files?: FileUncheckedUpdateManyWithoutCaseNestedInput
    milestones?: MilestoneUncheckedUpdateManyWithoutCaseNestedInput
    comments?: CommentUncheckedUpdateManyWithoutCaseNestedInput
    timeEntries?: TimeEntryUncheckedUpdateManyWithoutCaseNestedInput
    legalRefs?: LegalReferenceUncheckedUpdateManyWithoutCaseNestedInput
    workflowSteps?: WorkflowStepUncheckedUpdateManyWithoutCaseNestedInput
    documentTypes?: DocumentTypeUncheckedUpdateManyWithoutCaseNestedInput
    legalStatutes?: LegalStatuteUncheckedUpdateManyWithoutCaseNestedInput
    courtDecisions?: CourtDecisionUncheckedUpdateManyWithoutCaseNestedInput
  }

  export type CaseCreateWithoutMilestonesInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    priority?: $Enums.CasePriority
    clientName?: string | null
    clientEmail?: string | null
    clientPhone?: string | null
    dueDate?: Date | string | null
    tags?: CaseCreatetagsInput | string[]
    notes?: string | null
    progress?: number
    estimatedHours?: number | null
    actualHours?: number
    hourlyRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedTo?: UserCreateNestedOneWithoutAssignedCasesInput
    createdBy?: UserCreateNestedOneWithoutCreatedCasesInput
    files?: FileCreateNestedManyWithoutCaseInput
    activities?: ActivityCreateNestedManyWithoutCaseInput
    comments?: CommentCreateNestedManyWithoutCaseInput
    timeEntries?: TimeEntryCreateNestedManyWithoutCaseInput
    legalRefs?: LegalReferenceCreateNestedManyWithoutCaseInput
    workflowSteps?: WorkflowStepCreateNestedManyWithoutCaseInput
    documentTypes?: DocumentTypeCreateNestedManyWithoutCaseInput
    legalStatutes?: LegalStatuteCreateNestedManyWithoutCaseInput
    courtDecisions?: CourtDecisionCreateNestedManyWithoutCaseInput
  }

  export type CaseUncheckedCreateWithoutMilestonesInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    priority?: $Enums.CasePriority
    clientName?: string | null
    clientEmail?: string | null
    clientPhone?: string | null
    dueDate?: Date | string | null
    tags?: CaseCreatetagsInput | string[]
    notes?: string | null
    progress?: number
    estimatedHours?: number | null
    actualHours?: number
    hourlyRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedToId?: string | null
    createdById?: string | null
    files?: FileUncheckedCreateNestedManyWithoutCaseInput
    activities?: ActivityUncheckedCreateNestedManyWithoutCaseInput
    comments?: CommentUncheckedCreateNestedManyWithoutCaseInput
    timeEntries?: TimeEntryUncheckedCreateNestedManyWithoutCaseInput
    legalRefs?: LegalReferenceUncheckedCreateNestedManyWithoutCaseInput
    workflowSteps?: WorkflowStepUncheckedCreateNestedManyWithoutCaseInput
    documentTypes?: DocumentTypeUncheckedCreateNestedManyWithoutCaseInput
    legalStatutes?: LegalStatuteUncheckedCreateNestedManyWithoutCaseInput
    courtDecisions?: CourtDecisionUncheckedCreateNestedManyWithoutCaseInput
  }

  export type CaseCreateOrConnectWithoutMilestonesInput = {
    where: CaseWhereUniqueInput
    create: XOR<CaseCreateWithoutMilestonesInput, CaseUncheckedCreateWithoutMilestonesInput>
  }

  export type UserCreateWithoutCompletedMilestonesInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    firstName?: string | null
    lastName?: string | null
    phone?: string | null
    position?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    assignedCases?: CaseCreateNestedManyWithoutAssignedToInput
    createdCases?: CaseCreateNestedManyWithoutCreatedByInput
    activities?: ActivityCreateNestedManyWithoutUserInput
    fileUploads?: FileCreateNestedManyWithoutUploadedByInput
    assignedMilestones?: MilestoneCreateNestedManyWithoutAssignedToInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    timeEntries?: TimeEntryCreateNestedManyWithoutUserInput
    legalRefs?: LegalReferenceCreateNestedManyWithoutAddedByInput
    workflowSteps?: WorkflowStepCreateNestedManyWithoutAssignedToInput
    legalStatutes?: LegalStatuteCreateNestedManyWithoutAddedByInput
    courtDecisions?: CourtDecisionCreateNestedManyWithoutAddedByInput
  }

  export type UserUncheckedCreateWithoutCompletedMilestonesInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    firstName?: string | null
    lastName?: string | null
    phone?: string | null
    position?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    assignedCases?: CaseUncheckedCreateNestedManyWithoutAssignedToInput
    createdCases?: CaseUncheckedCreateNestedManyWithoutCreatedByInput
    activities?: ActivityUncheckedCreateNestedManyWithoutUserInput
    fileUploads?: FileUncheckedCreateNestedManyWithoutUploadedByInput
    assignedMilestones?: MilestoneUncheckedCreateNestedManyWithoutAssignedToInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    timeEntries?: TimeEntryUncheckedCreateNestedManyWithoutUserInput
    legalRefs?: LegalReferenceUncheckedCreateNestedManyWithoutAddedByInput
    workflowSteps?: WorkflowStepUncheckedCreateNestedManyWithoutAssignedToInput
    legalStatutes?: LegalStatuteUncheckedCreateNestedManyWithoutAddedByInput
    courtDecisions?: CourtDecisionUncheckedCreateNestedManyWithoutAddedByInput
  }

  export type UserCreateOrConnectWithoutCompletedMilestonesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCompletedMilestonesInput, UserUncheckedCreateWithoutCompletedMilestonesInput>
  }

  export type UserCreateWithoutAssignedMilestonesInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    firstName?: string | null
    lastName?: string | null
    phone?: string | null
    position?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    assignedCases?: CaseCreateNestedManyWithoutAssignedToInput
    createdCases?: CaseCreateNestedManyWithoutCreatedByInput
    activities?: ActivityCreateNestedManyWithoutUserInput
    fileUploads?: FileCreateNestedManyWithoutUploadedByInput
    completedMilestones?: MilestoneCreateNestedManyWithoutCompletedByInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    timeEntries?: TimeEntryCreateNestedManyWithoutUserInput
    legalRefs?: LegalReferenceCreateNestedManyWithoutAddedByInput
    workflowSteps?: WorkflowStepCreateNestedManyWithoutAssignedToInput
    legalStatutes?: LegalStatuteCreateNestedManyWithoutAddedByInput
    courtDecisions?: CourtDecisionCreateNestedManyWithoutAddedByInput
  }

  export type UserUncheckedCreateWithoutAssignedMilestonesInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    firstName?: string | null
    lastName?: string | null
    phone?: string | null
    position?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    assignedCases?: CaseUncheckedCreateNestedManyWithoutAssignedToInput
    createdCases?: CaseUncheckedCreateNestedManyWithoutCreatedByInput
    activities?: ActivityUncheckedCreateNestedManyWithoutUserInput
    fileUploads?: FileUncheckedCreateNestedManyWithoutUploadedByInput
    completedMilestones?: MilestoneUncheckedCreateNestedManyWithoutCompletedByInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    timeEntries?: TimeEntryUncheckedCreateNestedManyWithoutUserInput
    legalRefs?: LegalReferenceUncheckedCreateNestedManyWithoutAddedByInput
    workflowSteps?: WorkflowStepUncheckedCreateNestedManyWithoutAssignedToInput
    legalStatutes?: LegalStatuteUncheckedCreateNestedManyWithoutAddedByInput
    courtDecisions?: CourtDecisionUncheckedCreateNestedManyWithoutAddedByInput
  }

  export type UserCreateOrConnectWithoutAssignedMilestonesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssignedMilestonesInput, UserUncheckedCreateWithoutAssignedMilestonesInput>
  }

  export type CaseUpsertWithoutMilestonesInput = {
    update: XOR<CaseUpdateWithoutMilestonesInput, CaseUncheckedUpdateWithoutMilestonesInput>
    create: XOR<CaseCreateWithoutMilestonesInput, CaseUncheckedCreateWithoutMilestonesInput>
    where?: CaseWhereInput
  }

  export type CaseUpdateToOneWithWhereWithoutMilestonesInput = {
    where?: CaseWhereInput
    data: XOR<CaseUpdateWithoutMilestonesInput, CaseUncheckedUpdateWithoutMilestonesInput>
  }

  export type CaseUpdateWithoutMilestonesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    priority?: EnumCasePriorityFieldUpdateOperationsInput | $Enums.CasePriority
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    clientEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientPhone?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tags?: CaseUpdatetagsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: IntFieldUpdateOperationsInput | number
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: FloatFieldUpdateOperationsInput | number
    hourlyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedTo?: UserUpdateOneWithoutAssignedCasesNestedInput
    createdBy?: UserUpdateOneWithoutCreatedCasesNestedInput
    files?: FileUpdateManyWithoutCaseNestedInput
    activities?: ActivityUpdateManyWithoutCaseNestedInput
    comments?: CommentUpdateManyWithoutCaseNestedInput
    timeEntries?: TimeEntryUpdateManyWithoutCaseNestedInput
    legalRefs?: LegalReferenceUpdateManyWithoutCaseNestedInput
    workflowSteps?: WorkflowStepUpdateManyWithoutCaseNestedInput
    documentTypes?: DocumentTypeUpdateManyWithoutCaseNestedInput
    legalStatutes?: LegalStatuteUpdateManyWithoutCaseNestedInput
    courtDecisions?: CourtDecisionUpdateManyWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateWithoutMilestonesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    priority?: EnumCasePriorityFieldUpdateOperationsInput | $Enums.CasePriority
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    clientEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientPhone?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tags?: CaseUpdatetagsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: IntFieldUpdateOperationsInput | number
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: FloatFieldUpdateOperationsInput | number
    hourlyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    files?: FileUncheckedUpdateManyWithoutCaseNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutCaseNestedInput
    comments?: CommentUncheckedUpdateManyWithoutCaseNestedInput
    timeEntries?: TimeEntryUncheckedUpdateManyWithoutCaseNestedInput
    legalRefs?: LegalReferenceUncheckedUpdateManyWithoutCaseNestedInput
    workflowSteps?: WorkflowStepUncheckedUpdateManyWithoutCaseNestedInput
    documentTypes?: DocumentTypeUncheckedUpdateManyWithoutCaseNestedInput
    legalStatutes?: LegalStatuteUncheckedUpdateManyWithoutCaseNestedInput
    courtDecisions?: CourtDecisionUncheckedUpdateManyWithoutCaseNestedInput
  }

  export type UserUpsertWithoutCompletedMilestonesInput = {
    update: XOR<UserUpdateWithoutCompletedMilestonesInput, UserUncheckedUpdateWithoutCompletedMilestonesInput>
    create: XOR<UserCreateWithoutCompletedMilestonesInput, UserUncheckedCreateWithoutCompletedMilestonesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCompletedMilestonesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCompletedMilestonesInput, UserUncheckedUpdateWithoutCompletedMilestonesInput>
  }

  export type UserUpdateWithoutCompletedMilestonesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    assignedCases?: CaseUpdateManyWithoutAssignedToNestedInput
    createdCases?: CaseUpdateManyWithoutCreatedByNestedInput
    activities?: ActivityUpdateManyWithoutUserNestedInput
    fileUploads?: FileUpdateManyWithoutUploadedByNestedInput
    assignedMilestones?: MilestoneUpdateManyWithoutAssignedToNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    timeEntries?: TimeEntryUpdateManyWithoutUserNestedInput
    legalRefs?: LegalReferenceUpdateManyWithoutAddedByNestedInput
    workflowSteps?: WorkflowStepUpdateManyWithoutAssignedToNestedInput
    legalStatutes?: LegalStatuteUpdateManyWithoutAddedByNestedInput
    courtDecisions?: CourtDecisionUpdateManyWithoutAddedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCompletedMilestonesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    assignedCases?: CaseUncheckedUpdateManyWithoutAssignedToNestedInput
    createdCases?: CaseUncheckedUpdateManyWithoutCreatedByNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    fileUploads?: FileUncheckedUpdateManyWithoutUploadedByNestedInput
    assignedMilestones?: MilestoneUncheckedUpdateManyWithoutAssignedToNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    timeEntries?: TimeEntryUncheckedUpdateManyWithoutUserNestedInput
    legalRefs?: LegalReferenceUncheckedUpdateManyWithoutAddedByNestedInput
    workflowSteps?: WorkflowStepUncheckedUpdateManyWithoutAssignedToNestedInput
    legalStatutes?: LegalStatuteUncheckedUpdateManyWithoutAddedByNestedInput
    courtDecisions?: CourtDecisionUncheckedUpdateManyWithoutAddedByNestedInput
  }

  export type UserUpsertWithoutAssignedMilestonesInput = {
    update: XOR<UserUpdateWithoutAssignedMilestonesInput, UserUncheckedUpdateWithoutAssignedMilestonesInput>
    create: XOR<UserCreateWithoutAssignedMilestonesInput, UserUncheckedCreateWithoutAssignedMilestonesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssignedMilestonesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssignedMilestonesInput, UserUncheckedUpdateWithoutAssignedMilestonesInput>
  }

  export type UserUpdateWithoutAssignedMilestonesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    assignedCases?: CaseUpdateManyWithoutAssignedToNestedInput
    createdCases?: CaseUpdateManyWithoutCreatedByNestedInput
    activities?: ActivityUpdateManyWithoutUserNestedInput
    fileUploads?: FileUpdateManyWithoutUploadedByNestedInput
    completedMilestones?: MilestoneUpdateManyWithoutCompletedByNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    timeEntries?: TimeEntryUpdateManyWithoutUserNestedInput
    legalRefs?: LegalReferenceUpdateManyWithoutAddedByNestedInput
    workflowSteps?: WorkflowStepUpdateManyWithoutAssignedToNestedInput
    legalStatutes?: LegalStatuteUpdateManyWithoutAddedByNestedInput
    courtDecisions?: CourtDecisionUpdateManyWithoutAddedByNestedInput
  }

  export type UserUncheckedUpdateWithoutAssignedMilestonesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    assignedCases?: CaseUncheckedUpdateManyWithoutAssignedToNestedInput
    createdCases?: CaseUncheckedUpdateManyWithoutCreatedByNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    fileUploads?: FileUncheckedUpdateManyWithoutUploadedByNestedInput
    completedMilestones?: MilestoneUncheckedUpdateManyWithoutCompletedByNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    timeEntries?: TimeEntryUncheckedUpdateManyWithoutUserNestedInput
    legalRefs?: LegalReferenceUncheckedUpdateManyWithoutAddedByNestedInput
    workflowSteps?: WorkflowStepUncheckedUpdateManyWithoutAssignedToNestedInput
    legalStatutes?: LegalStatuteUncheckedUpdateManyWithoutAddedByNestedInput
    courtDecisions?: CourtDecisionUncheckedUpdateManyWithoutAddedByNestedInput
  }

  export type CaseCreateWithoutCommentsInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    priority?: $Enums.CasePriority
    clientName?: string | null
    clientEmail?: string | null
    clientPhone?: string | null
    dueDate?: Date | string | null
    tags?: CaseCreatetagsInput | string[]
    notes?: string | null
    progress?: number
    estimatedHours?: number | null
    actualHours?: number
    hourlyRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedTo?: UserCreateNestedOneWithoutAssignedCasesInput
    createdBy?: UserCreateNestedOneWithoutCreatedCasesInput
    files?: FileCreateNestedManyWithoutCaseInput
    activities?: ActivityCreateNestedManyWithoutCaseInput
    milestones?: MilestoneCreateNestedManyWithoutCaseInput
    timeEntries?: TimeEntryCreateNestedManyWithoutCaseInput
    legalRefs?: LegalReferenceCreateNestedManyWithoutCaseInput
    workflowSteps?: WorkflowStepCreateNestedManyWithoutCaseInput
    documentTypes?: DocumentTypeCreateNestedManyWithoutCaseInput
    legalStatutes?: LegalStatuteCreateNestedManyWithoutCaseInput
    courtDecisions?: CourtDecisionCreateNestedManyWithoutCaseInput
  }

  export type CaseUncheckedCreateWithoutCommentsInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    priority?: $Enums.CasePriority
    clientName?: string | null
    clientEmail?: string | null
    clientPhone?: string | null
    dueDate?: Date | string | null
    tags?: CaseCreatetagsInput | string[]
    notes?: string | null
    progress?: number
    estimatedHours?: number | null
    actualHours?: number
    hourlyRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedToId?: string | null
    createdById?: string | null
    files?: FileUncheckedCreateNestedManyWithoutCaseInput
    activities?: ActivityUncheckedCreateNestedManyWithoutCaseInput
    milestones?: MilestoneUncheckedCreateNestedManyWithoutCaseInput
    timeEntries?: TimeEntryUncheckedCreateNestedManyWithoutCaseInput
    legalRefs?: LegalReferenceUncheckedCreateNestedManyWithoutCaseInput
    workflowSteps?: WorkflowStepUncheckedCreateNestedManyWithoutCaseInput
    documentTypes?: DocumentTypeUncheckedCreateNestedManyWithoutCaseInput
    legalStatutes?: LegalStatuteUncheckedCreateNestedManyWithoutCaseInput
    courtDecisions?: CourtDecisionUncheckedCreateNestedManyWithoutCaseInput
  }

  export type CaseCreateOrConnectWithoutCommentsInput = {
    where: CaseWhereUniqueInput
    create: XOR<CaseCreateWithoutCommentsInput, CaseUncheckedCreateWithoutCommentsInput>
  }

  export type UserCreateWithoutCommentsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    firstName?: string | null
    lastName?: string | null
    phone?: string | null
    position?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    assignedCases?: CaseCreateNestedManyWithoutAssignedToInput
    createdCases?: CaseCreateNestedManyWithoutCreatedByInput
    activities?: ActivityCreateNestedManyWithoutUserInput
    fileUploads?: FileCreateNestedManyWithoutUploadedByInput
    completedMilestones?: MilestoneCreateNestedManyWithoutCompletedByInput
    assignedMilestones?: MilestoneCreateNestedManyWithoutAssignedToInput
    timeEntries?: TimeEntryCreateNestedManyWithoutUserInput
    legalRefs?: LegalReferenceCreateNestedManyWithoutAddedByInput
    workflowSteps?: WorkflowStepCreateNestedManyWithoutAssignedToInput
    legalStatutes?: LegalStatuteCreateNestedManyWithoutAddedByInput
    courtDecisions?: CourtDecisionCreateNestedManyWithoutAddedByInput
  }

  export type UserUncheckedCreateWithoutCommentsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    firstName?: string | null
    lastName?: string | null
    phone?: string | null
    position?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    assignedCases?: CaseUncheckedCreateNestedManyWithoutAssignedToInput
    createdCases?: CaseUncheckedCreateNestedManyWithoutCreatedByInput
    activities?: ActivityUncheckedCreateNestedManyWithoutUserInput
    fileUploads?: FileUncheckedCreateNestedManyWithoutUploadedByInput
    completedMilestones?: MilestoneUncheckedCreateNestedManyWithoutCompletedByInput
    assignedMilestones?: MilestoneUncheckedCreateNestedManyWithoutAssignedToInput
    timeEntries?: TimeEntryUncheckedCreateNestedManyWithoutUserInput
    legalRefs?: LegalReferenceUncheckedCreateNestedManyWithoutAddedByInput
    workflowSteps?: WorkflowStepUncheckedCreateNestedManyWithoutAssignedToInput
    legalStatutes?: LegalStatuteUncheckedCreateNestedManyWithoutAddedByInput
    courtDecisions?: CourtDecisionUncheckedCreateNestedManyWithoutAddedByInput
  }

  export type UserCreateOrConnectWithoutCommentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
  }

  export type CaseUpsertWithoutCommentsInput = {
    update: XOR<CaseUpdateWithoutCommentsInput, CaseUncheckedUpdateWithoutCommentsInput>
    create: XOR<CaseCreateWithoutCommentsInput, CaseUncheckedCreateWithoutCommentsInput>
    where?: CaseWhereInput
  }

  export type CaseUpdateToOneWithWhereWithoutCommentsInput = {
    where?: CaseWhereInput
    data: XOR<CaseUpdateWithoutCommentsInput, CaseUncheckedUpdateWithoutCommentsInput>
  }

  export type CaseUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    priority?: EnumCasePriorityFieldUpdateOperationsInput | $Enums.CasePriority
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    clientEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientPhone?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tags?: CaseUpdatetagsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: IntFieldUpdateOperationsInput | number
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: FloatFieldUpdateOperationsInput | number
    hourlyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedTo?: UserUpdateOneWithoutAssignedCasesNestedInput
    createdBy?: UserUpdateOneWithoutCreatedCasesNestedInput
    files?: FileUpdateManyWithoutCaseNestedInput
    activities?: ActivityUpdateManyWithoutCaseNestedInput
    milestones?: MilestoneUpdateManyWithoutCaseNestedInput
    timeEntries?: TimeEntryUpdateManyWithoutCaseNestedInput
    legalRefs?: LegalReferenceUpdateManyWithoutCaseNestedInput
    workflowSteps?: WorkflowStepUpdateManyWithoutCaseNestedInput
    documentTypes?: DocumentTypeUpdateManyWithoutCaseNestedInput
    legalStatutes?: LegalStatuteUpdateManyWithoutCaseNestedInput
    courtDecisions?: CourtDecisionUpdateManyWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    priority?: EnumCasePriorityFieldUpdateOperationsInput | $Enums.CasePriority
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    clientEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientPhone?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tags?: CaseUpdatetagsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: IntFieldUpdateOperationsInput | number
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: FloatFieldUpdateOperationsInput | number
    hourlyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    files?: FileUncheckedUpdateManyWithoutCaseNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutCaseNestedInput
    milestones?: MilestoneUncheckedUpdateManyWithoutCaseNestedInput
    timeEntries?: TimeEntryUncheckedUpdateManyWithoutCaseNestedInput
    legalRefs?: LegalReferenceUncheckedUpdateManyWithoutCaseNestedInput
    workflowSteps?: WorkflowStepUncheckedUpdateManyWithoutCaseNestedInput
    documentTypes?: DocumentTypeUncheckedUpdateManyWithoutCaseNestedInput
    legalStatutes?: LegalStatuteUncheckedUpdateManyWithoutCaseNestedInput
    courtDecisions?: CourtDecisionUncheckedUpdateManyWithoutCaseNestedInput
  }

  export type UserUpsertWithoutCommentsInput = {
    update: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCommentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    assignedCases?: CaseUpdateManyWithoutAssignedToNestedInput
    createdCases?: CaseUpdateManyWithoutCreatedByNestedInput
    activities?: ActivityUpdateManyWithoutUserNestedInput
    fileUploads?: FileUpdateManyWithoutUploadedByNestedInput
    completedMilestones?: MilestoneUpdateManyWithoutCompletedByNestedInput
    assignedMilestones?: MilestoneUpdateManyWithoutAssignedToNestedInput
    timeEntries?: TimeEntryUpdateManyWithoutUserNestedInput
    legalRefs?: LegalReferenceUpdateManyWithoutAddedByNestedInput
    workflowSteps?: WorkflowStepUpdateManyWithoutAssignedToNestedInput
    legalStatutes?: LegalStatuteUpdateManyWithoutAddedByNestedInput
    courtDecisions?: CourtDecisionUpdateManyWithoutAddedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    assignedCases?: CaseUncheckedUpdateManyWithoutAssignedToNestedInput
    createdCases?: CaseUncheckedUpdateManyWithoutCreatedByNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    fileUploads?: FileUncheckedUpdateManyWithoutUploadedByNestedInput
    completedMilestones?: MilestoneUncheckedUpdateManyWithoutCompletedByNestedInput
    assignedMilestones?: MilestoneUncheckedUpdateManyWithoutAssignedToNestedInput
    timeEntries?: TimeEntryUncheckedUpdateManyWithoutUserNestedInput
    legalRefs?: LegalReferenceUncheckedUpdateManyWithoutAddedByNestedInput
    workflowSteps?: WorkflowStepUncheckedUpdateManyWithoutAssignedToNestedInput
    legalStatutes?: LegalStatuteUncheckedUpdateManyWithoutAddedByNestedInput
    courtDecisions?: CourtDecisionUncheckedUpdateManyWithoutAddedByNestedInput
  }

  export type CaseCreateWithoutTimeEntriesInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    priority?: $Enums.CasePriority
    clientName?: string | null
    clientEmail?: string | null
    clientPhone?: string | null
    dueDate?: Date | string | null
    tags?: CaseCreatetagsInput | string[]
    notes?: string | null
    progress?: number
    estimatedHours?: number | null
    actualHours?: number
    hourlyRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedTo?: UserCreateNestedOneWithoutAssignedCasesInput
    createdBy?: UserCreateNestedOneWithoutCreatedCasesInput
    files?: FileCreateNestedManyWithoutCaseInput
    activities?: ActivityCreateNestedManyWithoutCaseInput
    milestones?: MilestoneCreateNestedManyWithoutCaseInput
    comments?: CommentCreateNestedManyWithoutCaseInput
    legalRefs?: LegalReferenceCreateNestedManyWithoutCaseInput
    workflowSteps?: WorkflowStepCreateNestedManyWithoutCaseInput
    documentTypes?: DocumentTypeCreateNestedManyWithoutCaseInput
    legalStatutes?: LegalStatuteCreateNestedManyWithoutCaseInput
    courtDecisions?: CourtDecisionCreateNestedManyWithoutCaseInput
  }

  export type CaseUncheckedCreateWithoutTimeEntriesInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    priority?: $Enums.CasePriority
    clientName?: string | null
    clientEmail?: string | null
    clientPhone?: string | null
    dueDate?: Date | string | null
    tags?: CaseCreatetagsInput | string[]
    notes?: string | null
    progress?: number
    estimatedHours?: number | null
    actualHours?: number
    hourlyRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedToId?: string | null
    createdById?: string | null
    files?: FileUncheckedCreateNestedManyWithoutCaseInput
    activities?: ActivityUncheckedCreateNestedManyWithoutCaseInput
    milestones?: MilestoneUncheckedCreateNestedManyWithoutCaseInput
    comments?: CommentUncheckedCreateNestedManyWithoutCaseInput
    legalRefs?: LegalReferenceUncheckedCreateNestedManyWithoutCaseInput
    workflowSteps?: WorkflowStepUncheckedCreateNestedManyWithoutCaseInput
    documentTypes?: DocumentTypeUncheckedCreateNestedManyWithoutCaseInput
    legalStatutes?: LegalStatuteUncheckedCreateNestedManyWithoutCaseInput
    courtDecisions?: CourtDecisionUncheckedCreateNestedManyWithoutCaseInput
  }

  export type CaseCreateOrConnectWithoutTimeEntriesInput = {
    where: CaseWhereUniqueInput
    create: XOR<CaseCreateWithoutTimeEntriesInput, CaseUncheckedCreateWithoutTimeEntriesInput>
  }

  export type UserCreateWithoutTimeEntriesInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    firstName?: string | null
    lastName?: string | null
    phone?: string | null
    position?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    assignedCases?: CaseCreateNestedManyWithoutAssignedToInput
    createdCases?: CaseCreateNestedManyWithoutCreatedByInput
    activities?: ActivityCreateNestedManyWithoutUserInput
    fileUploads?: FileCreateNestedManyWithoutUploadedByInput
    completedMilestones?: MilestoneCreateNestedManyWithoutCompletedByInput
    assignedMilestones?: MilestoneCreateNestedManyWithoutAssignedToInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    legalRefs?: LegalReferenceCreateNestedManyWithoutAddedByInput
    workflowSteps?: WorkflowStepCreateNestedManyWithoutAssignedToInput
    legalStatutes?: LegalStatuteCreateNestedManyWithoutAddedByInput
    courtDecisions?: CourtDecisionCreateNestedManyWithoutAddedByInput
  }

  export type UserUncheckedCreateWithoutTimeEntriesInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    firstName?: string | null
    lastName?: string | null
    phone?: string | null
    position?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    assignedCases?: CaseUncheckedCreateNestedManyWithoutAssignedToInput
    createdCases?: CaseUncheckedCreateNestedManyWithoutCreatedByInput
    activities?: ActivityUncheckedCreateNestedManyWithoutUserInput
    fileUploads?: FileUncheckedCreateNestedManyWithoutUploadedByInput
    completedMilestones?: MilestoneUncheckedCreateNestedManyWithoutCompletedByInput
    assignedMilestones?: MilestoneUncheckedCreateNestedManyWithoutAssignedToInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    legalRefs?: LegalReferenceUncheckedCreateNestedManyWithoutAddedByInput
    workflowSteps?: WorkflowStepUncheckedCreateNestedManyWithoutAssignedToInput
    legalStatutes?: LegalStatuteUncheckedCreateNestedManyWithoutAddedByInput
    courtDecisions?: CourtDecisionUncheckedCreateNestedManyWithoutAddedByInput
  }

  export type UserCreateOrConnectWithoutTimeEntriesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTimeEntriesInput, UserUncheckedCreateWithoutTimeEntriesInput>
  }

  export type CaseUpsertWithoutTimeEntriesInput = {
    update: XOR<CaseUpdateWithoutTimeEntriesInput, CaseUncheckedUpdateWithoutTimeEntriesInput>
    create: XOR<CaseCreateWithoutTimeEntriesInput, CaseUncheckedCreateWithoutTimeEntriesInput>
    where?: CaseWhereInput
  }

  export type CaseUpdateToOneWithWhereWithoutTimeEntriesInput = {
    where?: CaseWhereInput
    data: XOR<CaseUpdateWithoutTimeEntriesInput, CaseUncheckedUpdateWithoutTimeEntriesInput>
  }

  export type CaseUpdateWithoutTimeEntriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    priority?: EnumCasePriorityFieldUpdateOperationsInput | $Enums.CasePriority
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    clientEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientPhone?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tags?: CaseUpdatetagsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: IntFieldUpdateOperationsInput | number
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: FloatFieldUpdateOperationsInput | number
    hourlyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedTo?: UserUpdateOneWithoutAssignedCasesNestedInput
    createdBy?: UserUpdateOneWithoutCreatedCasesNestedInput
    files?: FileUpdateManyWithoutCaseNestedInput
    activities?: ActivityUpdateManyWithoutCaseNestedInput
    milestones?: MilestoneUpdateManyWithoutCaseNestedInput
    comments?: CommentUpdateManyWithoutCaseNestedInput
    legalRefs?: LegalReferenceUpdateManyWithoutCaseNestedInput
    workflowSteps?: WorkflowStepUpdateManyWithoutCaseNestedInput
    documentTypes?: DocumentTypeUpdateManyWithoutCaseNestedInput
    legalStatutes?: LegalStatuteUpdateManyWithoutCaseNestedInput
    courtDecisions?: CourtDecisionUpdateManyWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateWithoutTimeEntriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    priority?: EnumCasePriorityFieldUpdateOperationsInput | $Enums.CasePriority
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    clientEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientPhone?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tags?: CaseUpdatetagsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: IntFieldUpdateOperationsInput | number
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: FloatFieldUpdateOperationsInput | number
    hourlyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    files?: FileUncheckedUpdateManyWithoutCaseNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutCaseNestedInput
    milestones?: MilestoneUncheckedUpdateManyWithoutCaseNestedInput
    comments?: CommentUncheckedUpdateManyWithoutCaseNestedInput
    legalRefs?: LegalReferenceUncheckedUpdateManyWithoutCaseNestedInput
    workflowSteps?: WorkflowStepUncheckedUpdateManyWithoutCaseNestedInput
    documentTypes?: DocumentTypeUncheckedUpdateManyWithoutCaseNestedInput
    legalStatutes?: LegalStatuteUncheckedUpdateManyWithoutCaseNestedInput
    courtDecisions?: CourtDecisionUncheckedUpdateManyWithoutCaseNestedInput
  }

  export type UserUpsertWithoutTimeEntriesInput = {
    update: XOR<UserUpdateWithoutTimeEntriesInput, UserUncheckedUpdateWithoutTimeEntriesInput>
    create: XOR<UserCreateWithoutTimeEntriesInput, UserUncheckedCreateWithoutTimeEntriesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTimeEntriesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTimeEntriesInput, UserUncheckedUpdateWithoutTimeEntriesInput>
  }

  export type UserUpdateWithoutTimeEntriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    assignedCases?: CaseUpdateManyWithoutAssignedToNestedInput
    createdCases?: CaseUpdateManyWithoutCreatedByNestedInput
    activities?: ActivityUpdateManyWithoutUserNestedInput
    fileUploads?: FileUpdateManyWithoutUploadedByNestedInput
    completedMilestones?: MilestoneUpdateManyWithoutCompletedByNestedInput
    assignedMilestones?: MilestoneUpdateManyWithoutAssignedToNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    legalRefs?: LegalReferenceUpdateManyWithoutAddedByNestedInput
    workflowSteps?: WorkflowStepUpdateManyWithoutAssignedToNestedInput
    legalStatutes?: LegalStatuteUpdateManyWithoutAddedByNestedInput
    courtDecisions?: CourtDecisionUpdateManyWithoutAddedByNestedInput
  }

  export type UserUncheckedUpdateWithoutTimeEntriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    assignedCases?: CaseUncheckedUpdateManyWithoutAssignedToNestedInput
    createdCases?: CaseUncheckedUpdateManyWithoutCreatedByNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    fileUploads?: FileUncheckedUpdateManyWithoutUploadedByNestedInput
    completedMilestones?: MilestoneUncheckedUpdateManyWithoutCompletedByNestedInput
    assignedMilestones?: MilestoneUncheckedUpdateManyWithoutAssignedToNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    legalRefs?: LegalReferenceUncheckedUpdateManyWithoutAddedByNestedInput
    workflowSteps?: WorkflowStepUncheckedUpdateManyWithoutAssignedToNestedInput
    legalStatutes?: LegalStatuteUncheckedUpdateManyWithoutAddedByNestedInput
    courtDecisions?: CourtDecisionUncheckedUpdateManyWithoutAddedByNestedInput
  }

  export type CaseCreateWithoutLegalRefsInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    priority?: $Enums.CasePriority
    clientName?: string | null
    clientEmail?: string | null
    clientPhone?: string | null
    dueDate?: Date | string | null
    tags?: CaseCreatetagsInput | string[]
    notes?: string | null
    progress?: number
    estimatedHours?: number | null
    actualHours?: number
    hourlyRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedTo?: UserCreateNestedOneWithoutAssignedCasesInput
    createdBy?: UserCreateNestedOneWithoutCreatedCasesInput
    files?: FileCreateNestedManyWithoutCaseInput
    activities?: ActivityCreateNestedManyWithoutCaseInput
    milestones?: MilestoneCreateNestedManyWithoutCaseInput
    comments?: CommentCreateNestedManyWithoutCaseInput
    timeEntries?: TimeEntryCreateNestedManyWithoutCaseInput
    workflowSteps?: WorkflowStepCreateNestedManyWithoutCaseInput
    documentTypes?: DocumentTypeCreateNestedManyWithoutCaseInput
    legalStatutes?: LegalStatuteCreateNestedManyWithoutCaseInput
    courtDecisions?: CourtDecisionCreateNestedManyWithoutCaseInput
  }

  export type CaseUncheckedCreateWithoutLegalRefsInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    priority?: $Enums.CasePriority
    clientName?: string | null
    clientEmail?: string | null
    clientPhone?: string | null
    dueDate?: Date | string | null
    tags?: CaseCreatetagsInput | string[]
    notes?: string | null
    progress?: number
    estimatedHours?: number | null
    actualHours?: number
    hourlyRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedToId?: string | null
    createdById?: string | null
    files?: FileUncheckedCreateNestedManyWithoutCaseInput
    activities?: ActivityUncheckedCreateNestedManyWithoutCaseInput
    milestones?: MilestoneUncheckedCreateNestedManyWithoutCaseInput
    comments?: CommentUncheckedCreateNestedManyWithoutCaseInput
    timeEntries?: TimeEntryUncheckedCreateNestedManyWithoutCaseInput
    workflowSteps?: WorkflowStepUncheckedCreateNestedManyWithoutCaseInput
    documentTypes?: DocumentTypeUncheckedCreateNestedManyWithoutCaseInput
    legalStatutes?: LegalStatuteUncheckedCreateNestedManyWithoutCaseInput
    courtDecisions?: CourtDecisionUncheckedCreateNestedManyWithoutCaseInput
  }

  export type CaseCreateOrConnectWithoutLegalRefsInput = {
    where: CaseWhereUniqueInput
    create: XOR<CaseCreateWithoutLegalRefsInput, CaseUncheckedCreateWithoutLegalRefsInput>
  }

  export type UserCreateWithoutLegalRefsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    firstName?: string | null
    lastName?: string | null
    phone?: string | null
    position?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    assignedCases?: CaseCreateNestedManyWithoutAssignedToInput
    createdCases?: CaseCreateNestedManyWithoutCreatedByInput
    activities?: ActivityCreateNestedManyWithoutUserInput
    fileUploads?: FileCreateNestedManyWithoutUploadedByInput
    completedMilestones?: MilestoneCreateNestedManyWithoutCompletedByInput
    assignedMilestones?: MilestoneCreateNestedManyWithoutAssignedToInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    timeEntries?: TimeEntryCreateNestedManyWithoutUserInput
    workflowSteps?: WorkflowStepCreateNestedManyWithoutAssignedToInput
    legalStatutes?: LegalStatuteCreateNestedManyWithoutAddedByInput
    courtDecisions?: CourtDecisionCreateNestedManyWithoutAddedByInput
  }

  export type UserUncheckedCreateWithoutLegalRefsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    firstName?: string | null
    lastName?: string | null
    phone?: string | null
    position?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    assignedCases?: CaseUncheckedCreateNestedManyWithoutAssignedToInput
    createdCases?: CaseUncheckedCreateNestedManyWithoutCreatedByInput
    activities?: ActivityUncheckedCreateNestedManyWithoutUserInput
    fileUploads?: FileUncheckedCreateNestedManyWithoutUploadedByInput
    completedMilestones?: MilestoneUncheckedCreateNestedManyWithoutCompletedByInput
    assignedMilestones?: MilestoneUncheckedCreateNestedManyWithoutAssignedToInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    timeEntries?: TimeEntryUncheckedCreateNestedManyWithoutUserInput
    workflowSteps?: WorkflowStepUncheckedCreateNestedManyWithoutAssignedToInput
    legalStatutes?: LegalStatuteUncheckedCreateNestedManyWithoutAddedByInput
    courtDecisions?: CourtDecisionUncheckedCreateNestedManyWithoutAddedByInput
  }

  export type UserCreateOrConnectWithoutLegalRefsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLegalRefsInput, UserUncheckedCreateWithoutLegalRefsInput>
  }

  export type CaseUpsertWithoutLegalRefsInput = {
    update: XOR<CaseUpdateWithoutLegalRefsInput, CaseUncheckedUpdateWithoutLegalRefsInput>
    create: XOR<CaseCreateWithoutLegalRefsInput, CaseUncheckedCreateWithoutLegalRefsInput>
    where?: CaseWhereInput
  }

  export type CaseUpdateToOneWithWhereWithoutLegalRefsInput = {
    where?: CaseWhereInput
    data: XOR<CaseUpdateWithoutLegalRefsInput, CaseUncheckedUpdateWithoutLegalRefsInput>
  }

  export type CaseUpdateWithoutLegalRefsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    priority?: EnumCasePriorityFieldUpdateOperationsInput | $Enums.CasePriority
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    clientEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientPhone?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tags?: CaseUpdatetagsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: IntFieldUpdateOperationsInput | number
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: FloatFieldUpdateOperationsInput | number
    hourlyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedTo?: UserUpdateOneWithoutAssignedCasesNestedInput
    createdBy?: UserUpdateOneWithoutCreatedCasesNestedInput
    files?: FileUpdateManyWithoutCaseNestedInput
    activities?: ActivityUpdateManyWithoutCaseNestedInput
    milestones?: MilestoneUpdateManyWithoutCaseNestedInput
    comments?: CommentUpdateManyWithoutCaseNestedInput
    timeEntries?: TimeEntryUpdateManyWithoutCaseNestedInput
    workflowSteps?: WorkflowStepUpdateManyWithoutCaseNestedInput
    documentTypes?: DocumentTypeUpdateManyWithoutCaseNestedInput
    legalStatutes?: LegalStatuteUpdateManyWithoutCaseNestedInput
    courtDecisions?: CourtDecisionUpdateManyWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateWithoutLegalRefsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    priority?: EnumCasePriorityFieldUpdateOperationsInput | $Enums.CasePriority
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    clientEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientPhone?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tags?: CaseUpdatetagsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: IntFieldUpdateOperationsInput | number
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: FloatFieldUpdateOperationsInput | number
    hourlyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    files?: FileUncheckedUpdateManyWithoutCaseNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutCaseNestedInput
    milestones?: MilestoneUncheckedUpdateManyWithoutCaseNestedInput
    comments?: CommentUncheckedUpdateManyWithoutCaseNestedInput
    timeEntries?: TimeEntryUncheckedUpdateManyWithoutCaseNestedInput
    workflowSteps?: WorkflowStepUncheckedUpdateManyWithoutCaseNestedInput
    documentTypes?: DocumentTypeUncheckedUpdateManyWithoutCaseNestedInput
    legalStatutes?: LegalStatuteUncheckedUpdateManyWithoutCaseNestedInput
    courtDecisions?: CourtDecisionUncheckedUpdateManyWithoutCaseNestedInput
  }

  export type UserUpsertWithoutLegalRefsInput = {
    update: XOR<UserUpdateWithoutLegalRefsInput, UserUncheckedUpdateWithoutLegalRefsInput>
    create: XOR<UserCreateWithoutLegalRefsInput, UserUncheckedCreateWithoutLegalRefsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLegalRefsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLegalRefsInput, UserUncheckedUpdateWithoutLegalRefsInput>
  }

  export type UserUpdateWithoutLegalRefsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    assignedCases?: CaseUpdateManyWithoutAssignedToNestedInput
    createdCases?: CaseUpdateManyWithoutCreatedByNestedInput
    activities?: ActivityUpdateManyWithoutUserNestedInput
    fileUploads?: FileUpdateManyWithoutUploadedByNestedInput
    completedMilestones?: MilestoneUpdateManyWithoutCompletedByNestedInput
    assignedMilestones?: MilestoneUpdateManyWithoutAssignedToNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    timeEntries?: TimeEntryUpdateManyWithoutUserNestedInput
    workflowSteps?: WorkflowStepUpdateManyWithoutAssignedToNestedInput
    legalStatutes?: LegalStatuteUpdateManyWithoutAddedByNestedInput
    courtDecisions?: CourtDecisionUpdateManyWithoutAddedByNestedInput
  }

  export type UserUncheckedUpdateWithoutLegalRefsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    assignedCases?: CaseUncheckedUpdateManyWithoutAssignedToNestedInput
    createdCases?: CaseUncheckedUpdateManyWithoutCreatedByNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    fileUploads?: FileUncheckedUpdateManyWithoutUploadedByNestedInput
    completedMilestones?: MilestoneUncheckedUpdateManyWithoutCompletedByNestedInput
    assignedMilestones?: MilestoneUncheckedUpdateManyWithoutAssignedToNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    timeEntries?: TimeEntryUncheckedUpdateManyWithoutUserNestedInput
    workflowSteps?: WorkflowStepUncheckedUpdateManyWithoutAssignedToNestedInput
    legalStatutes?: LegalStatuteUncheckedUpdateManyWithoutAddedByNestedInput
    courtDecisions?: CourtDecisionUncheckedUpdateManyWithoutAddedByNestedInput
  }

  export type UserCreateWithoutWorkflowStepsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    firstName?: string | null
    lastName?: string | null
    phone?: string | null
    position?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    assignedCases?: CaseCreateNestedManyWithoutAssignedToInput
    createdCases?: CaseCreateNestedManyWithoutCreatedByInput
    activities?: ActivityCreateNestedManyWithoutUserInput
    fileUploads?: FileCreateNestedManyWithoutUploadedByInput
    completedMilestones?: MilestoneCreateNestedManyWithoutCompletedByInput
    assignedMilestones?: MilestoneCreateNestedManyWithoutAssignedToInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    timeEntries?: TimeEntryCreateNestedManyWithoutUserInput
    legalRefs?: LegalReferenceCreateNestedManyWithoutAddedByInput
    legalStatutes?: LegalStatuteCreateNestedManyWithoutAddedByInput
    courtDecisions?: CourtDecisionCreateNestedManyWithoutAddedByInput
  }

  export type UserUncheckedCreateWithoutWorkflowStepsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    firstName?: string | null
    lastName?: string | null
    phone?: string | null
    position?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    assignedCases?: CaseUncheckedCreateNestedManyWithoutAssignedToInput
    createdCases?: CaseUncheckedCreateNestedManyWithoutCreatedByInput
    activities?: ActivityUncheckedCreateNestedManyWithoutUserInput
    fileUploads?: FileUncheckedCreateNestedManyWithoutUploadedByInput
    completedMilestones?: MilestoneUncheckedCreateNestedManyWithoutCompletedByInput
    assignedMilestones?: MilestoneUncheckedCreateNestedManyWithoutAssignedToInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    timeEntries?: TimeEntryUncheckedCreateNestedManyWithoutUserInput
    legalRefs?: LegalReferenceUncheckedCreateNestedManyWithoutAddedByInput
    legalStatutes?: LegalStatuteUncheckedCreateNestedManyWithoutAddedByInput
    courtDecisions?: CourtDecisionUncheckedCreateNestedManyWithoutAddedByInput
  }

  export type UserCreateOrConnectWithoutWorkflowStepsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWorkflowStepsInput, UserUncheckedCreateWithoutWorkflowStepsInput>
  }

  export type CaseCreateWithoutWorkflowStepsInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    priority?: $Enums.CasePriority
    clientName?: string | null
    clientEmail?: string | null
    clientPhone?: string | null
    dueDate?: Date | string | null
    tags?: CaseCreatetagsInput | string[]
    notes?: string | null
    progress?: number
    estimatedHours?: number | null
    actualHours?: number
    hourlyRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedTo?: UserCreateNestedOneWithoutAssignedCasesInput
    createdBy?: UserCreateNestedOneWithoutCreatedCasesInput
    files?: FileCreateNestedManyWithoutCaseInput
    activities?: ActivityCreateNestedManyWithoutCaseInput
    milestones?: MilestoneCreateNestedManyWithoutCaseInput
    comments?: CommentCreateNestedManyWithoutCaseInput
    timeEntries?: TimeEntryCreateNestedManyWithoutCaseInput
    legalRefs?: LegalReferenceCreateNestedManyWithoutCaseInput
    documentTypes?: DocumentTypeCreateNestedManyWithoutCaseInput
    legalStatutes?: LegalStatuteCreateNestedManyWithoutCaseInput
    courtDecisions?: CourtDecisionCreateNestedManyWithoutCaseInput
  }

  export type CaseUncheckedCreateWithoutWorkflowStepsInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    priority?: $Enums.CasePriority
    clientName?: string | null
    clientEmail?: string | null
    clientPhone?: string | null
    dueDate?: Date | string | null
    tags?: CaseCreatetagsInput | string[]
    notes?: string | null
    progress?: number
    estimatedHours?: number | null
    actualHours?: number
    hourlyRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedToId?: string | null
    createdById?: string | null
    files?: FileUncheckedCreateNestedManyWithoutCaseInput
    activities?: ActivityUncheckedCreateNestedManyWithoutCaseInput
    milestones?: MilestoneUncheckedCreateNestedManyWithoutCaseInput
    comments?: CommentUncheckedCreateNestedManyWithoutCaseInput
    timeEntries?: TimeEntryUncheckedCreateNestedManyWithoutCaseInput
    legalRefs?: LegalReferenceUncheckedCreateNestedManyWithoutCaseInput
    documentTypes?: DocumentTypeUncheckedCreateNestedManyWithoutCaseInput
    legalStatutes?: LegalStatuteUncheckedCreateNestedManyWithoutCaseInput
    courtDecisions?: CourtDecisionUncheckedCreateNestedManyWithoutCaseInput
  }

  export type CaseCreateOrConnectWithoutWorkflowStepsInput = {
    where: CaseWhereUniqueInput
    create: XOR<CaseCreateWithoutWorkflowStepsInput, CaseUncheckedCreateWithoutWorkflowStepsInput>
  }

  export type UserUpsertWithoutWorkflowStepsInput = {
    update: XOR<UserUpdateWithoutWorkflowStepsInput, UserUncheckedUpdateWithoutWorkflowStepsInput>
    create: XOR<UserCreateWithoutWorkflowStepsInput, UserUncheckedCreateWithoutWorkflowStepsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWorkflowStepsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWorkflowStepsInput, UserUncheckedUpdateWithoutWorkflowStepsInput>
  }

  export type UserUpdateWithoutWorkflowStepsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    assignedCases?: CaseUpdateManyWithoutAssignedToNestedInput
    createdCases?: CaseUpdateManyWithoutCreatedByNestedInput
    activities?: ActivityUpdateManyWithoutUserNestedInput
    fileUploads?: FileUpdateManyWithoutUploadedByNestedInput
    completedMilestones?: MilestoneUpdateManyWithoutCompletedByNestedInput
    assignedMilestones?: MilestoneUpdateManyWithoutAssignedToNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    timeEntries?: TimeEntryUpdateManyWithoutUserNestedInput
    legalRefs?: LegalReferenceUpdateManyWithoutAddedByNestedInput
    legalStatutes?: LegalStatuteUpdateManyWithoutAddedByNestedInput
    courtDecisions?: CourtDecisionUpdateManyWithoutAddedByNestedInput
  }

  export type UserUncheckedUpdateWithoutWorkflowStepsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    assignedCases?: CaseUncheckedUpdateManyWithoutAssignedToNestedInput
    createdCases?: CaseUncheckedUpdateManyWithoutCreatedByNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    fileUploads?: FileUncheckedUpdateManyWithoutUploadedByNestedInput
    completedMilestones?: MilestoneUncheckedUpdateManyWithoutCompletedByNestedInput
    assignedMilestones?: MilestoneUncheckedUpdateManyWithoutAssignedToNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    timeEntries?: TimeEntryUncheckedUpdateManyWithoutUserNestedInput
    legalRefs?: LegalReferenceUncheckedUpdateManyWithoutAddedByNestedInput
    legalStatutes?: LegalStatuteUncheckedUpdateManyWithoutAddedByNestedInput
    courtDecisions?: CourtDecisionUncheckedUpdateManyWithoutAddedByNestedInput
  }

  export type CaseUpsertWithoutWorkflowStepsInput = {
    update: XOR<CaseUpdateWithoutWorkflowStepsInput, CaseUncheckedUpdateWithoutWorkflowStepsInput>
    create: XOR<CaseCreateWithoutWorkflowStepsInput, CaseUncheckedCreateWithoutWorkflowStepsInput>
    where?: CaseWhereInput
  }

  export type CaseUpdateToOneWithWhereWithoutWorkflowStepsInput = {
    where?: CaseWhereInput
    data: XOR<CaseUpdateWithoutWorkflowStepsInput, CaseUncheckedUpdateWithoutWorkflowStepsInput>
  }

  export type CaseUpdateWithoutWorkflowStepsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    priority?: EnumCasePriorityFieldUpdateOperationsInput | $Enums.CasePriority
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    clientEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientPhone?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tags?: CaseUpdatetagsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: IntFieldUpdateOperationsInput | number
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: FloatFieldUpdateOperationsInput | number
    hourlyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedTo?: UserUpdateOneWithoutAssignedCasesNestedInput
    createdBy?: UserUpdateOneWithoutCreatedCasesNestedInput
    files?: FileUpdateManyWithoutCaseNestedInput
    activities?: ActivityUpdateManyWithoutCaseNestedInput
    milestones?: MilestoneUpdateManyWithoutCaseNestedInput
    comments?: CommentUpdateManyWithoutCaseNestedInput
    timeEntries?: TimeEntryUpdateManyWithoutCaseNestedInput
    legalRefs?: LegalReferenceUpdateManyWithoutCaseNestedInput
    documentTypes?: DocumentTypeUpdateManyWithoutCaseNestedInput
    legalStatutes?: LegalStatuteUpdateManyWithoutCaseNestedInput
    courtDecisions?: CourtDecisionUpdateManyWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateWithoutWorkflowStepsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    priority?: EnumCasePriorityFieldUpdateOperationsInput | $Enums.CasePriority
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    clientEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientPhone?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tags?: CaseUpdatetagsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: IntFieldUpdateOperationsInput | number
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: FloatFieldUpdateOperationsInput | number
    hourlyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    files?: FileUncheckedUpdateManyWithoutCaseNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutCaseNestedInput
    milestones?: MilestoneUncheckedUpdateManyWithoutCaseNestedInput
    comments?: CommentUncheckedUpdateManyWithoutCaseNestedInput
    timeEntries?: TimeEntryUncheckedUpdateManyWithoutCaseNestedInput
    legalRefs?: LegalReferenceUncheckedUpdateManyWithoutCaseNestedInput
    documentTypes?: DocumentTypeUncheckedUpdateManyWithoutCaseNestedInput
    legalStatutes?: LegalStatuteUncheckedUpdateManyWithoutCaseNestedInput
    courtDecisions?: CourtDecisionUncheckedUpdateManyWithoutCaseNestedInput
  }

  export type CaseCreateWithoutDocumentTypesInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    priority?: $Enums.CasePriority
    clientName?: string | null
    clientEmail?: string | null
    clientPhone?: string | null
    dueDate?: Date | string | null
    tags?: CaseCreatetagsInput | string[]
    notes?: string | null
    progress?: number
    estimatedHours?: number | null
    actualHours?: number
    hourlyRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedTo?: UserCreateNestedOneWithoutAssignedCasesInput
    createdBy?: UserCreateNestedOneWithoutCreatedCasesInput
    files?: FileCreateNestedManyWithoutCaseInput
    activities?: ActivityCreateNestedManyWithoutCaseInput
    milestones?: MilestoneCreateNestedManyWithoutCaseInput
    comments?: CommentCreateNestedManyWithoutCaseInput
    timeEntries?: TimeEntryCreateNestedManyWithoutCaseInput
    legalRefs?: LegalReferenceCreateNestedManyWithoutCaseInput
    workflowSteps?: WorkflowStepCreateNestedManyWithoutCaseInput
    legalStatutes?: LegalStatuteCreateNestedManyWithoutCaseInput
    courtDecisions?: CourtDecisionCreateNestedManyWithoutCaseInput
  }

  export type CaseUncheckedCreateWithoutDocumentTypesInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    priority?: $Enums.CasePriority
    clientName?: string | null
    clientEmail?: string | null
    clientPhone?: string | null
    dueDate?: Date | string | null
    tags?: CaseCreatetagsInput | string[]
    notes?: string | null
    progress?: number
    estimatedHours?: number | null
    actualHours?: number
    hourlyRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedToId?: string | null
    createdById?: string | null
    files?: FileUncheckedCreateNestedManyWithoutCaseInput
    activities?: ActivityUncheckedCreateNestedManyWithoutCaseInput
    milestones?: MilestoneUncheckedCreateNestedManyWithoutCaseInput
    comments?: CommentUncheckedCreateNestedManyWithoutCaseInput
    timeEntries?: TimeEntryUncheckedCreateNestedManyWithoutCaseInput
    legalRefs?: LegalReferenceUncheckedCreateNestedManyWithoutCaseInput
    workflowSteps?: WorkflowStepUncheckedCreateNestedManyWithoutCaseInput
    legalStatutes?: LegalStatuteUncheckedCreateNestedManyWithoutCaseInput
    courtDecisions?: CourtDecisionUncheckedCreateNestedManyWithoutCaseInput
  }

  export type CaseCreateOrConnectWithoutDocumentTypesInput = {
    where: CaseWhereUniqueInput
    create: XOR<CaseCreateWithoutDocumentTypesInput, CaseUncheckedCreateWithoutDocumentTypesInput>
  }

  export type CaseUpsertWithoutDocumentTypesInput = {
    update: XOR<CaseUpdateWithoutDocumentTypesInput, CaseUncheckedUpdateWithoutDocumentTypesInput>
    create: XOR<CaseCreateWithoutDocumentTypesInput, CaseUncheckedCreateWithoutDocumentTypesInput>
    where?: CaseWhereInput
  }

  export type CaseUpdateToOneWithWhereWithoutDocumentTypesInput = {
    where?: CaseWhereInput
    data: XOR<CaseUpdateWithoutDocumentTypesInput, CaseUncheckedUpdateWithoutDocumentTypesInput>
  }

  export type CaseUpdateWithoutDocumentTypesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    priority?: EnumCasePriorityFieldUpdateOperationsInput | $Enums.CasePriority
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    clientEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientPhone?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tags?: CaseUpdatetagsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: IntFieldUpdateOperationsInput | number
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: FloatFieldUpdateOperationsInput | number
    hourlyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedTo?: UserUpdateOneWithoutAssignedCasesNestedInput
    createdBy?: UserUpdateOneWithoutCreatedCasesNestedInput
    files?: FileUpdateManyWithoutCaseNestedInput
    activities?: ActivityUpdateManyWithoutCaseNestedInput
    milestones?: MilestoneUpdateManyWithoutCaseNestedInput
    comments?: CommentUpdateManyWithoutCaseNestedInput
    timeEntries?: TimeEntryUpdateManyWithoutCaseNestedInput
    legalRefs?: LegalReferenceUpdateManyWithoutCaseNestedInput
    workflowSteps?: WorkflowStepUpdateManyWithoutCaseNestedInput
    legalStatutes?: LegalStatuteUpdateManyWithoutCaseNestedInput
    courtDecisions?: CourtDecisionUpdateManyWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateWithoutDocumentTypesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    priority?: EnumCasePriorityFieldUpdateOperationsInput | $Enums.CasePriority
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    clientEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientPhone?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tags?: CaseUpdatetagsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: IntFieldUpdateOperationsInput | number
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: FloatFieldUpdateOperationsInput | number
    hourlyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    files?: FileUncheckedUpdateManyWithoutCaseNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutCaseNestedInput
    milestones?: MilestoneUncheckedUpdateManyWithoutCaseNestedInput
    comments?: CommentUncheckedUpdateManyWithoutCaseNestedInput
    timeEntries?: TimeEntryUncheckedUpdateManyWithoutCaseNestedInput
    legalRefs?: LegalReferenceUncheckedUpdateManyWithoutCaseNestedInput
    workflowSteps?: WorkflowStepUncheckedUpdateManyWithoutCaseNestedInput
    legalStatutes?: LegalStatuteUncheckedUpdateManyWithoutCaseNestedInput
    courtDecisions?: CourtDecisionUncheckedUpdateManyWithoutCaseNestedInput
  }

  export type CaseCreateWithoutLegalStatutesInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    priority?: $Enums.CasePriority
    clientName?: string | null
    clientEmail?: string | null
    clientPhone?: string | null
    dueDate?: Date | string | null
    tags?: CaseCreatetagsInput | string[]
    notes?: string | null
    progress?: number
    estimatedHours?: number | null
    actualHours?: number
    hourlyRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedTo?: UserCreateNestedOneWithoutAssignedCasesInput
    createdBy?: UserCreateNestedOneWithoutCreatedCasesInput
    files?: FileCreateNestedManyWithoutCaseInput
    activities?: ActivityCreateNestedManyWithoutCaseInput
    milestones?: MilestoneCreateNestedManyWithoutCaseInput
    comments?: CommentCreateNestedManyWithoutCaseInput
    timeEntries?: TimeEntryCreateNestedManyWithoutCaseInput
    legalRefs?: LegalReferenceCreateNestedManyWithoutCaseInput
    workflowSteps?: WorkflowStepCreateNestedManyWithoutCaseInput
    documentTypes?: DocumentTypeCreateNestedManyWithoutCaseInput
    courtDecisions?: CourtDecisionCreateNestedManyWithoutCaseInput
  }

  export type CaseUncheckedCreateWithoutLegalStatutesInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    priority?: $Enums.CasePriority
    clientName?: string | null
    clientEmail?: string | null
    clientPhone?: string | null
    dueDate?: Date | string | null
    tags?: CaseCreatetagsInput | string[]
    notes?: string | null
    progress?: number
    estimatedHours?: number | null
    actualHours?: number
    hourlyRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedToId?: string | null
    createdById?: string | null
    files?: FileUncheckedCreateNestedManyWithoutCaseInput
    activities?: ActivityUncheckedCreateNestedManyWithoutCaseInput
    milestones?: MilestoneUncheckedCreateNestedManyWithoutCaseInput
    comments?: CommentUncheckedCreateNestedManyWithoutCaseInput
    timeEntries?: TimeEntryUncheckedCreateNestedManyWithoutCaseInput
    legalRefs?: LegalReferenceUncheckedCreateNestedManyWithoutCaseInput
    workflowSteps?: WorkflowStepUncheckedCreateNestedManyWithoutCaseInput
    documentTypes?: DocumentTypeUncheckedCreateNestedManyWithoutCaseInput
    courtDecisions?: CourtDecisionUncheckedCreateNestedManyWithoutCaseInput
  }

  export type CaseCreateOrConnectWithoutLegalStatutesInput = {
    where: CaseWhereUniqueInput
    create: XOR<CaseCreateWithoutLegalStatutesInput, CaseUncheckedCreateWithoutLegalStatutesInput>
  }

  export type UserCreateWithoutLegalStatutesInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    firstName?: string | null
    lastName?: string | null
    phone?: string | null
    position?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    assignedCases?: CaseCreateNestedManyWithoutAssignedToInput
    createdCases?: CaseCreateNestedManyWithoutCreatedByInput
    activities?: ActivityCreateNestedManyWithoutUserInput
    fileUploads?: FileCreateNestedManyWithoutUploadedByInput
    completedMilestones?: MilestoneCreateNestedManyWithoutCompletedByInput
    assignedMilestones?: MilestoneCreateNestedManyWithoutAssignedToInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    timeEntries?: TimeEntryCreateNestedManyWithoutUserInput
    legalRefs?: LegalReferenceCreateNestedManyWithoutAddedByInput
    workflowSteps?: WorkflowStepCreateNestedManyWithoutAssignedToInput
    courtDecisions?: CourtDecisionCreateNestedManyWithoutAddedByInput
  }

  export type UserUncheckedCreateWithoutLegalStatutesInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    firstName?: string | null
    lastName?: string | null
    phone?: string | null
    position?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    assignedCases?: CaseUncheckedCreateNestedManyWithoutAssignedToInput
    createdCases?: CaseUncheckedCreateNestedManyWithoutCreatedByInput
    activities?: ActivityUncheckedCreateNestedManyWithoutUserInput
    fileUploads?: FileUncheckedCreateNestedManyWithoutUploadedByInput
    completedMilestones?: MilestoneUncheckedCreateNestedManyWithoutCompletedByInput
    assignedMilestones?: MilestoneUncheckedCreateNestedManyWithoutAssignedToInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    timeEntries?: TimeEntryUncheckedCreateNestedManyWithoutUserInput
    legalRefs?: LegalReferenceUncheckedCreateNestedManyWithoutAddedByInput
    workflowSteps?: WorkflowStepUncheckedCreateNestedManyWithoutAssignedToInput
    courtDecisions?: CourtDecisionUncheckedCreateNestedManyWithoutAddedByInput
  }

  export type UserCreateOrConnectWithoutLegalStatutesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLegalStatutesInput, UserUncheckedCreateWithoutLegalStatutesInput>
  }

  export type CaseUpsertWithoutLegalStatutesInput = {
    update: XOR<CaseUpdateWithoutLegalStatutesInput, CaseUncheckedUpdateWithoutLegalStatutesInput>
    create: XOR<CaseCreateWithoutLegalStatutesInput, CaseUncheckedCreateWithoutLegalStatutesInput>
    where?: CaseWhereInput
  }

  export type CaseUpdateToOneWithWhereWithoutLegalStatutesInput = {
    where?: CaseWhereInput
    data: XOR<CaseUpdateWithoutLegalStatutesInput, CaseUncheckedUpdateWithoutLegalStatutesInput>
  }

  export type CaseUpdateWithoutLegalStatutesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    priority?: EnumCasePriorityFieldUpdateOperationsInput | $Enums.CasePriority
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    clientEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientPhone?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tags?: CaseUpdatetagsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: IntFieldUpdateOperationsInput | number
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: FloatFieldUpdateOperationsInput | number
    hourlyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedTo?: UserUpdateOneWithoutAssignedCasesNestedInput
    createdBy?: UserUpdateOneWithoutCreatedCasesNestedInput
    files?: FileUpdateManyWithoutCaseNestedInput
    activities?: ActivityUpdateManyWithoutCaseNestedInput
    milestones?: MilestoneUpdateManyWithoutCaseNestedInput
    comments?: CommentUpdateManyWithoutCaseNestedInput
    timeEntries?: TimeEntryUpdateManyWithoutCaseNestedInput
    legalRefs?: LegalReferenceUpdateManyWithoutCaseNestedInput
    workflowSteps?: WorkflowStepUpdateManyWithoutCaseNestedInput
    documentTypes?: DocumentTypeUpdateManyWithoutCaseNestedInput
    courtDecisions?: CourtDecisionUpdateManyWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateWithoutLegalStatutesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    priority?: EnumCasePriorityFieldUpdateOperationsInput | $Enums.CasePriority
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    clientEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientPhone?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tags?: CaseUpdatetagsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: IntFieldUpdateOperationsInput | number
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: FloatFieldUpdateOperationsInput | number
    hourlyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    files?: FileUncheckedUpdateManyWithoutCaseNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutCaseNestedInput
    milestones?: MilestoneUncheckedUpdateManyWithoutCaseNestedInput
    comments?: CommentUncheckedUpdateManyWithoutCaseNestedInput
    timeEntries?: TimeEntryUncheckedUpdateManyWithoutCaseNestedInput
    legalRefs?: LegalReferenceUncheckedUpdateManyWithoutCaseNestedInput
    workflowSteps?: WorkflowStepUncheckedUpdateManyWithoutCaseNestedInput
    documentTypes?: DocumentTypeUncheckedUpdateManyWithoutCaseNestedInput
    courtDecisions?: CourtDecisionUncheckedUpdateManyWithoutCaseNestedInput
  }

  export type UserUpsertWithoutLegalStatutesInput = {
    update: XOR<UserUpdateWithoutLegalStatutesInput, UserUncheckedUpdateWithoutLegalStatutesInput>
    create: XOR<UserCreateWithoutLegalStatutesInput, UserUncheckedCreateWithoutLegalStatutesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLegalStatutesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLegalStatutesInput, UserUncheckedUpdateWithoutLegalStatutesInput>
  }

  export type UserUpdateWithoutLegalStatutesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    assignedCases?: CaseUpdateManyWithoutAssignedToNestedInput
    createdCases?: CaseUpdateManyWithoutCreatedByNestedInput
    activities?: ActivityUpdateManyWithoutUserNestedInput
    fileUploads?: FileUpdateManyWithoutUploadedByNestedInput
    completedMilestones?: MilestoneUpdateManyWithoutCompletedByNestedInput
    assignedMilestones?: MilestoneUpdateManyWithoutAssignedToNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    timeEntries?: TimeEntryUpdateManyWithoutUserNestedInput
    legalRefs?: LegalReferenceUpdateManyWithoutAddedByNestedInput
    workflowSteps?: WorkflowStepUpdateManyWithoutAssignedToNestedInput
    courtDecisions?: CourtDecisionUpdateManyWithoutAddedByNestedInput
  }

  export type UserUncheckedUpdateWithoutLegalStatutesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    assignedCases?: CaseUncheckedUpdateManyWithoutAssignedToNestedInput
    createdCases?: CaseUncheckedUpdateManyWithoutCreatedByNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    fileUploads?: FileUncheckedUpdateManyWithoutUploadedByNestedInput
    completedMilestones?: MilestoneUncheckedUpdateManyWithoutCompletedByNestedInput
    assignedMilestones?: MilestoneUncheckedUpdateManyWithoutAssignedToNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    timeEntries?: TimeEntryUncheckedUpdateManyWithoutUserNestedInput
    legalRefs?: LegalReferenceUncheckedUpdateManyWithoutAddedByNestedInput
    workflowSteps?: WorkflowStepUncheckedUpdateManyWithoutAssignedToNestedInput
    courtDecisions?: CourtDecisionUncheckedUpdateManyWithoutAddedByNestedInput
  }

  export type CaseCreateWithoutCourtDecisionsInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    priority?: $Enums.CasePriority
    clientName?: string | null
    clientEmail?: string | null
    clientPhone?: string | null
    dueDate?: Date | string | null
    tags?: CaseCreatetagsInput | string[]
    notes?: string | null
    progress?: number
    estimatedHours?: number | null
    actualHours?: number
    hourlyRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedTo?: UserCreateNestedOneWithoutAssignedCasesInput
    createdBy?: UserCreateNestedOneWithoutCreatedCasesInput
    files?: FileCreateNestedManyWithoutCaseInput
    activities?: ActivityCreateNestedManyWithoutCaseInput
    milestones?: MilestoneCreateNestedManyWithoutCaseInput
    comments?: CommentCreateNestedManyWithoutCaseInput
    timeEntries?: TimeEntryCreateNestedManyWithoutCaseInput
    legalRefs?: LegalReferenceCreateNestedManyWithoutCaseInput
    workflowSteps?: WorkflowStepCreateNestedManyWithoutCaseInput
    documentTypes?: DocumentTypeCreateNestedManyWithoutCaseInput
    legalStatutes?: LegalStatuteCreateNestedManyWithoutCaseInput
  }

  export type CaseUncheckedCreateWithoutCourtDecisionsInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    priority?: $Enums.CasePriority
    clientName?: string | null
    clientEmail?: string | null
    clientPhone?: string | null
    dueDate?: Date | string | null
    tags?: CaseCreatetagsInput | string[]
    notes?: string | null
    progress?: number
    estimatedHours?: number | null
    actualHours?: number
    hourlyRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedToId?: string | null
    createdById?: string | null
    files?: FileUncheckedCreateNestedManyWithoutCaseInput
    activities?: ActivityUncheckedCreateNestedManyWithoutCaseInput
    milestones?: MilestoneUncheckedCreateNestedManyWithoutCaseInput
    comments?: CommentUncheckedCreateNestedManyWithoutCaseInput
    timeEntries?: TimeEntryUncheckedCreateNestedManyWithoutCaseInput
    legalRefs?: LegalReferenceUncheckedCreateNestedManyWithoutCaseInput
    workflowSteps?: WorkflowStepUncheckedCreateNestedManyWithoutCaseInput
    documentTypes?: DocumentTypeUncheckedCreateNestedManyWithoutCaseInput
    legalStatutes?: LegalStatuteUncheckedCreateNestedManyWithoutCaseInput
  }

  export type CaseCreateOrConnectWithoutCourtDecisionsInput = {
    where: CaseWhereUniqueInput
    create: XOR<CaseCreateWithoutCourtDecisionsInput, CaseUncheckedCreateWithoutCourtDecisionsInput>
  }

  export type UserCreateWithoutCourtDecisionsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    firstName?: string | null
    lastName?: string | null
    phone?: string | null
    position?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    assignedCases?: CaseCreateNestedManyWithoutAssignedToInput
    createdCases?: CaseCreateNestedManyWithoutCreatedByInput
    activities?: ActivityCreateNestedManyWithoutUserInput
    fileUploads?: FileCreateNestedManyWithoutUploadedByInput
    completedMilestones?: MilestoneCreateNestedManyWithoutCompletedByInput
    assignedMilestones?: MilestoneCreateNestedManyWithoutAssignedToInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    timeEntries?: TimeEntryCreateNestedManyWithoutUserInput
    legalRefs?: LegalReferenceCreateNestedManyWithoutAddedByInput
    workflowSteps?: WorkflowStepCreateNestedManyWithoutAssignedToInput
    legalStatutes?: LegalStatuteCreateNestedManyWithoutAddedByInput
  }

  export type UserUncheckedCreateWithoutCourtDecisionsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    firstName?: string | null
    lastName?: string | null
    phone?: string | null
    position?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    assignedCases?: CaseUncheckedCreateNestedManyWithoutAssignedToInput
    createdCases?: CaseUncheckedCreateNestedManyWithoutCreatedByInput
    activities?: ActivityUncheckedCreateNestedManyWithoutUserInput
    fileUploads?: FileUncheckedCreateNestedManyWithoutUploadedByInput
    completedMilestones?: MilestoneUncheckedCreateNestedManyWithoutCompletedByInput
    assignedMilestones?: MilestoneUncheckedCreateNestedManyWithoutAssignedToInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    timeEntries?: TimeEntryUncheckedCreateNestedManyWithoutUserInput
    legalRefs?: LegalReferenceUncheckedCreateNestedManyWithoutAddedByInput
    workflowSteps?: WorkflowStepUncheckedCreateNestedManyWithoutAssignedToInput
    legalStatutes?: LegalStatuteUncheckedCreateNestedManyWithoutAddedByInput
  }

  export type UserCreateOrConnectWithoutCourtDecisionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCourtDecisionsInput, UserUncheckedCreateWithoutCourtDecisionsInput>
  }

  export type CaseUpsertWithoutCourtDecisionsInput = {
    update: XOR<CaseUpdateWithoutCourtDecisionsInput, CaseUncheckedUpdateWithoutCourtDecisionsInput>
    create: XOR<CaseCreateWithoutCourtDecisionsInput, CaseUncheckedCreateWithoutCourtDecisionsInput>
    where?: CaseWhereInput
  }

  export type CaseUpdateToOneWithWhereWithoutCourtDecisionsInput = {
    where?: CaseWhereInput
    data: XOR<CaseUpdateWithoutCourtDecisionsInput, CaseUncheckedUpdateWithoutCourtDecisionsInput>
  }

  export type CaseUpdateWithoutCourtDecisionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    priority?: EnumCasePriorityFieldUpdateOperationsInput | $Enums.CasePriority
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    clientEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientPhone?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tags?: CaseUpdatetagsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: IntFieldUpdateOperationsInput | number
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: FloatFieldUpdateOperationsInput | number
    hourlyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedTo?: UserUpdateOneWithoutAssignedCasesNestedInput
    createdBy?: UserUpdateOneWithoutCreatedCasesNestedInput
    files?: FileUpdateManyWithoutCaseNestedInput
    activities?: ActivityUpdateManyWithoutCaseNestedInput
    milestones?: MilestoneUpdateManyWithoutCaseNestedInput
    comments?: CommentUpdateManyWithoutCaseNestedInput
    timeEntries?: TimeEntryUpdateManyWithoutCaseNestedInput
    legalRefs?: LegalReferenceUpdateManyWithoutCaseNestedInput
    workflowSteps?: WorkflowStepUpdateManyWithoutCaseNestedInput
    documentTypes?: DocumentTypeUpdateManyWithoutCaseNestedInput
    legalStatutes?: LegalStatuteUpdateManyWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateWithoutCourtDecisionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    priority?: EnumCasePriorityFieldUpdateOperationsInput | $Enums.CasePriority
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    clientEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientPhone?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tags?: CaseUpdatetagsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: IntFieldUpdateOperationsInput | number
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: FloatFieldUpdateOperationsInput | number
    hourlyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    files?: FileUncheckedUpdateManyWithoutCaseNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutCaseNestedInput
    milestones?: MilestoneUncheckedUpdateManyWithoutCaseNestedInput
    comments?: CommentUncheckedUpdateManyWithoutCaseNestedInput
    timeEntries?: TimeEntryUncheckedUpdateManyWithoutCaseNestedInput
    legalRefs?: LegalReferenceUncheckedUpdateManyWithoutCaseNestedInput
    workflowSteps?: WorkflowStepUncheckedUpdateManyWithoutCaseNestedInput
    documentTypes?: DocumentTypeUncheckedUpdateManyWithoutCaseNestedInput
    legalStatutes?: LegalStatuteUncheckedUpdateManyWithoutCaseNestedInput
  }

  export type UserUpsertWithoutCourtDecisionsInput = {
    update: XOR<UserUpdateWithoutCourtDecisionsInput, UserUncheckedUpdateWithoutCourtDecisionsInput>
    create: XOR<UserCreateWithoutCourtDecisionsInput, UserUncheckedCreateWithoutCourtDecisionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCourtDecisionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCourtDecisionsInput, UserUncheckedUpdateWithoutCourtDecisionsInput>
  }

  export type UserUpdateWithoutCourtDecisionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    assignedCases?: CaseUpdateManyWithoutAssignedToNestedInput
    createdCases?: CaseUpdateManyWithoutCreatedByNestedInput
    activities?: ActivityUpdateManyWithoutUserNestedInput
    fileUploads?: FileUpdateManyWithoutUploadedByNestedInput
    completedMilestones?: MilestoneUpdateManyWithoutCompletedByNestedInput
    assignedMilestones?: MilestoneUpdateManyWithoutAssignedToNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    timeEntries?: TimeEntryUpdateManyWithoutUserNestedInput
    legalRefs?: LegalReferenceUpdateManyWithoutAddedByNestedInput
    workflowSteps?: WorkflowStepUpdateManyWithoutAssignedToNestedInput
    legalStatutes?: LegalStatuteUpdateManyWithoutAddedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCourtDecisionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    assignedCases?: CaseUncheckedUpdateManyWithoutAssignedToNestedInput
    createdCases?: CaseUncheckedUpdateManyWithoutCreatedByNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    fileUploads?: FileUncheckedUpdateManyWithoutUploadedByNestedInput
    completedMilestones?: MilestoneUncheckedUpdateManyWithoutCompletedByNestedInput
    assignedMilestones?: MilestoneUncheckedUpdateManyWithoutAssignedToNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    timeEntries?: TimeEntryUncheckedUpdateManyWithoutUserNestedInput
    legalRefs?: LegalReferenceUncheckedUpdateManyWithoutAddedByNestedInput
    workflowSteps?: WorkflowStepUncheckedUpdateManyWithoutAssignedToNestedInput
    legalStatutes?: LegalStatuteUncheckedUpdateManyWithoutAddedByNestedInput
  }

  export type AccountCreateManyUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type SessionCreateManyUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type CaseCreateManyAssignedToInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    priority?: $Enums.CasePriority
    clientName?: string | null
    clientEmail?: string | null
    clientPhone?: string | null
    dueDate?: Date | string | null
    tags?: CaseCreatetagsInput | string[]
    notes?: string | null
    progress?: number
    estimatedHours?: number | null
    actualHours?: number
    hourlyRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
  }

  export type CaseCreateManyCreatedByInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    priority?: $Enums.CasePriority
    clientName?: string | null
    clientEmail?: string | null
    clientPhone?: string | null
    dueDate?: Date | string | null
    tags?: CaseCreatetagsInput | string[]
    notes?: string | null
    progress?: number
    estimatedHours?: number | null
    actualHours?: number
    hourlyRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedToId?: string | null
  }

  export type ActivityCreateManyUserInput = {
    id?: string
    type: string
    description: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    caseId?: string | null
  }

  export type FileCreateManyUploadedByInput = {
    id?: string
    originalName: string
    fileName: string
    fileSize: number
    mimeType: string
    filePath: string
    uploadedAt?: Date | string
    caseId: string
  }

  export type MilestoneCreateManyCompletedByInput = {
    id?: string
    title: string
    description?: string | null
    dueDate?: Date | string | null
    completed?: boolean
    completedAt?: Date | string | null
    order?: number
    estimatedHours?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    caseId: string
    assignedToId?: string | null
  }

  export type MilestoneCreateManyAssignedToInput = {
    id?: string
    title: string
    description?: string | null
    dueDate?: Date | string | null
    completed?: boolean
    completedAt?: Date | string | null
    order?: number
    estimatedHours?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    caseId: string
    completedById?: string | null
  }

  export type CommentCreateManyAuthorInput = {
    id?: string
    content: string
    isInternal?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    caseId: string
  }

  export type TimeEntryCreateManyUserInput = {
    id?: string
    description?: string | null
    hours: number
    date: Date | string
    billable?: boolean
    hourlyRate?: number | null
    amount?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    caseId: string
  }

  export type LegalReferenceCreateManyAddedByInput = {
    id?: string
    type: string
    title: string
    citation: string
    url?: string | null
    summary?: string | null
    relevance?: string | null
    createdAt?: Date | string
    caseId: string
  }

  export type WorkflowStepCreateManyAssignedToInput = {
    id?: string
    title: string
    description?: string | null
    order: number
    completed?: boolean
    completedAt?: Date | string | null
    dueDate?: Date | string | null
    dependencies?: WorkflowStepCreatedependenciesInput | string[]
    estimatedHours?: number | null
    actualHours?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    caseId: string
  }

  export type LegalStatuteCreateManyAddedByInput = {
    id?: string
    title: string
    chapter?: string | null
    section?: string | null
    subsection?: string | null
    description?: string | null
    url?: string | null
    notes?: string | null
    priority?: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    caseId: string
  }

  export type CourtDecisionCreateManyAddedByInput = {
    id?: string
    title: string
    court: string
    caseNumber?: string | null
    date?: Date | string | null
    summary?: string | null
    url?: string | null
    relevance?: string | null
    precedent?: boolean
    outcome?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    caseId: string
  }

  export type AccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseUpdateWithoutAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    priority?: EnumCasePriorityFieldUpdateOperationsInput | $Enums.CasePriority
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    clientEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientPhone?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tags?: CaseUpdatetagsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: IntFieldUpdateOperationsInput | number
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: FloatFieldUpdateOperationsInput | number
    hourlyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneWithoutCreatedCasesNestedInput
    files?: FileUpdateManyWithoutCaseNestedInput
    activities?: ActivityUpdateManyWithoutCaseNestedInput
    milestones?: MilestoneUpdateManyWithoutCaseNestedInput
    comments?: CommentUpdateManyWithoutCaseNestedInput
    timeEntries?: TimeEntryUpdateManyWithoutCaseNestedInput
    legalRefs?: LegalReferenceUpdateManyWithoutCaseNestedInput
    workflowSteps?: WorkflowStepUpdateManyWithoutCaseNestedInput
    documentTypes?: DocumentTypeUpdateManyWithoutCaseNestedInput
    legalStatutes?: LegalStatuteUpdateManyWithoutCaseNestedInput
    courtDecisions?: CourtDecisionUpdateManyWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateWithoutAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    priority?: EnumCasePriorityFieldUpdateOperationsInput | $Enums.CasePriority
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    clientEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientPhone?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tags?: CaseUpdatetagsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: IntFieldUpdateOperationsInput | number
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: FloatFieldUpdateOperationsInput | number
    hourlyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    files?: FileUncheckedUpdateManyWithoutCaseNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutCaseNestedInput
    milestones?: MilestoneUncheckedUpdateManyWithoutCaseNestedInput
    comments?: CommentUncheckedUpdateManyWithoutCaseNestedInput
    timeEntries?: TimeEntryUncheckedUpdateManyWithoutCaseNestedInput
    legalRefs?: LegalReferenceUncheckedUpdateManyWithoutCaseNestedInput
    workflowSteps?: WorkflowStepUncheckedUpdateManyWithoutCaseNestedInput
    documentTypes?: DocumentTypeUncheckedUpdateManyWithoutCaseNestedInput
    legalStatutes?: LegalStatuteUncheckedUpdateManyWithoutCaseNestedInput
    courtDecisions?: CourtDecisionUncheckedUpdateManyWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateManyWithoutAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    priority?: EnumCasePriorityFieldUpdateOperationsInput | $Enums.CasePriority
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    clientEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientPhone?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tags?: CaseUpdatetagsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: IntFieldUpdateOperationsInput | number
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: FloatFieldUpdateOperationsInput | number
    hourlyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CaseUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    priority?: EnumCasePriorityFieldUpdateOperationsInput | $Enums.CasePriority
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    clientEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientPhone?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tags?: CaseUpdatetagsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: IntFieldUpdateOperationsInput | number
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: FloatFieldUpdateOperationsInput | number
    hourlyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedTo?: UserUpdateOneWithoutAssignedCasesNestedInput
    files?: FileUpdateManyWithoutCaseNestedInput
    activities?: ActivityUpdateManyWithoutCaseNestedInput
    milestones?: MilestoneUpdateManyWithoutCaseNestedInput
    comments?: CommentUpdateManyWithoutCaseNestedInput
    timeEntries?: TimeEntryUpdateManyWithoutCaseNestedInput
    legalRefs?: LegalReferenceUpdateManyWithoutCaseNestedInput
    workflowSteps?: WorkflowStepUpdateManyWithoutCaseNestedInput
    documentTypes?: DocumentTypeUpdateManyWithoutCaseNestedInput
    legalStatutes?: LegalStatuteUpdateManyWithoutCaseNestedInput
    courtDecisions?: CourtDecisionUpdateManyWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    priority?: EnumCasePriorityFieldUpdateOperationsInput | $Enums.CasePriority
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    clientEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientPhone?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tags?: CaseUpdatetagsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: IntFieldUpdateOperationsInput | number
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: FloatFieldUpdateOperationsInput | number
    hourlyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    files?: FileUncheckedUpdateManyWithoutCaseNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutCaseNestedInput
    milestones?: MilestoneUncheckedUpdateManyWithoutCaseNestedInput
    comments?: CommentUncheckedUpdateManyWithoutCaseNestedInput
    timeEntries?: TimeEntryUncheckedUpdateManyWithoutCaseNestedInput
    legalRefs?: LegalReferenceUncheckedUpdateManyWithoutCaseNestedInput
    workflowSteps?: WorkflowStepUncheckedUpdateManyWithoutCaseNestedInput
    documentTypes?: DocumentTypeUncheckedUpdateManyWithoutCaseNestedInput
    legalStatutes?: LegalStatuteUncheckedUpdateManyWithoutCaseNestedInput
    courtDecisions?: CourtDecisionUncheckedUpdateManyWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    priority?: EnumCasePriorityFieldUpdateOperationsInput | $Enums.CasePriority
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    clientEmail?: NullableStringFieldUpdateOperationsInput | string | null
    clientPhone?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tags?: CaseUpdatetagsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: IntFieldUpdateOperationsInput | number
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: FloatFieldUpdateOperationsInput | number
    hourlyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ActivityUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: CaseUpdateOneWithoutActivitiesNestedInput
  }

  export type ActivityUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ActivityUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FileUpdateWithoutUploadedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: CaseUpdateOneRequiredWithoutFilesNestedInput
  }

  export type FileUncheckedUpdateWithoutUploadedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
  }

  export type FileUncheckedUpdateManyWithoutUploadedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
  }

  export type MilestoneUpdateWithoutCompletedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    order?: IntFieldUpdateOperationsInput | number
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: CaseUpdateOneRequiredWithoutMilestonesNestedInput
    assignedTo?: UserUpdateOneWithoutAssignedMilestonesNestedInput
  }

  export type MilestoneUncheckedUpdateWithoutCompletedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    order?: IntFieldUpdateOperationsInput | number
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MilestoneUncheckedUpdateManyWithoutCompletedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    order?: IntFieldUpdateOperationsInput | number
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MilestoneUpdateWithoutAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    order?: IntFieldUpdateOperationsInput | number
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: CaseUpdateOneRequiredWithoutMilestonesNestedInput
    completedBy?: UserUpdateOneWithoutCompletedMilestonesNestedInput
  }

  export type MilestoneUncheckedUpdateWithoutAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    order?: IntFieldUpdateOperationsInput | number
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
    completedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MilestoneUncheckedUpdateManyWithoutAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    order?: IntFieldUpdateOperationsInput | number
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
    completedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommentUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isInternal?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: CaseUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isInternal?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentUncheckedUpdateManyWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isInternal?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
  }

  export type TimeEntryUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    hours?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    billable?: BoolFieldUpdateOperationsInput | boolean
    hourlyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: CaseUpdateOneRequiredWithoutTimeEntriesNestedInput
  }

  export type TimeEntryUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    hours?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    billable?: BoolFieldUpdateOperationsInput | boolean
    hourlyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
  }

  export type TimeEntryUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    hours?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    billable?: BoolFieldUpdateOperationsInput | boolean
    hourlyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
  }

  export type LegalReferenceUpdateWithoutAddedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    citation?: StringFieldUpdateOperationsInput | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    relevance?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: CaseUpdateOneRequiredWithoutLegalRefsNestedInput
  }

  export type LegalReferenceUncheckedUpdateWithoutAddedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    citation?: StringFieldUpdateOperationsInput | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    relevance?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
  }

  export type LegalReferenceUncheckedUpdateManyWithoutAddedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    citation?: StringFieldUpdateOperationsInput | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    relevance?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
  }

  export type WorkflowStepUpdateWithoutAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    completed?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dependencies?: WorkflowStepUpdatedependenciesInput | string[]
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: CaseUpdateOneRequiredWithoutWorkflowStepsNestedInput
  }

  export type WorkflowStepUncheckedUpdateWithoutAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    completed?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dependencies?: WorkflowStepUpdatedependenciesInput | string[]
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
  }

  export type WorkflowStepUncheckedUpdateManyWithoutAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    completed?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dependencies?: WorkflowStepUpdatedependenciesInput | string[]
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
  }

  export type LegalStatuteUpdateWithoutAddedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    chapter?: NullableStringFieldUpdateOperationsInput | string | null
    section?: NullableStringFieldUpdateOperationsInput | string | null
    subsection?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: CaseUpdateOneRequiredWithoutLegalStatutesNestedInput
  }

  export type LegalStatuteUncheckedUpdateWithoutAddedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    chapter?: NullableStringFieldUpdateOperationsInput | string | null
    section?: NullableStringFieldUpdateOperationsInput | string | null
    subsection?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
  }

  export type LegalStatuteUncheckedUpdateManyWithoutAddedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    chapter?: NullableStringFieldUpdateOperationsInput | string | null
    section?: NullableStringFieldUpdateOperationsInput | string | null
    subsection?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
  }

  export type CourtDecisionUpdateWithoutAddedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    court?: StringFieldUpdateOperationsInput | string
    caseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    relevance?: NullableStringFieldUpdateOperationsInput | string | null
    precedent?: BoolFieldUpdateOperationsInput | boolean
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: CaseUpdateOneRequiredWithoutCourtDecisionsNestedInput
  }

  export type CourtDecisionUncheckedUpdateWithoutAddedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    court?: StringFieldUpdateOperationsInput | string
    caseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    relevance?: NullableStringFieldUpdateOperationsInput | string | null
    precedent?: BoolFieldUpdateOperationsInput | boolean
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
  }

  export type CourtDecisionUncheckedUpdateManyWithoutAddedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    court?: StringFieldUpdateOperationsInput | string
    caseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    relevance?: NullableStringFieldUpdateOperationsInput | string | null
    precedent?: BoolFieldUpdateOperationsInput | boolean
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
  }

  export type FileCreateManyCaseInput = {
    id?: string
    originalName: string
    fileName: string
    fileSize: number
    mimeType: string
    filePath: string
    uploadedAt?: Date | string
    uploadedById: string
  }

  export type ActivityCreateManyCaseInput = {
    id?: string
    type: string
    description: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    userId?: string | null
  }

  export type MilestoneCreateManyCaseInput = {
    id?: string
    title: string
    description?: string | null
    dueDate?: Date | string | null
    completed?: boolean
    completedAt?: Date | string | null
    order?: number
    estimatedHours?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    completedById?: string | null
    assignedToId?: string | null
  }

  export type CommentCreateManyCaseInput = {
    id?: string
    content: string
    isInternal?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
  }

  export type TimeEntryCreateManyCaseInput = {
    id?: string
    description?: string | null
    hours: number
    date: Date | string
    billable?: boolean
    hourlyRate?: number | null
    amount?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type LegalReferenceCreateManyCaseInput = {
    id?: string
    type: string
    title: string
    citation: string
    url?: string | null
    summary?: string | null
    relevance?: string | null
    createdAt?: Date | string
    addedById?: string | null
  }

  export type WorkflowStepCreateManyCaseInput = {
    id?: string
    title: string
    description?: string | null
    order: number
    completed?: boolean
    completedAt?: Date | string | null
    dueDate?: Date | string | null
    assignedToId?: string | null
    dependencies?: WorkflowStepCreatedependenciesInput | string[]
    estimatedHours?: number | null
    actualHours?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DocumentTypeCreateManyCaseInput = {
    id?: string
    name: string
    description?: string | null
    icon?: string | null
    required?: boolean
    category?: string | null
    template?: string | null
    order?: number
    createdAt?: Date | string
  }

  export type LegalStatuteCreateManyCaseInput = {
    id?: string
    title: string
    chapter?: string | null
    section?: string | null
    subsection?: string | null
    description?: string | null
    url?: string | null
    notes?: string | null
    priority?: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    addedById?: string | null
  }

  export type CourtDecisionCreateManyCaseInput = {
    id?: string
    title: string
    court: string
    caseNumber?: string | null
    date?: Date | string | null
    summary?: string | null
    url?: string | null
    relevance?: string | null
    precedent?: boolean
    outcome?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    addedById?: string | null
  }

  export type FileUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploadedBy?: UserUpdateOneRequiredWithoutFileUploadsNestedInput
  }

  export type FileUncheckedUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploadedById?: StringFieldUpdateOperationsInput | string
  }

  export type FileUncheckedUpdateManyWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploadedById?: StringFieldUpdateOperationsInput | string
  }

  export type ActivityUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutActivitiesNestedInput
  }

  export type ActivityUncheckedUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ActivityUncheckedUpdateManyWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MilestoneUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    order?: IntFieldUpdateOperationsInput | number
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedBy?: UserUpdateOneWithoutCompletedMilestonesNestedInput
    assignedTo?: UserUpdateOneWithoutAssignedMilestonesNestedInput
  }

  export type MilestoneUncheckedUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    order?: IntFieldUpdateOperationsInput | number
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedById?: NullableStringFieldUpdateOperationsInput | string | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MilestoneUncheckedUpdateManyWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    order?: IntFieldUpdateOperationsInput | number
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedById?: NullableStringFieldUpdateOperationsInput | string | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommentUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isInternal?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isInternal?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentUncheckedUpdateManyWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isInternal?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
  }

  export type TimeEntryUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    hours?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    billable?: BoolFieldUpdateOperationsInput | boolean
    hourlyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTimeEntriesNestedInput
  }

  export type TimeEntryUncheckedUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    hours?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    billable?: BoolFieldUpdateOperationsInput | boolean
    hourlyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type TimeEntryUncheckedUpdateManyWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    hours?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    billable?: BoolFieldUpdateOperationsInput | boolean
    hourlyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type LegalReferenceUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    citation?: StringFieldUpdateOperationsInput | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    relevance?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    addedBy?: UserUpdateOneWithoutLegalRefsNestedInput
  }

  export type LegalReferenceUncheckedUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    citation?: StringFieldUpdateOperationsInput | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    relevance?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    addedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LegalReferenceUncheckedUpdateManyWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    citation?: StringFieldUpdateOperationsInput | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    relevance?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    addedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WorkflowStepUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    completed?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dependencies?: WorkflowStepUpdatedependenciesInput | string[]
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedTo?: UserUpdateOneWithoutWorkflowStepsNestedInput
  }

  export type WorkflowStepUncheckedUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    completed?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    dependencies?: WorkflowStepUpdatedependenciesInput | string[]
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkflowStepUncheckedUpdateManyWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    completed?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    dependencies?: WorkflowStepUpdatedependenciesInput | string[]
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    actualHours?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentTypeUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    required?: BoolFieldUpdateOperationsInput | boolean
    category?: NullableStringFieldUpdateOperationsInput | string | null
    template?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentTypeUncheckedUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    required?: BoolFieldUpdateOperationsInput | boolean
    category?: NullableStringFieldUpdateOperationsInput | string | null
    template?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentTypeUncheckedUpdateManyWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    required?: BoolFieldUpdateOperationsInput | boolean
    category?: NullableStringFieldUpdateOperationsInput | string | null
    template?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LegalStatuteUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    chapter?: NullableStringFieldUpdateOperationsInput | string | null
    section?: NullableStringFieldUpdateOperationsInput | string | null
    subsection?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    addedBy?: UserUpdateOneWithoutLegalStatutesNestedInput
  }

  export type LegalStatuteUncheckedUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    chapter?: NullableStringFieldUpdateOperationsInput | string | null
    section?: NullableStringFieldUpdateOperationsInput | string | null
    subsection?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    addedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LegalStatuteUncheckedUpdateManyWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    chapter?: NullableStringFieldUpdateOperationsInput | string | null
    section?: NullableStringFieldUpdateOperationsInput | string | null
    subsection?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    addedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CourtDecisionUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    court?: StringFieldUpdateOperationsInput | string
    caseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    relevance?: NullableStringFieldUpdateOperationsInput | string | null
    precedent?: BoolFieldUpdateOperationsInput | boolean
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    addedBy?: UserUpdateOneWithoutCourtDecisionsNestedInput
  }

  export type CourtDecisionUncheckedUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    court?: StringFieldUpdateOperationsInput | string
    caseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    relevance?: NullableStringFieldUpdateOperationsInput | string | null
    precedent?: BoolFieldUpdateOperationsInput | boolean
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    addedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CourtDecisionUncheckedUpdateManyWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    court?: StringFieldUpdateOperationsInput | string
    caseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    relevance?: NullableStringFieldUpdateOperationsInput | string | null
    precedent?: BoolFieldUpdateOperationsInput | boolean
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    addedById?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}