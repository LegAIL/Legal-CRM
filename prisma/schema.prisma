generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application models
enum UserRole {
  ADMINISTRATOR
  USER
  LAWYER
  ASSOCIATE
}

enum CaseStatus {
  NEW
  IN_PROGRESS
  REVIEW
  COMPLETED
}

enum CasePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  firstName     String?
  lastName      String?
  phone         String?
  position      String?
  active        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // NextAuth relations
  accounts Account[]
  sessions Session[]

  // CRM relations
  assignedCases Case[] @relation("AssignedTo")
  createdCases  Case[] @relation("CreatedBy")
  activities    Activity[]
  fileUploads   File[]
  completedMilestones Milestone[]
  assignedMilestones Milestone[] @relation("MilestoneAssignee")
  comments      Comment[]
  timeEntries   TimeEntry[]
  legalRefs     LegalReference[]
  workflowSteps WorkflowStep[] @relation("WorkflowStepAssignee")
  legalStatutes LegalStatute[] @relation("LegalStatuteAddedBy")
  courtDecisions CourtDecision[] @relation("CourtDecisionAddedBy")

  @@map("users")
}

model Case {
  id            String        @id @default(cuid())
  title         String
  description   String?       @db.Text
  status        CaseStatus    @default(NEW)
  priority      CasePriority  @default(MEDIUM)
  clientName    String?
  clientEmail   String?
  clientPhone   String?
  dueDate       DateTime?
  tags          String[]      @default([])
  notes         String?       @db.Text
  progress      Int           @default(0) // 0-100 percentage
  estimatedHours Float?
  actualHours   Float         @default(0)
  hourlyRate    Float?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  assignedToId  String?
  assignedTo    User?     @relation("AssignedTo", fields: [assignedToId], references: [id])
  createdById   String?
  createdBy     User?     @relation("CreatedBy", fields: [createdById], references: [id])
  
  files         File[]
  activities    Activity[]
  milestones    Milestone[]
  comments      Comment[]
  timeEntries   TimeEntry[]
  legalRefs     LegalReference[]
  workflowSteps WorkflowStep[]
  documentTypes DocumentType[]
  legalStatutes LegalStatute[]
  courtDecisions CourtDecision[]

  @@map("cases")
}

model File {
  id           String   @id @default(cuid())
  originalName String
  fileName     String   @unique
  fileSize     Int
  mimeType     String
  filePath     String
  uploadedAt   DateTime @default(now())

  // Relations
  caseId       String
  case         Case   @relation(fields: [caseId], references: [id], onDelete: Cascade)
  uploadedById String
  uploadedBy   User   @relation(fields: [uploadedById], references: [id])

  @@map("files")
}

model Activity {
  id          String   @id @default(cuid())
  type        String   // created, updated, status_changed, file_uploaded, etc.
  description String
  metadata    Json?    // Additional data about the activity
  createdAt   DateTime @default(now())

  // Relations
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
  caseId      String?
  case        Case?    @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@map("activities")
}

model Milestone {
  id          String    @id @default(cuid())
  title       String
  description String?   @db.Text
  dueDate     DateTime?
  completed   Boolean   @default(false)
  completedAt DateTime?
  order       Int       @default(0)
  estimatedHours Float?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  caseId      String
  case        Case      @relation(fields: [caseId], references: [id], onDelete: Cascade)
  completedById String?
  completedBy User?     @relation(fields: [completedById], references: [id])
  assignedToId String?
  assignedTo  User?     @relation("MilestoneAssignee", fields: [assignedToId], references: [id])

  @@map("milestones")
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  isInternal Boolean  @default(false) // Internal notes vs client-visible
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  caseId    String
  case      Case   @relation(fields: [caseId], references: [id], onDelete: Cascade)
  authorId  String
  author    User   @relation(fields: [authorId], references: [id])

  @@map("comments")
}

model TimeEntry {
  id          String   @id @default(cuid())
  description String?  @db.Text
  hours       Float
  date        DateTime
  billable    Boolean  @default(true)
  hourlyRate  Float?
  amount      Float?   // Calculated field: hours * hourlyRate
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  caseId      String
  case        Case   @relation(fields: [caseId], references: [id], onDelete: Cascade)
  userId      String
  user        User   @relation(fields: [userId], references: [id])

  @@map("time_entries")
}

model LegalReference {
  id          String @id @default(cuid())
  type        String // "statute", "case_law", "regulation", etc.
  title       String
  citation    String
  url         String?
  summary     String? @db.Text
  relevance   String? @db.Text // How it relates to the case
  createdAt   DateTime @default(now())

  // Relations
  caseId      String
  case        Case   @relation(fields: [caseId], references: [id], onDelete: Cascade)
  addedById   String?
  addedBy     User?  @relation(fields: [addedById], references: [id])

  @@map("legal_references")
}

model WorkflowStep {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  order       Int
  completed   Boolean  @default(false)
  completedAt DateTime?
  dueDate     DateTime?
  assignedToId String?
  assignedTo   User?    @relation("WorkflowStepAssignee", fields: [assignedToId], references: [id])
  dependencies String[] // IDs of steps that must be completed first
  estimatedHours Float?
  actualHours  Float   @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  caseId      String
  case        Case     @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@map("workflow_steps")
}

model DocumentType {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  icon        String?  // Icon name/type for UI display
  required    Boolean  @default(false)
  category    String?  // e.g., "legal", "financial", "correspondence"
  template    String?  @db.Text // Optional template or checklist
  order       Int      @default(0)
  createdAt   DateTime @default(now())

  // Relations
  caseId      String
  case        Case     @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@map("document_types")
}

model LegalStatute {
  id          String   @id @default(cuid())
  title       String
  chapter     String?  // e.g., "Kap 1", "Chapter 5"
  section     String?  // e.g., "§ 1", "Section 3"
  subsection  String?  // e.g., "1 st.", "subsection a"
  description String?  @db.Text
  url         String?  // Link to legal text
  notes       String?  @db.Text // Case-specific notes about this statute
  priority    String   @default("MEDIUM") // LOW, MEDIUM, HIGH
  status      String   @default("TO_REVIEW") // TO_REVIEW, REVIEWED, NOT_APPLICABLE
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  caseId      String
  case        Case     @relation(fields: [caseId], references: [id], onDelete: Cascade)
  addedById   String?
  addedBy     User?    @relation("LegalStatuteAddedBy", fields: [addedById], references: [id])

  @@map("legal_statutes")
}

model CourtDecision {
  id            String   @id @default(cuid())
  title         String
  court         String   // e.g., "Högsta domstolen", "Supreme Court"
  caseNumber    String?  // Court case number
  date          DateTime?
  summary       String?  @db.Text
  url           String?  // Link to decision
  relevance     String?  @db.Text // How it relates to the current case
  precedent     Boolean  @default(false) // Is this a precedent-setting case?
  outcome       String?  // e.g., "Favorable", "Unfavorable", "Mixed"
  notes         String?  @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  caseId        String
  case          Case     @relation(fields: [caseId], references: [id], onDelete: Cascade)
  addedById     String?
  addedBy       User?    @relation("CourtDecisionAddedBy", fields: [addedById], references: [id])

  @@map("court_decisions")
}
